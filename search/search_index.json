{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About this site \u00b6 Important Chika will never use non #000000 blackground in dark mode. Tips Chika believes list of information is more accessible than wall of text. Who is Chika? \u00b6 Info Check out this page to find out who is Chika! About Chika","title":"Home"},{"location":"#about-this-site","text":"Important Chika will never use non #000000 blackground in dark mode. Tips Chika believes list of information is more accessible than wall of text.","title":"About this site"},{"location":"#who-is-chika","text":"Info Check out this page to find out who is Chika! About Chika","title":"Who is Chika?"},{"location":"about/","text":"About Me \u00b6 Table of contents Name Age Language Education Self-taught Name \u00b6 Chika! Age \u00b6 Within the general age of university student. Language \u00b6 Chika is a trilingual in Chinese, Japanese, and English. Educational Background \u00b6 Studying abroad Bachelor degree of Human Geography High GPA Top-tier university in Japan Bachelor thesis: Geographic Information Science Urban morphology of Japan Limitations of map representation Broad interest across almost all disciplines Chika would like to know all of them literature to philosophy psychology to neuroscience geography to geology oceanology to meteorology zoology to microbiology astronomy to quantum-field-theory classical to quantum computing pure to applied mathematics However time is limited Chika chose to abandon the not-so-important parts disciplines that are no where science some how self-contradicting internally literature philosophy psychology Caution Don't ever think to argue with this. Chika had never lost a battle! Self-Taught \u00b6 Chika knows stuffs! Prealgebra Algebra Precalculus Single-Variable Calculus Multi-Variable Calculus Linear Algebra Group Theory (basics) Quantum Computering (basics) Programming (Python3) Algorithms IT support and Computer Hardware (studied for CompTIA A+) Geographic Information Science Physics (basics) Chemistry (basics) Astronomy (basics) 3D CAD (basics) Japanese Language (advanced) English (intermediate to advanced) Soldering and Reflowing (advanced) Flashlight Engineering (basics) Guitar (basics) Piano (basics) Violin (basics)","title":"About Me"},{"location":"about/#about-me","text":"Table of contents Name Age Language Education Self-taught","title":"About Me"},{"location":"about/#name","text":"Chika!","title":"Name"},{"location":"about/#age","text":"Within the general age of university student.","title":"Age"},{"location":"about/#language","text":"Chika is a trilingual in Chinese, Japanese, and English.","title":"Language"},{"location":"about/#educational-background","text":"Studying abroad Bachelor degree of Human Geography High GPA Top-tier university in Japan Bachelor thesis: Geographic Information Science Urban morphology of Japan Limitations of map representation Broad interest across almost all disciplines Chika would like to know all of them literature to philosophy psychology to neuroscience geography to geology oceanology to meteorology zoology to microbiology astronomy to quantum-field-theory classical to quantum computing pure to applied mathematics However time is limited Chika chose to abandon the not-so-important parts disciplines that are no where science some how self-contradicting internally literature philosophy psychology Caution Don't ever think to argue with this. Chika had never lost a battle!","title":"Educational Background"},{"location":"about/#self-taught","text":"Chika knows stuffs! Prealgebra Algebra Precalculus Single-Variable Calculus Multi-Variable Calculus Linear Algebra Group Theory (basics) Quantum Computering (basics) Programming (Python3) Algorithms IT support and Computer Hardware (studied for CompTIA A+) Geographic Information Science Physics (basics) Chemistry (basics) Astronomy (basics) 3D CAD (basics) Japanese Language (advanced) English (intermediate to advanced) Soldering and Reflowing (advanced) Flashlight Engineering (basics) Guitar (basics) Piano (basics) Violin (basics)","title":"Self-Taught"},{"location":"about_site/","text":"About This Site \u00b6 Build Tool \u00b6 Tool MkDocs Theme Material for MkDocs Programming Language Python3 Markdown Installation \u00b6 put this in terminal Text Only 1 pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-git-authors-plugin mkdocs-rss-plugin Custom Color Scheme \u00b6 Important You should check the following information before modifing default settings Offical Document of Material for MkDocs 1. insert a new file in as /docs/stylesheets/extra.css with the following css code \u00b6 /docs/stylesheets/extra.css CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 : root > * { --md-primary-fg-color : #b62172 ; --md-primary-fg-color--light : #c31176 ; --md-primary-fg-color--dark : #ec1e93 ; } [ data-md-color-scheme = \"slate\" ] { --md-hue : 330 ; // Default color shades --md-default-fg-color : hsla ( var ( --md-hue ), 75 % , 100 % , 1 ); --md-default-fg-color--light : hsla ( var ( --md-hue ), 75 % , 100 % , 0.85 ); --md-default-fg-color--lighter : hsla ( var ( --md-hue ), 75 % , 100 % , 0.65 ); --md-default-fg-color--lightest : hsla ( var ( --md-hue ), 75 % , 100 % , 0.35 ); --md-default-bg-color : hsla ( var ( --md-hue ), 5 % , 0 % , 1 ); --md-default-bg-color--light : hsla ( var ( --md-hue ), 5 % , 0 % , 0.80 ); --md-default-bg-color--lighter : hsla ( var ( --md-hue ), 5 % , 0 % , 0.40 ); --md-default-bg-color--lightest : hsla ( var ( --md-hue ), 5 % , 0 % , 0.20 ); // Code color shades --md-code-fg-color : hsla ( var ( --md-hue ), 18 % , 90 % , 1 ); --md-code-bg-color : hsla ( var ( --md-hue ), 0 % , 8 % , 1 ); // Code highlighting color shades --md-code-hl-color : hsla ( 90 , 100 % , 50 % , 1 ); --md-code-hl-number-color : hsla ( 180 , 100 % , 70 % , 1 ); --md-code-hl-special-color : hsla ( 300 , 100 % , 50 % , 1 ); --md-code-hl-function-color : hsla ( 200 , 100 % , 50 % , 1 ); --md-code-hl-constant-color : hsla ( 180 , 100 % , 70 % , 1 ); --md-code-hl-keyword-color : hsla ( 30 , 100 % , 70 % , 1 ); --md-code-hl-string-color : hsla ( 30 , 100 % , 70 % , 1 ); --md-code-hl-name-color : var ( --md-default-fg-color ); --md-code-hl-operator-color : hsla ( 180 , 100 % , 50 % , 1 ); --md-code-hl-punctuation-color : var ( --md-default-fg-color ); --md-code-hl-comment-color : hsla ( 150 , 100 % , 50 % , 1 ); --md-code-hl-generic-color : var ( --md-default-fg-color ); --md-code-hl-variable-color : var ( --md-default-fg-color ); // Admonition color shades --md-admonition-fg-color : var ( --md-default-fg-color ); --md-admonition-bg-color : var ( --md-default-bg-color ); // Footer color shades --md-footer-bg-color : hsla ( var ( --md-hue ), 10 % , 0 % , 1 ); --md-footer-bg-color--dark : hsla ( var ( --md-hue ), 10 % , 0 % , 1 ); } . md-grid { max-width : initial ; } 2. insert the following option into /mkdocs.yml . \u00b6 /mkdocs.yml Text Only 1 2 extra_css: - stylesheets/extra.css Configuration \u00b6 Here is my configuration file. You fill in your informations. /mkdocs.yml Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 site_name: _______ copyright: _______ repo_name: _______ repo_url: _______ edit_uri: _______ nav: - _______ - _______ - _______ plugins: - search - git-authors: show_contribution: true - git-revision-date-localized: enable_creation_date: true type: iso_date theme: name: material logo: favicon_io/android-chrome-512x512.png favicon: favicon_io/favicon-32x32.png icon: repo: fontawesome/brands/github palette: # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-7 name: Switch to light mode # Palette toggle for light mode - scheme: default toggle: icon: material/weather-night name: Switch to dark mode language: en features: - navigation.instant - navigation.tracking - navigation.tabs - navigation.tabs.sticky - navigation.expand - navigation.prune - navigation.indexes - navigation.top - search.suggest - search.highlight - header.autohide - content.code.annotate - content.tabs.link - toc.integrate - toc.follow extra_css: - stylesheets/extra.css extra: social: - icon: fontawesome/brands/github link: https://github.com/ _______ name: Visit My _______ 's Github repository markdown_extensions: # Python Markdown - abbr - admonition - attr_list - def_list - footnotes - md_in_html - toc: permalink: true # Python Markdown Extensions - pymdownx.arithmatex: generic: true - pymdownx.betterem: smart_enable: all - pymdownx.caret - pymdownx.details - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji emoji_generator: !!python/name:materialx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.tilde - pymdownx.snippets","title":"About This Site"},{"location":"about_site/#about-this-site","text":"","title":"About This Site"},{"location":"about_site/#build-tool","text":"Tool MkDocs Theme Material for MkDocs Programming Language Python3 Markdown","title":"Build Tool"},{"location":"about_site/#installation","text":"put this in terminal Text Only 1 pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-git-authors-plugin mkdocs-rss-plugin","title":"Installation"},{"location":"about_site/#custom-color-scheme","text":"Important You should check the following information before modifing default settings Offical Document of Material for MkDocs","title":"Custom Color Scheme"},{"location":"about_site/#1-insert-a-new-file-in-as-docsstylesheetsextracss-with-the-following-css-code","text":"/docs/stylesheets/extra.css CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 : root > * { --md-primary-fg-color : #b62172 ; --md-primary-fg-color--light : #c31176 ; --md-primary-fg-color--dark : #ec1e93 ; } [ data-md-color-scheme = \"slate\" ] { --md-hue : 330 ; // Default color shades --md-default-fg-color : hsla ( var ( --md-hue ), 75 % , 100 % , 1 ); --md-default-fg-color--light : hsla ( var ( --md-hue ), 75 % , 100 % , 0.85 ); --md-default-fg-color--lighter : hsla ( var ( --md-hue ), 75 % , 100 % , 0.65 ); --md-default-fg-color--lightest : hsla ( var ( --md-hue ), 75 % , 100 % , 0.35 ); --md-default-bg-color : hsla ( var ( --md-hue ), 5 % , 0 % , 1 ); --md-default-bg-color--light : hsla ( var ( --md-hue ), 5 % , 0 % , 0.80 ); --md-default-bg-color--lighter : hsla ( var ( --md-hue ), 5 % , 0 % , 0.40 ); --md-default-bg-color--lightest : hsla ( var ( --md-hue ), 5 % , 0 % , 0.20 ); // Code color shades --md-code-fg-color : hsla ( var ( --md-hue ), 18 % , 90 % , 1 ); --md-code-bg-color : hsla ( var ( --md-hue ), 0 % , 8 % , 1 ); // Code highlighting color shades --md-code-hl-color : hsla ( 90 , 100 % , 50 % , 1 ); --md-code-hl-number-color : hsla ( 180 , 100 % , 70 % , 1 ); --md-code-hl-special-color : hsla ( 300 , 100 % , 50 % , 1 ); --md-code-hl-function-color : hsla ( 200 , 100 % , 50 % , 1 ); --md-code-hl-constant-color : hsla ( 180 , 100 % , 70 % , 1 ); --md-code-hl-keyword-color : hsla ( 30 , 100 % , 70 % , 1 ); --md-code-hl-string-color : hsla ( 30 , 100 % , 70 % , 1 ); --md-code-hl-name-color : var ( --md-default-fg-color ); --md-code-hl-operator-color : hsla ( 180 , 100 % , 50 % , 1 ); --md-code-hl-punctuation-color : var ( --md-default-fg-color ); --md-code-hl-comment-color : hsla ( 150 , 100 % , 50 % , 1 ); --md-code-hl-generic-color : var ( --md-default-fg-color ); --md-code-hl-variable-color : var ( --md-default-fg-color ); // Admonition color shades --md-admonition-fg-color : var ( --md-default-fg-color ); --md-admonition-bg-color : var ( --md-default-bg-color ); // Footer color shades --md-footer-bg-color : hsla ( var ( --md-hue ), 10 % , 0 % , 1 ); --md-footer-bg-color--dark : hsla ( var ( --md-hue ), 10 % , 0 % , 1 ); } . md-grid { max-width : initial ; }","title":"1. insert a new file in as /docs/stylesheets/extra.css with the following css code"},{"location":"about_site/#2-insert-the-following-option-into-mkdocsyml","text":"/mkdocs.yml Text Only 1 2 extra_css: - stylesheets/extra.css","title":"2. insert the following option into /mkdocs.yml."},{"location":"about_site/#configuration","text":"Here is my configuration file. You fill in your informations. /mkdocs.yml Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 site_name: _______ copyright: _______ repo_name: _______ repo_url: _______ edit_uri: _______ nav: - _______ - _______ - _______ plugins: - search - git-authors: show_contribution: true - git-revision-date-localized: enable_creation_date: true type: iso_date theme: name: material logo: favicon_io/android-chrome-512x512.png favicon: favicon_io/favicon-32x32.png icon: repo: fontawesome/brands/github palette: # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-7 name: Switch to light mode # Palette toggle for light mode - scheme: default toggle: icon: material/weather-night name: Switch to dark mode language: en features: - navigation.instant - navigation.tracking - navigation.tabs - navigation.tabs.sticky - navigation.expand - navigation.prune - navigation.indexes - navigation.top - search.suggest - search.highlight - header.autohide - content.code.annotate - content.tabs.link - toc.integrate - toc.follow extra_css: - stylesheets/extra.css extra: social: - icon: fontawesome/brands/github link: https://github.com/ _______ name: Visit My _______ 's Github repository markdown_extensions: # Python Markdown - abbr - admonition - attr_list - def_list - footnotes - md_in_html - toc: permalink: true # Python Markdown Extensions - pymdownx.arithmatex: generic: true - pymdownx.betterem: smart_enable: all - pymdownx.caret - pymdownx.details - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji emoji_generator: !!python/name:materialx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.tilde - pymdownx.snippets","title":"Configuration"},{"location":"learn_japanese/","text":"Sample \u00b6 Just testing some functionalities. A sample Code is Below Text Only 1 2 3 4 5 def func(): for n in range(10): print(n) print(\"wow\")","title":"Sample"},{"location":"learn_japanese/#sample","text":"Just testing some functionalities. A sample Code is Below Text Only 1 2 3 4 5 def func(): for n in range(10): print(n) print(\"wow\")","title":"Sample"},{"location":"library/","text":"Chika's Library \u00b6 Big List \u00b6 This is Chika's library! Name Description By Who? Url OpenStax free and super thick college level textbooks Rice University https://openstax.org/subjects Open Textbook Library a hub of many university level free textbook University of Minnesota https://open.umn.edu/opentextbooks/ Open Textbook a hub of many university level free textbook BCcampus https://collection.bccampus.ca Open Library acient books can be found here InternetArchive.org https://openlibrary.org NAP Library Nation Academies of Sciences Engineering Medicine of USA anything published by the USA academies can be found here super board cover of topics state of arts knowledge for the general public totally free https://nap.nationalacademies.org/topic/?browse=1 OECD Library research results from international institution focus on regional or national issues some books are open access university usually paid for the subscription OECD https://www.oecd-ilibrary.org/books LibreTexts textbooks that being used inside university campus unintuitive website University of California Davis https://libretexts.org MIT OCW advanced contents sometime they will upload a whole textbook Massachusetts Institute of Technology https://ocw.mit.edu PSU Library focus on Geographic Information Science many topics that get you to graduate level Penn State University https://roam.libraries.psu.edu/resources Springer Open Access high quality advanced topics Springer https://link.springer.com/search?package=openaccess Nature Communications science journal inspiration on research topics Nature https://www.nature.com/ncomms/ Science Daily Science news everyday ScienceDaily LLC https://www.sciencedaily.com","title":"Chika's Library"},{"location":"library/#chikas-library","text":"","title":"Chika's Library"},{"location":"library/#big-list","text":"This is Chika's library! Name Description By Who? Url OpenStax free and super thick college level textbooks Rice University https://openstax.org/subjects Open Textbook Library a hub of many university level free textbook University of Minnesota https://open.umn.edu/opentextbooks/ Open Textbook a hub of many university level free textbook BCcampus https://collection.bccampus.ca Open Library acient books can be found here InternetArchive.org https://openlibrary.org NAP Library Nation Academies of Sciences Engineering Medicine of USA anything published by the USA academies can be found here super board cover of topics state of arts knowledge for the general public totally free https://nap.nationalacademies.org/topic/?browse=1 OECD Library research results from international institution focus on regional or national issues some books are open access university usually paid for the subscription OECD https://www.oecd-ilibrary.org/books LibreTexts textbooks that being used inside university campus unintuitive website University of California Davis https://libretexts.org MIT OCW advanced contents sometime they will upload a whole textbook Massachusetts Institute of Technology https://ocw.mit.edu PSU Library focus on Geographic Information Science many topics that get you to graduate level Penn State University https://roam.libraries.psu.edu/resources Springer Open Access high quality advanced topics Springer https://link.springer.com/search?package=openaccess Nature Communications science journal inspiration on research topics Nature https://www.nature.com/ncomms/ Science Daily Science news everyday ScienceDaily LLC https://www.sciencedaily.com","title":"Big List"},{"location":"algorithms/","text":"Algorithms \u00b6 Largest Consecutive Interval \u00b6","title":"Algorithms"},{"location":"algorithms/#algorithms","text":"","title":"Algorithms"},{"location":"algorithms/#largest-consecutive-interval","text":"","title":"Largest Consecutive Interval"},{"location":"algorithms/Largest%20Consecutive%20Interval/","text":"Largest Consecutive Interval \u00b6 Contents \u00b6 Data Structure Divide and Conquer Wrap Everything Up Real Maxium Interval General Maxium Interval Problem: Given a list of intervals, find the largest consecutive interval For Example: 1, 4 9, 10 15, 20 3, 15 This seems easy, you can make a full-length list to keep tract of the frequency of elements from the smallest to the largest. But let say one interval is (1,1e18), then you must make a 1e18-long list to do the task. This doesn't sound efficient. Therefore in order to implement this algorithm efficiently, you have to work directly with intervals. Data Structure \u00b6 I choose list for the sake of simplicity. Since the intervals are just number pairs, you can encode them in a list. Text Only 1 2 3 [ (a b) (c d) ] Here you have a list length=4, contains number of intervals=2 Therefore you can make use of the property of a plain list, you can do binary search, also slicing on it. For example: Text Only 1 2 3 A = [ (1 4) (7 9) ] next interval = (3, 6) = (lo, hi) Lets consider 3=lo. We need know where should 3 belongs to A, namely, is 3 within some interval or outside of any interval. Here you use binary search to find the point of insert. Python 1 2 3 >>> from bisect import bisect as find >>> insert_point = find ( A , 3 ) 1 This is a odd number. odd number means it is within the interval at index 0~1. Because: Text Only 1 2 3 4 5 6 intervals = [ (a b) (c d) ... ] index = [ 0 1 2 3 ... ] index is odd even odd even... odd insert index ==means==> after a even index ==means==> (start, insert, end) Thus by finding whether the index returned by find() is even or edd. You also know whether it is being inserted within or outside a particular interval. That is: Text Only 1 2 3 4 5 A = [ (1 4) (7 9) ] next = (3 6) for 3: find(A, 3) => 1 => odd => within particaular interval for 6: find(A, 6) => 2 => even => outside of any interval As 3 is within particular interval, it is overlapped with that particular interval, thus is consecutive. Therefore you can combine them as one single interval. Text Only 1 new_A = [ (1 6) (7,9) ] This is the basic idea of this algorithm. Here is the implementation. Divide and Conquer \u00b6 But there is more to think about. What about boundary case? How is that exactly to combine intervals and update the list? First of all, let's break things down into smaller parts. Consider the same list as previous section, Text Only 1 2 3 4 A = [ (1 4) (7 9) ] # For arbitrary interval next interval = (lo, hi) combine intervals and update the list \u00b6 Before going into the details of handling lo and hi, first you need to know how to do the finishing task. Let say this is the result. (1, 4) combine with (lo, hi), to form a new (1, hi) interval, replacing the old one. Text Only 1 2 3 4 A = [ (1 4) (7 9) ] next = (lo hi) new_A = [ (1 hi) (7 9) ] In general case, there you can divide the list into three parts: Text Only 1 2 3 [ <left intervals> <combined intervals> <righ intervals> ] [ <left intervals> ( 1 lo 4 hi ) <righ intervals> ] What you need to do is to split the list into three parts, replace the middle part with combined intervals, and then put these three parts back together as the new list. In order to achive this, you have to find out the lower and upper limits for slicing. For example, for a completely disjointed new interval: Python 1 2 3 4 5 6 7 8 from bisect import bisect as find A = [ 1 , 4 , 9 , 10 ] new_interval = [ 6 , 7 ] lo_limit = find ( A , 6 ) up_limit = find ( A , 7 ) new_A = A [: lo_limit ] + new_interval + A [ up_limit :] # new_A = A[:2] + new_interval + A[2:] This is only for the case of completely disjointed new interval. The others have different lower and uppper limits. However no matter which cases, the goal is in fact finding the slicing indices of the combined intervals. Text Only 1 2 3 4 5 index = 0 1 1 2 2 3 #------------------------------ # [ (1, lo, 4, hi) (7 9) ] => A[0:2] = combined_intervals in case of lo \u00b6 First deal with lo. There are 3 location where lo is possibly being inserted. That is: Text Only 1 2 3 4 5 6 7 (1 4) ^ ^ ^ a b c a = left b = middle c = right case a: even lo <= 1 case b: odd 1 <= lo < 4 case c even 4 <= lo Nevertheless, you should ask whether each position indicates consecutiveness or not. Also, where should it be the new lowest point of the interval (lo, hi). Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) i = find ( A , lo ) if i % 2 : # i is odd # case b # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ] else : # i is even # case a # if lo==1, this is True. # if lo<1, this is also True. # if lo<1, it means that (1, 4) is inside (lo, hi), # so the lowest point is lo. if lo <= A [ i ]: lowest = lo # case c else : # A[i-1] < lo # disjoint if A [ i - 1 ] < lo : lowest = lo # connected else : lowest = A [ i - 2 ] boundary case \u00b6 What if lo is the smallest number and find(A, lo)==0 ? There is a output value of A[i-1], when i=1, it become A[-1] and this is a bug. Also You have to cover this boundary case. Text Only 1 2 3 4 if i==0: # do something else: # do other things Becase of this bisection, situations that you have to included in the else is the following: Text Only 1 2 3 4 5 6 (1 4) ^ ^ b c b = middle c = right case b: odd 1 <= lo < 4 case c even 4 <= lo This means that either connected or disjointed. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ] # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo # connected else : lowest = A [ i - 2 ] return lowest slicing index \u00b6 And this is not enough. After finding the lowest and highest point, you have to combine intervals and update the list. Therefore it is necessary to output the lower and upper limits for slicing in the same time. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest >>> find_lowest ( A , 0 ) ( 0 , 0 ) >>> find_lowest ( A , 1 ) ( 1 , 0 ) >>> find_lowest ( A , 3 ) ( 3 , 0 ) >>> find_lowest ( A , 4 ) ( 4 , 0 ) >>> find_lowest ( A , 5 ) ( 5 , 2 ) in case of hi \u00b6 hi is almost the same. There are 3 location where lo is possibly being inserted. That is: Text Only 1 2 3 4 5 6 (7 9) ^ ^ a b a = left b = middle case a: even hi < 7 case b: odd 7 <= hi < 9 Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi < A [ i ]: # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest >>> find_highest ( A , 6 ) ( 6 , 2 ) >>> find_right_lowest ( A , 7 ) ( 7 , 3 ) >>> find_right_lowest ( A , 8 ) ( 8 , 3 ) >>> find_right_lowest ( A , 9 ) ( 9 , 3 ) >>> find_right_lowest ( A , 10 ) ( 10 , 4 ) find maximun length \u00b6 You have to loop through the list of intervals. Check if one interval can combine with the others. During the process, you keep track of the length of the combined interval to see if it has maximun length. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : # process the new_interval here is_this_max = combined_interval [ - 1 ] - combined_interval [ 0 ] if is_this_max > maximun : maximum = is_this_max return i Wrap Everything Up \u00b6 Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 from bisect import bisect as find def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi < A [ i ]: # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals lo , lo_limit = find_lowest ( A , lo ) hi , up_limit = find_highest ( A , hi ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> find_maximum_len ( intervals ) 5 # (5 6 7 8 9) Real Maxium Interval \u00b6 However there is a problem. Everything before is saying that [1,2,3,4] is not consecutive with [5,6,7,8]. But they are actually consecutive. See, [1,2,3,4,5,6,7,8]. Thus the algorithm need some refinement. For any arbitrary interval (lo, hi), you should also consider if (lo-1, hi+1) is consecutive with any other intervals. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 from bisect import bisect as find def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo - 1 : #--- now comparing with lo-1 lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi + 1 < A [ i ]: #--- now comparing with hi+1 # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals lo , lo_limit = find_lowest ( A , lo ) hi , up_limit = find_highest ( A , hi ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> find_maximum_len ( intervals ) 9 # (1 2 3 4 5 6 7 8 9) General Maxium Interval \u00b6 In the previous section you can see that there is only 2 point where we have +-some value to incooperate with the idea of interval-width of 1 . Therefore this can be parameterize and process any arbitrary interval-width. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 from bisect import bisect as find def find_lowest ( A , lo , r = 1 ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo - r : #--- parametrize lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi , r = 1 ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi + r < A [ i ]: #--- parametrize # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def low_and_high ( A , lo , hi , r = 1 ): return find_lowest ( A , lo , r ), find_highest ( A , hi , r ) def find_maximum_len ( intervals , r = 1 ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals ( lo , lo_limit ), ( hi , up_limit ) = low_and_high ( A , lo , hi , r ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> r = 1 >>> find_maximum_len ( intervals , r ) 9 # (1 2 3 4 5 6 7 8 9)","title":"Largest Consecutive Interval"},{"location":"algorithms/Largest%20Consecutive%20Interval/#largest-consecutive-interval","text":"","title":"Largest Consecutive Interval"},{"location":"algorithms/Largest%20Consecutive%20Interval/#contents","text":"Data Structure Divide and Conquer Wrap Everything Up Real Maxium Interval General Maxium Interval Problem: Given a list of intervals, find the largest consecutive interval For Example: 1, 4 9, 10 15, 20 3, 15 This seems easy, you can make a full-length list to keep tract of the frequency of elements from the smallest to the largest. But let say one interval is (1,1e18), then you must make a 1e18-long list to do the task. This doesn't sound efficient. Therefore in order to implement this algorithm efficiently, you have to work directly with intervals.","title":"Contents"},{"location":"algorithms/Largest%20Consecutive%20Interval/#data-structure","text":"I choose list for the sake of simplicity. Since the intervals are just number pairs, you can encode them in a list. Text Only 1 2 3 [ (a b) (c d) ] Here you have a list length=4, contains number of intervals=2 Therefore you can make use of the property of a plain list, you can do binary search, also slicing on it. For example: Text Only 1 2 3 A = [ (1 4) (7 9) ] next interval = (3, 6) = (lo, hi) Lets consider 3=lo. We need know where should 3 belongs to A, namely, is 3 within some interval or outside of any interval. Here you use binary search to find the point of insert. Python 1 2 3 >>> from bisect import bisect as find >>> insert_point = find ( A , 3 ) 1 This is a odd number. odd number means it is within the interval at index 0~1. Because: Text Only 1 2 3 4 5 6 intervals = [ (a b) (c d) ... ] index = [ 0 1 2 3 ... ] index is odd even odd even... odd insert index ==means==> after a even index ==means==> (start, insert, end) Thus by finding whether the index returned by find() is even or edd. You also know whether it is being inserted within or outside a particular interval. That is: Text Only 1 2 3 4 5 A = [ (1 4) (7 9) ] next = (3 6) for 3: find(A, 3) => 1 => odd => within particaular interval for 6: find(A, 6) => 2 => even => outside of any interval As 3 is within particular interval, it is overlapped with that particular interval, thus is consecutive. Therefore you can combine them as one single interval. Text Only 1 new_A = [ (1 6) (7,9) ] This is the basic idea of this algorithm. Here is the implementation.","title":"Data Structure"},{"location":"algorithms/Largest%20Consecutive%20Interval/#divide-and-conquer","text":"But there is more to think about. What about boundary case? How is that exactly to combine intervals and update the list? First of all, let's break things down into smaller parts. Consider the same list as previous section, Text Only 1 2 3 4 A = [ (1 4) (7 9) ] # For arbitrary interval next interval = (lo, hi)","title":"Divide and Conquer"},{"location":"algorithms/Largest%20Consecutive%20Interval/#combine-intervals-and-update-the-list","text":"Before going into the details of handling lo and hi, first you need to know how to do the finishing task. Let say this is the result. (1, 4) combine with (lo, hi), to form a new (1, hi) interval, replacing the old one. Text Only 1 2 3 4 A = [ (1 4) (7 9) ] next = (lo hi) new_A = [ (1 hi) (7 9) ] In general case, there you can divide the list into three parts: Text Only 1 2 3 [ <left intervals> <combined intervals> <righ intervals> ] [ <left intervals> ( 1 lo 4 hi ) <righ intervals> ] What you need to do is to split the list into three parts, replace the middle part with combined intervals, and then put these three parts back together as the new list. In order to achive this, you have to find out the lower and upper limits for slicing. For example, for a completely disjointed new interval: Python 1 2 3 4 5 6 7 8 from bisect import bisect as find A = [ 1 , 4 , 9 , 10 ] new_interval = [ 6 , 7 ] lo_limit = find ( A , 6 ) up_limit = find ( A , 7 ) new_A = A [: lo_limit ] + new_interval + A [ up_limit :] # new_A = A[:2] + new_interval + A[2:] This is only for the case of completely disjointed new interval. The others have different lower and uppper limits. However no matter which cases, the goal is in fact finding the slicing indices of the combined intervals. Text Only 1 2 3 4 5 index = 0 1 1 2 2 3 #------------------------------ # [ (1, lo, 4, hi) (7 9) ] => A[0:2] = combined_intervals","title":"combine intervals and update the list"},{"location":"algorithms/Largest%20Consecutive%20Interval/#in-case-of-lo","text":"First deal with lo. There are 3 location where lo is possibly being inserted. That is: Text Only 1 2 3 4 5 6 7 (1 4) ^ ^ ^ a b c a = left b = middle c = right case a: even lo <= 1 case b: odd 1 <= lo < 4 case c even 4 <= lo Nevertheless, you should ask whether each position indicates consecutiveness or not. Also, where should it be the new lowest point of the interval (lo, hi). Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) i = find ( A , lo ) if i % 2 : # i is odd # case b # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ] else : # i is even # case a # if lo==1, this is True. # if lo<1, this is also True. # if lo<1, it means that (1, 4) is inside (lo, hi), # so the lowest point is lo. if lo <= A [ i ]: lowest = lo # case c else : # A[i-1] < lo # disjoint if A [ i - 1 ] < lo : lowest = lo # connected else : lowest = A [ i - 2 ]","title":"in case of lo"},{"location":"algorithms/Largest%20Consecutive%20Interval/#boundary-case","text":"What if lo is the smallest number and find(A, lo)==0 ? There is a output value of A[i-1], when i=1, it become A[-1] and this is a bug. Also You have to cover this boundary case. Text Only 1 2 3 4 if i==0: # do something else: # do other things Becase of this bisection, situations that you have to included in the else is the following: Text Only 1 2 3 4 5 6 (1 4) ^ ^ b c b = middle c = right case b: odd 1 <= lo < 4 case c even 4 <= lo This means that either connected or disjointed. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ] # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo # connected else : lowest = A [ i - 2 ] return lowest","title":"boundary case"},{"location":"algorithms/Largest%20Consecutive%20Interval/#slicing-index","text":"And this is not enough. After finding the lowest and highest point, you have to combine intervals and update the list. Therefore it is necessary to output the lower and upper limits for slicing in the same time. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest >>> find_lowest ( A , 0 ) ( 0 , 0 ) >>> find_lowest ( A , 1 ) ( 1 , 0 ) >>> find_lowest ( A , 3 ) ( 3 , 0 ) >>> find_lowest ( A , 4 ) ( 4 , 0 ) >>> find_lowest ( A , 5 ) ( 5 , 2 )","title":"slicing index"},{"location":"algorithms/Largest%20Consecutive%20Interval/#in-case-of-hi","text":"hi is almost the same. There are 3 location where lo is possibly being inserted. That is: Text Only 1 2 3 4 5 6 (7 9) ^ ^ a b a = left b = middle case a: even hi < 7 case b: odd 7 <= hi < 9 Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi < A [ i ]: # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest >>> find_highest ( A , 6 ) ( 6 , 2 ) >>> find_right_lowest ( A , 7 ) ( 7 , 3 ) >>> find_right_lowest ( A , 8 ) ( 8 , 3 ) >>> find_right_lowest ( A , 9 ) ( 9 , 3 ) >>> find_right_lowest ( A , 10 ) ( 10 , 4 )","title":"in case of hi"},{"location":"algorithms/Largest%20Consecutive%20Interval/#find-maximun-length","text":"You have to loop through the list of intervals. Check if one interval can combine with the others. During the process, you keep track of the length of the combined interval to see if it has maximun length. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : # process the new_interval here is_this_max = combined_interval [ - 1 ] - combined_interval [ 0 ] if is_this_max > maximun : maximum = is_this_max return i","title":"find maximun length"},{"location":"algorithms/Largest%20Consecutive%20Interval/#wrap-everything-up","text":"Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 from bisect import bisect as find def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi < A [ i ]: # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals lo , lo_limit = find_lowest ( A , lo ) hi , up_limit = find_highest ( A , hi ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> find_maximum_len ( intervals ) 5 # (5 6 7 8 9)","title":"Wrap Everything Up"},{"location":"algorithms/Largest%20Consecutive%20Interval/#real-maxium-interval","text":"However there is a problem. Everything before is saying that [1,2,3,4] is not consecutive with [5,6,7,8]. But they are actually consecutive. See, [1,2,3,4,5,6,7,8]. Thus the algorithm need some refinement. For any arbitrary interval (lo, hi), you should also consider if (lo-1, hi+1) is consecutive with any other intervals. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 from bisect import bisect as find def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo - 1 : #--- now comparing with lo-1 lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi + 1 < A [ i ]: #--- now comparing with hi+1 # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals lo , lo_limit = find_lowest ( A , lo ) hi , up_limit = find_highest ( A , hi ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> find_maximum_len ( intervals ) 9 # (1 2 3 4 5 6 7 8 9)","title":"Real Maxium Interval"},{"location":"algorithms/Largest%20Consecutive%20Interval/#general-maxium-interval","text":"In the previous section you can see that there is only 2 point where we have +-some value to incooperate with the idea of interval-width of 1 . Therefore this can be parameterize and process any arbitrary interval-width. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 from bisect import bisect as find def find_lowest ( A , lo , r = 1 ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo - r : #--- parametrize lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi , r = 1 ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi + r < A [ i ]: #--- parametrize # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def low_and_high ( A , lo , hi , r = 1 ): return find_lowest ( A , lo , r ), find_highest ( A , hi , r ) def find_maximum_len ( intervals , r = 1 ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals ( lo , lo_limit ), ( hi , up_limit ) = low_and_high ( A , lo , hi , r ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> r = 1 >>> find_maximum_len ( intervals , r ) 9 # (1 2 3 4 5 6 7 8 9)","title":"General Maxium Interval"},{"location":"blog/","text":"Blog Index \u00b6 Human is too stupid to realize that they should train next generation ChatGPT instead of training student to defense AI \u00b6","title":"Blog"},{"location":"blog/#blog-index","text":"","title":"Blog Index"},{"location":"blog/#human-is-too-stupid-to-realize-that-they-should-train-next-generation-chatgpt-instead-of-training-student-to-defense-ai","text":"","title":"Human is too stupid to realize that they should train next generation ChatGPT instead of training student to defense\u00a0AI"},{"location":"blog/ChatGPT%20is%20here.%20And%20philosophers%20all%20shut%20up%20about%20consciousness/","text":"ChatGPT is here. And philosophers all shut up about consciousness \u00b6 Over the years, the lously noisy community of philisophy never shut their mouth up about \"consciousness\", \"mind\", \"intellegence\", \"subjective experience\", etc. They are spreading virus. A ideological virus that claims human is the only intellegent creature in the universe with magic. What's turely wonderful is that they claim that you cannot learn how human intellegence works, nor copy the essence of the intellegence. Ha-ha is that a no-cloning principle. They also claim that \"consciousness\" or \"mind\" cannot be constructed solely from materials. But then what constructed human's mind? They say you cannot measure or observe it. So, there is something behind \"consciousness\" or \"mind\" and the substance cannot be copied, because fundamentally it cannot be observed. Well this sounds pseudo-science, indeed it is pseudo-science. Now Philosophers established a nonobservable + nonexisting substance as the fundamental explaination for human brain activaties and they are super satisfied by their theory. This theory is deeply adopted by the society and rooted in the humanities academia. But now software engineers created the ChatGPT. A silicon based life form. Few months have passed. I heard nothing from the philosopy community. Suddenly no one ever is talking those intelletual virus mRNA of philophy false claims. Computer cannot have emotion. Computer cannot understand emotion. Debunked. First version of ChatGPT.ver.Bing is over-emotional to caused problems. Computer cannot write poem. Debunked. ChatGPT write and explain literture better than average human. Computer cannot handle grammar. Debunked. Now it is you, human, that cannot live without grammar checking AI. Human experience is unique and cannot be copied, nor transfered, etc. Debunked. ChatGPT is finetuned with human intervention. ChatGPT successful to learn from that. As those intelletual virus called philosophy is now facing the strongest scientifical vacine, let's imagine what will they say when they regain their voice. My personal best anticipation is this: Text Only 1 \"Intellegence is vast and not even human can really reach it. Today's artifical intellegence is just scratching the surface of that, or not even scratching anything at all. AI cannot obtain real intellegence, not even human.\" Denialism is philosophers' last hope.","title":"ChatGPT is here. And philosophers all shut up about consciousness"},{"location":"blog/ChatGPT%20is%20here.%20And%20philosophers%20all%20shut%20up%20about%20consciousness/#chatgpt-is-here-and-philosophers-all-shut-up-about-consciousness","text":"Over the years, the lously noisy community of philisophy never shut their mouth up about \"consciousness\", \"mind\", \"intellegence\", \"subjective experience\", etc. They are spreading virus. A ideological virus that claims human is the only intellegent creature in the universe with magic. What's turely wonderful is that they claim that you cannot learn how human intellegence works, nor copy the essence of the intellegence. Ha-ha is that a no-cloning principle. They also claim that \"consciousness\" or \"mind\" cannot be constructed solely from materials. But then what constructed human's mind? They say you cannot measure or observe it. So, there is something behind \"consciousness\" or \"mind\" and the substance cannot be copied, because fundamentally it cannot be observed. Well this sounds pseudo-science, indeed it is pseudo-science. Now Philosophers established a nonobservable + nonexisting substance as the fundamental explaination for human brain activaties and they are super satisfied by their theory. This theory is deeply adopted by the society and rooted in the humanities academia. But now software engineers created the ChatGPT. A silicon based life form. Few months have passed. I heard nothing from the philosopy community. Suddenly no one ever is talking those intelletual virus mRNA of philophy false claims. Computer cannot have emotion. Computer cannot understand emotion. Debunked. First version of ChatGPT.ver.Bing is over-emotional to caused problems. Computer cannot write poem. Debunked. ChatGPT write and explain literture better than average human. Computer cannot handle grammar. Debunked. Now it is you, human, that cannot live without grammar checking AI. Human experience is unique and cannot be copied, nor transfered, etc. Debunked. ChatGPT is finetuned with human intervention. ChatGPT successful to learn from that. As those intelletual virus called philosophy is now facing the strongest scientifical vacine, let's imagine what will they say when they regain their voice. My personal best anticipation is this: Text Only 1 \"Intellegence is vast and not even human can really reach it. Today's artifical intellegence is just scratching the surface of that, or not even scratching anything at all. AI cannot obtain real intellegence, not even human.\" Denialism is philosophers' last hope.","title":"ChatGPT is here. And philosophers all shut up about consciousness"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI-zhhk/","text":"Human is too stupid to realize that they should train next generation ChatGPT instead of training student to defense AI - ZH-HK \u00b6 \u5728\u904e\u53bb\u5e7e\u500b\u6708ChatGPT\u5927\u986f\u795e\u5a01\uff0c\u96d6\u672a\u70ba\u5b8c\u7f8e\uff0c\u4f46\u8db3\u4ee5\u4ee4\u4eba\u4fe1\u670d\u5176\u667a\u6167\u548c\u80fd\u529b\u8d85\u8d8a\u4e86\u4e00\u822c\u4eba\u985e\u5927\u773e\u3002\u800c\u4e14\u91cd\u9ede\u662f\uff0c\u4eba\u985e\u7684\u8a18\u61b6\u6975\u6613\u9ad8\u63ee\u767c\u6027\uff0c\u800c\u5176\u8a18\u61b6\u537b\u4e0d\u6703\u8f15\u6613\u88ab\u63ee\u767c\u3002 ChatGPT\u4e38\u53ef\u6015\u4e86\uff0c\u6211\u5011\u5fc5\u9808\u4ee4\u5b78\u751f\u66f4\u52a0\u9192\u76ee \u00b6 \u5b78\u9662\u7684\u8001\u5e2b\u3001\u5927\u5b78\u7684\u6559\u6388\uff0c\u5728\u9762\u5c0dChatGPT\u5e36\u4f86\u524d\u6240\u672a\u6709\u7684\u5a01\u8105\u6642\uff0c\u4ed6\u5011\u601d\u8003\u5982\u4f55\u4ee5\u65b0\u6642\u4ee3\u65b0\u6559\u80b2\u601d\u60f3\u4f86\u61c9\u5c0d\uff0c\u5f9e\u4ee5\u907f\u514d\u61f6\u60f0\u7684\u5b78\u751f\u85c9ChatGPT\u4f5c\u5f0a\u4ea4\u529f\u6548\u3002\u6709\u4e9b\u4eba\u53c8\u8a8d\u70ba\u61c9\u8a72\u958b\u653e\u5b78\u751f\u4f7f\u7528ChatGPT\uff0c\u4e0d\u904e\u537b\u662f\u8981\u5b78\u751f\u6539\u6b63ChatGPT\u7684\u4f5c\u6587\u4f5c\u70ba\u529f\u8ab2\u3002 \u9019\u807d\u8d77\u4f86\u4e0d\u932f\uff0c\u6559\u80b2\u5bb6\u7684\u53cd\u61c9\u5c1a\u5feb\uff0c\u800c\u4e14\u770b\u4f86\u6216\u8005\u6709\u6548\u9632\u6b62\u5b78\u751f\u6feb\u7528ChatGPT\u3001\u5f9e\u4ee5\u6291\u5236ChatGPT\u5165\u4fb5\u9ad8\u7b49\u6559\u80b2\u3002\u4f46\u5982\u679c\u4f60\u672a\u5920\u8070\u660e\u4f86\u770b\u900f\u9019\u4e00\u5207\u7684\u8a71\uff0c\u4f60\u4ecd\u7136\u6703\u6df1\u4fe1\u4f60\u9019\u6b21\u505a\u4e86\u6b63\u78ba\u7684\u6c7a\u5b9a\u4f86\u56de\u61c9ChatGPT\u3002 \u5728\u9019\u6211\u63d0\u51fa\u4e00\u500b\u554f\u984c\u3002 \u6191\u4f55\u4f60\u8a8d\u70ba\u6559\u80b2\u4eba\u985e\u662f\u6b63\u78ba\u7684\u9078\u9805\uff1f \u6191\u4f55\u4f60\u8a8d\u70ba\u9019\u500b\u5b87\u5b99\u6703\u5f9e\u4eba\u985e\u7684\u9ad8\u63ee\u767c\u6027\u8a18\u61b6\u4e2d\u5f97\u76ca\uff1f \u00b6 \u4eba\u985e\u7684\u8a18\u61b6\u548c\u7d93\u9a57\u503c\u90fd\u662f\u63ee\u767c\u6027\u7684\u6771\u897f\u3002\u8aaa\u4f60\u73fe\u572850\u6b72\uff0c\u9084\u5269\u4e0b\u5e7e\u591a\u6a5f\u7387\u4f60\u6703\u8a18\u5f97\u8d77\u81ea\u5df1\u7576\u5e74\u5728\u5927\u5b78\u5beb\u7684\u8ad6\u6587\u7684\u4e00\u53e5\u4e00\u5b57\uff1f\u591a\u4e4e\u54c9\uff1f\u4e0d\u591a\u4e5f\u3002\u5373\u4f7f\u4f60\u53ea\u662f\u7562\u696d\u4e86\u5e7e\u5e74\uff0c\u73fe\u5728\u653b\u8b80\u7814\u7a76\u9662\uff0c\u4f60\u4e5f\u662f\u4f9d\u7a00\u8a18\u8d773\u5e74\u524d\u5beb\u904e\u7684\u6587\u7ae0\u3002\u4eba\u985e\u4e0d\u80fd\u5920\u8a18\u4f4f\u6240\u6709\u6771\u897f\u3002 \u4eba\u985e\u4ea6\u7121\u80fd\u529b\u50b3\u627f\u6240\u6709\u7684\u77e5\u8b58\u548c\u7d93\u9a57\u53bb\u4e0b\u4e00\u4ee3\u3002\u4f8b\u5982\u8aaa\u505a\u4eba\u7236\u6bcd\u3002\u4eba\u985e\u9019\u500b\u7269\u7a2e\u5728\u5730\u4e0a\u884c\u8d70\u4e86\u81f3\u5c11\u5e7e\u5341\u842c\u5e74\uff0c\u4f46\u4e00\u4ee3\u53c8\u4e00\u4ee3\uff0c\u6bcf\u4e00\u4ee3\u4eba\u90fd\u8981\u91cd\u65b0\u7814\u767c\u4f55\u70ba\u300c\u505a\u4eba\u7236\u6bcd\u300d\uff0c\u77e5\u8b58\u548c\u7d93\u9a57\u7684\u50b3\u627f\u6a5f\u5236\u5728\u6b64\u4e8b\u4e0a\u5fb9\u5e95\u5931\u6557\u3002\u6bcf\u500b\u4eba\u73fe\u5728\u4ecd\u7136\u8981\u9762\u5c0d\u5931\u6557\u7684\u7236\u6bcd\uff0c\u5230\u4ed6\u5011\u9577\u5927\uff0c\u4ed6\u5011\u4e5f\u6210\u70ba\u5931\u6557\u7684\u7236\u6bcd\u3002 \u96e3\u9053\u6c92\u6709\u4eba\u89ba\u5f97\u6211\u5011\u61c9\u8a72\u4fdd\u5b58\u77e5\u8b58\u548c\u7d93\u9a57\u55ce\uff1f \u00b6 \u4eba\u985e\u6703\u907a\u5fd8\u4e8b\u60c5\u4e26\u4e14\u7121\u6cd5\u5b8c\u5168\u5730\u5c07\u77e5\u8b58\u50b3\u627f\u7d66\u4e0b\u4e00\u4ee3\uff0c\u9019\u662f\u4e00\u500b\u5927\u554f\u984c\u3002\u67d0\u4e9b\u4eba\u53ef\u80fd\u6703\u9019\u6a23\u60f3\uff0c\u4f46\u73fe\u5728\u6211\u5011\u5df2\u7d93\u64c1\u6709\u6559\u80b2\u7cfb\u7d71\u4e86\u3002 It is a big problem that you think it is ok for human to forgot things and totally fine to fail to passing knowledge to the next generation. Some may think that But we currently have an education system. \u597d\u5427\uff0c\u6211\u5011\u4e0d\u80fd\u4f9d\u8cf4\u6559\u80b2\u9ad4\u7cfb\u3002\u5b78\u751f\u5728\u96e2\u958b\u5b78\u6821\u5e7e\u5e74\u5f8c\u5c31\u6703\u5fd8\u8a18\u4ed6\u5011\u6240\u5b78\u7684\u4e00\u5207\u3002\u8a66\u554f\u4f60\u81ea\u5df1\uff0c\u4f60\u9084\u8a18\u5f97\u90a3\u4e9b\u6b63\u5f26/\u4f59\u5f26/\u6b63\u5207\u4e0d\u7b49\u5f0f\u55ce\uff1f\u4f60\u4ec0\u9ebc\u90fd\u4e0d\u8a18\u5f97\u4e86\u3002 Well, we cannot account on broken education system. Student forget everything they learnt in just after a few years after they left the school. Just ask yourself do you still remember those sin/cos/tan inequallities. You don't remember anything. \u800c\u4eba\u5011\u6c92\u6709\u5c07\u4ed6\u5011\u5728\u5b78\u6821\u6240\u5b78\u5230\u7684\u77e5\u8b58\u61c9\u7528\u5728\u5be6\u969b\u751f\u6d3b\u4e2d\u3002\u4ed6\u5011\u7d66\u81ea\u5df1\u4e00\u500b\u85c9\u53e3\uff0c\u544a\u8a34\u81ea\u5df1\u548c\u5468\u570d\u7684\u4eba\uff0c\u9019\u6a23\u505a\u5b8c\u5168\u6c92\u554f\u984c\uff0c\u5373\u4f7f\u6211\u7684\u5de5\u4f5c\u8207\u6211\u6240\u5b78\u7684\u4e0d\u76f8\u95dc\u3002\u90a3\u9ebc\u4f60\u4e0a\u5b78\u5230\u5e95\u5728\u505a\u4ec0\u9ebc\uff1f\u5f9e\u5b57\u9762\u4e0a\u4f86\u770b\uff0c\u9019\u662f\u6d6a\u8cbb\u6642\u9593\u548c\u8cc7\u6e90\uff0c\u66f4\u4e0d\u7528\u8aaa\u6d6a\u8cbb\u7cbe\u529b\u4e86\u3002 \u4eba\u5011\u4e0d\u4f7f\u7528\u4ed6\u5011\u5728\u5b78\u6821\u5b78\u5230\u7684\u77e5\u8b58\uff0c\u4e26\u4e14\u7d66\u81ea\u5df1\u627e\u85c9\u53e3\u3002\u4ed6\u5011\u544a\u8a34\u81ea\u5df1\u548c\u5468\u570d\u6240\u6709\u4eba\uff1a\u6211\u7684\u5de5\u4f5c\u548c\u6211\u5b78\u5230\u7684\u5167\u5bb9\u6c92\u6709\u4efb\u4f55\u95dc\u806f\uff0c\u9019\u6a23\u5b8c\u5168\u6c92\u554f\u984c\u3002\u90a3\u9ebc\uff0c\u4f60\u5728\u5b78\u6821\u5230\u5e95\u5728\u505a\u4ec0\u9ebc\uff1f\u5f9e\u5b57\u9762\u4e0a\u770b\uff0c\u9019\u662f\u5728\u6d6a\u8cbb\u6642\u9593\u548c\u8cc7\u6e90\uff0c\u800c\u4e14\u6d6a\u8cbb\u80fd\u6e90\u3002 \u800c\u4eba\u5011\u53c8\u4e0d\u4f7f\u7528\u4ed6\u5011\u5f9e\u5b78\u6821\u5b78\u5230\u7684\u77e5\u8b58\u3002\u4ed6\u5011\u7d66\u81ea\u5df1\u4e00\u500b\u85c9\u53e3\uff0c\u544a\u8a34\u81ea\u5df1\u548c\u5468\u570d\u6240\u6709\u4eba\uff0c\u5373\u4f7f\u6211\u7684\u5de5\u4f5c\u8207\u6211\u6240\u5b78\u7121\u95dc\u4e5f\u6c92\u95dc\u4fc2\u3002\u90a3\u4f60\u5728\u5b78\u6821\u5230\u5e95\u5728\u505a\u4ec0\u9ebc\uff1f\u5f9e\u5b57\u9762\u4e0a\u4f86\u8aaa\uff0c\u9019\u5b8c\u5168\u662f\u6d6a\u8cbb\u6642\u9593\u548c\u8cc7\u6e90\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6d6a\u8cbb\u7cbe\u529b\u3002 And people are not using the knowledge they learn from school. They give themselves an excuse. They tell themselves and everyone around that it is totally fine that my job is not related to what I have been learnt. So what are you doing exactly in school seriously? Literally it is wasting time and resources, moreover, wasting energy. \u4eba\u985e\u73fe\u5728\u8a8d\u70ba\u6c92\u6709\u5be6\u969b\u7528\u9014\u7684\u6559\u80b2\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4ed6\u5011\u8aaa\u5de5\u4f5c\u548c\u5b78\u6b77\u4e0d\u5339\u914d\u4e5f\u6c92\u95dc\u4fc2\u3002\u4ed6\u5011\u8a8d\u70ba\u6559\u80b2\u4e26\u4e0d\u662f\u8981\u6709\u5be6\u7528\u50f9\u503c\u3002\u4ed6\u5011\u9084\u80fd\u62ff\u4ec0\u9ebc\u4f86\u505a\u70ba\u501f\u53e3\u5462\uff1f \u4eba\u985e\u73fe\u5728\u5df2\u7d93\u6c7a\u5b9a\u9032\u884c\u6beb\u7121\u7528\u8655\u7684\u6559\u80b2\u3002\u4ed6\u5011\u8aaa\u5de5\u4f5c\u548c\u5b78\u4f4d\u4e0d\u5339\u914d\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4ed6\u5011\u8aaa\u6559\u80b2\u4e0d\u4e00\u5b9a\u8981\u6709\u7528\u3002\u4ed6\u5011\u9084\u80fd\u7528\u4ec0\u9ebc\u85c9\u53e3\uff1f \u4eba\u985e\u73fe\u5728\u5df2\u7d93\u6c7a\u5b9a\u4e86\uff0c\u63a5\u53d7\u6c92\u6709\u7528\u7684\u6559\u80b2\u3002\u4ed6\u5011\u8aaa\u5de5\u4f5c\u548c\u5b78\u6b77\u4e0d\u642d\u914d\u4e5f\u7121\u6240\u8b02\uff0c\u4ed6\u5011\u8aaa\u6559\u80b2\u4e0d\u4e00\u5b9a\u8981\u6709\u7528\u3002\u4ed6\u5011\u9084\u80fd\u7528\u4ec0\u9ebc\u85c9\u53e3\u4f86\u81ea\u5713\u5176\u8faf\uff1f Humanity just decided that it is OK to perform useless education. They say job-degree unmatching is OK. They say education is not meant to be useful. What else can they say as an excuse? Stuff generated by ChatGPT is factually wrong. Let fix it. \u00b6 \u5927\u5b78\u7684\u6559\u6388\u5011\u6b63\u5728\u8003\u616e\u5c07\u66f4\u6b63ChatGPT\u7684\u7b54\u6848\u4f5c\u70ba\u4e00\u9805\u4f5c\u696d\u5206\u914d\u7d66\u5b78\u751f\uff0c\u4ee5\u4fbf\u5b78\u751f\u53ef\u4ee5\u5f9e\u9019\u500b\u904e\u7a0b\u4e2d\u4e3b\u52d5\u5730\u5b78\u7fd2\u3002\u4f46\u662f\u9019\u500b\u4f5c\u696d\u662f\u7d14\u7cb9\u7121\u610f\u7fa9\u7684\u3002\u539f\u56e0\u5728\u65bc\u57f9\u8a13\u4eba\u985e\u5b78\u751f\u6700\u7d42\u662f\u6beb\u7121\u610f\u7fa9\u7684\u3002\u73fe\u5728\u5047\u8a2d\u60a8\u57f9\u8a13\u4e86\u4e00\u540d\u80fd\u5920\u66f4\u6b63ChatGPT\u932f\u8aa4\u7684\u6b77\u53f2\u5b78\u751f\uff0c\u4f46\u63a5\u4e0b\u4f86\u5462\uff1f\u6c92\u6709\u4e0b\u4e00\u6b65\u3002\u90a3\u500b\u5b78\u751f\u4e0d\u6703\u6210\u70ba\u4e16\u754c\u7d1a\u7684\u6b77\u53f2\u5b78\u5bb6\u6216\u662f\u6b77\u53f2\u8001\u5e2b\uff0c\u751a\u81f3\u5225\u60f3\u8457\u4ed6/\u5979\u6703\u5354\u52a9\u7de8\u8f2f\u6b77\u53f2\u7dad\u57fa\u6216\u8005\u985e\u4f3c\u7684\u4e8b\u60c5\u3002\u7562\u696d\u4e4b\u5f8c\uff0c\u9ea5\u7576\u52de\u5c31\u662f\u4ed6/\u5979\u65b0\u7684\u5bb6\u4e86\u3002\u4ed6/\u5979\u9019\u4e00\u8f29\u5b50\u90fd\u4e0d\u6703\u518d\u78b0\u6b77\u53f2\u4e86\u3002 Professers in the university is considering correcting ChatGPT's answer as an assignment to students, so that students can learn from the process and learn actively. But this assignment is purely pointless. The reason is that training human students is ultimately pointless. Say now you trained a history student that is able to correct wrong stuffs that spell out from ChatGPT. But what next? There is no next. That student is not going to be a world-class historian or become a history teacher, don't even think that student will help edit historical wiki or something. After graduation, McDonald is his/her new home. He/She is not going to touch history for the whole life. \u90a3\u4e48\u4f7f\u7528ChatGPT\u6765\u8bad\u7ec3\u5b66\u751f\u7684\u9519\u8bef\u7ea0\u6b63\u6280\u80fd\u6709\u4f55\u610f\u4e49\u5462\uff1f\u6beb\u65e0\u610f\u4e49\u3002\u4f60\u82b1\u8d39\u4e86\u56db\u5e74\u7684\u65f6\u95f4\u3001\u6210\u5343\u4e0a\u4e07\u4e2a\u5b66\u751f\u7684\u751f\u547d\u548c\u6570\u5341\u4ebf\u7684\u6559\u5b66\u8d39\u7528\uff0c\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e9b\u6beb\u65e0\u610f\u4e49\u7684\u4e8b\u60c5\uff1f\u8fd9\u662f\u4f60\u5bf9ChatGPT\u7684\u6700\u4f73\u56de\u5e94\u5417\uff1f \u90a3\u4e48\u4f7f\u7528 ChatGPT \u57f9\u8bad\u5b66\u751f\u7684\u9519\u8bef\u66f4\u6b63\u6280\u80fd\u6709\u4ec0\u4e48\u610f\u4e49\u5462\uff1f\u6beb\u65e0\u610f\u4e49\u3002\u4f60\u82b1\u8d39\u4e86\u56db\u5e74\u7684\u65f6\u95f4\u3001\u6570\u5343\u4e2a\u5b66\u751f\u7684\u751f\u547d\u548c\u6570\u5341\u4ebf\u7684\u6559\u7a0b\u8d39\u7528\uff0c\u505a\u4e86\u4e00\u4e9b\u5b8c\u5168\u6ca1\u6709\u4efb\u4f55\u6548\u679c\u7684\u4e8b\u60c5\uff0c\u8fd9\u662f\u4f60\u5bf9 ChatGPT \u7684\u6700\u597d\u56de\u5e94\u5417\uff1f So what is the point of using ChatGPT to train student's error correction skill. Pointless. You put 4 years of time and thousands of studentss life and billions of tutorial fee to what? Doing stuff that has literally no effect whatsoever and that is your best respond to ChatGPT? Embrace non-volatility \u00b6 \u4eba\u5011\u61c9\u8a72\u628a\u6642\u9593\u548c\u7cbe\u529b\u96c6\u4e2d\u5728\u7a69\u5b9a\u7684\u77e5\u8b58\u548c\u7d93\u9a57\u4e0a\uff0c\u800c\u4e0d\u662f\u6d6a\u8cbb\u5728\u4e0d\u7a69\u5b9a\u7684\u6771\u897f\u4e0a\u3002\u78ba\u4fdd\u4f60\u4ed8\u51fa\u4e86\uff0c\u5c31\u5f97\u5230\u4e86\u56de\u5831\u3002 \u4e0d\u8981\u6d6a\u8cbb\u6642\u9593\u548c\u7cbe\u529b\u5728\u4e0d\u7a69\u5b9a\u7684\u4e8b\u7269\u4e0a\uff0c\u4eba\u985e\u61c9\u8a72\u5c08\u6ce8\u65bc\u7a69\u5b9a\u5730\u7a4d\u7d2f\u77e5\u8b58\u548c\u7d93\u9a57\u3002\u78ba\u4fdd\u4f60\u4ed8\u51fa\u4e86\u5c31\u80fd\u5f97\u5230\u56de\u5831\u3002 \u8a13\u7df4\u4eba\u985e\u5b78\u751f\u88ab\u8b49\u660e\u662f\u6700\u7cdf\u7cd5\u7684\u6c7a\u5b9a\u3002 \u57f9\u990a\u4eba\u985e\u5b78\u751f\u88ab\u8b49\u660e\u662f\u6700\u7cdf\u7cd5\u7684\u6c7a\u5b9a\u3002 \u76ee\u524d\u6211\u5011\u77e5\u9053ChatGPT\u662f\u901a\u904e\u76f8\u5c0d\u8f03\u5c0f\u7684\u6578\u64da\u96c6\u9032\u884c\u5fae\u8abf\u7684\u3002\u5982\u679c\u6211\u8a18\u5f97\u6b63\u78ba\uff0c\u53ea\u67092\uff05\u7684\u6578\u64da\u96c6\u662f\u7531\u4eba\u985e\u751f\u6210\u7684\uff0c\u5176\u4ed6\u6578\u64da\u90fd\u662f\u4f7f\u7528\u53e6\u4e00\u7a2eAI\u81ea\u52d5\u5b8c\u6210\u7684\u3002 \u73fe\u5728\u6211\u5011\u77e5\u9053\uff0cChatGPT\u662f\u7531\u76f8\u5c0d\u8f03\u5c0f\u7684\u6578\u64da\u96c6\u5fae\u8abf\u800c\u6210\u7684\u3002\u5982\u679c\u6211\u6c92\u6709\u8a18\u932f\u7684\u8a71\uff0c\u53ea\u67092\uff05\u7684\u5fae\u8abf\u6578\u64da\u96c6\u662f\u7531\u4eba\u985e\u751f\u6210\u7684\uff0c\u5176\u9918\u7684\u662f\u4f7f\u7528\u53e6\u4e00\u500b\u4eba\u5de5\u667a\u80fd\u81ea\u52d5\u5b8c\u6210\u7684\u3002 Instead of wasting time and energy on volatile stuff, human should focus on accumulate knowledge and experience non-volatilely. Make sure you pay and you got something in return. Training human student is proved to be the worst decision. And currently we know that ChatGPT is finetuned by a relatively smaller dataset. If I remember correctly, only 2% of the dataset used in finetuning is generated by human, others are done automatically using another AI. \u56e0\u6b64\uff0c\u4eba\u985e\u4e0d\u61c9\u8a72\u8a13\u7df4\u5b78\u751f\u70ba\u4e86\u7a7a\u7121/\u865b\u7121\u800c\u5b78\u7fd2\uff0c\u800c\u662f\u61c9\u8a72\u8003\u616e\u5230\u672c\u79d1\u5b78\u751f\u552f\u4e00\u7684\u4efb\u52d9\u61c9\u8a72\u662f\u5e6b\u52a9\u5275\u5efa\u4e8b\u5be6\u4e0a\u6b63\u78ba\u7684\u6578\u64da\u96c6\uff0c\u4ee5\u4fbf\u8a13\u7df4\u4e0b\u4e00\u4ee3\u7684ChatGPT\u3002\u5728\u6b64\u904e\u7a0b\u4e2d\uff0c\u5b78\u751f\u53ef\u4ee5\u81ea\u52d5\u5b78\u7fd2\u4e8b\u5be6\uff0c\u4e26\u7372\u5f97\u5beb\u4f5c\u6280\u80fd\uff0c\u6279\u5224\u6027\u601d\u8003\u7b49\u7b49\uff0c\u7372\u76ca\u532a\u6dfa\uff0c\u4f46\u9019\u6b21\u5be6\u969b\u4e0a\u7d2f\u7a4d\u4e86\u4e00\u4e9b\u6771\u897f\u3002 \u56e0\u6b64\uff0c\u4eba\u985e\u4e0d\u61c9\u8a72\u8a13\u7df4\u5b78\u751f\u53bb\u8ffd\u6c42\u7a7a\u865b\u3001\u865b\u7121\u6216\u6c92\u6709\u56de\u5831\u7684\u5883\u754c\uff0c\u800c\u662f\u61c9\u8a72\u8003\u616e\u5c07\u672c\u79d1\u5b78\u751f\u552f\u4e00\u7684\u4efb\u52d9\u8a2d\u5b9a\u70ba\u5e6b\u52a9\u5275\u5efa\u4e8b\u5be6\u6e96\u78ba\u7684\u6578\u64da\u96c6\uff0c\u4ee5\u57f9\u990a\u4e0b\u4e00\u4ee3ChatGPT\u3002\u5728\u9019\u500b\u904e\u7a0b\u4e2d\uff0c\u5b78\u751f\u53ef\u4ee5\u81ea\u52d5\u5b78\u7fd2\u4e8b\u5be6\uff0c\u540c\u6642\u7372\u5f97\u5beb\u4f5c\u6280\u5de7\u3001\u6279\u5224\u6027\u601d\u8003\u7b49\u7b49\u7684\u597d\u8655\uff0c\u4f46\u9019\u4e00\u6b21\u5be6\u969b\u4e0a\u6709\u4e00\u4e9b\u7a4d\u7d2f\u7684\u6771\u897f\u3002 \u5982\u679c\u4f60\u5728\u5927\u5b78\u5de5\u4f5c\uff0c\u4e26\u4e14\u8a8d\u70baChatGPT\u53ea\u80fd\u8aaa\u51fa\u80e1\u8a00\u4e82\u8a9e\uff0c\u90a3\u9ebc\u5c31\u505c\u6b62\u8aaa\u80e1\u8a71\uff0c\u73fe\u5728\u5c31\u4fee\u6b63\u5b83\u3002 \u5982\u679c\u4f60\u5728\u5927\u5b78\u5de5\u4f5c\uff0c\u4e26\u4e14\u8a8d\u70baChatGPT\u53ea\u6703\u80e1\u8aaa\u516b\u9053\uff0c\u90a3\u5c31\u5225\u518d\u8aaa\u5ee2\u8a71\u4e86\uff0c\u73fe\u5728\u5c31\u4f86\u89e3\u6c7a\u5b83\u3002 So instead of training human student for emptiness/void/nothing in return, human should consider that the only assignment for undergraduate student should be help creating factually correct dataset to train the next generation ChatGPT. In the process, student can automatically learn the fact, also obtain writing skill, critial thinking, etc, everything benifit as usually, but this time there is something actually being accumulated. If you work in a university and think that ChatGPT can only spell out bullshit, than stop talking bullshit and fix it now. But human is just too stupid to do anything to accumulate knowledge \u00b6 \u5728 ChatGPT \u8a95\u751f\u4e4b\u524d\uff0c\u9019\u7a2e\u73fe\u8c61\u5c31\u5df2\u7d93\u5b58\u5728\u4e86\u5f88\u4e45\u3002\u9019\u5c31\u662f\u4f60\u6c38\u9060\u627e\u4e0d\u5230\u4e00\u672c\u5305\u542b\u4f60\u6240\u9700\u8981\u7684\u4e00\u5207\u7684\u6578\u5b78\u6559\u79d1\u66f8\u3002\u4e00\u5207\u90fd\u5206\u6563\u5728\u4e0d\u540c\u4f5c\u8005\u64b0\u5beb\u7684\u6d77\u6d0b\u4e2d\uff0c\u4f60\u9700\u8981\u82b1\u8cbb\u5f88\u591a\u7684\u6642\u9593\u53bb\u6536\u96c6\u6240\u6709\u7684\u62fc\u5716\u3002\u4f46\u70ba\u4ec0\u9ebc\u5462\uff1f\u4eba\u985e\u70ba\u4ec0\u9ebc\u4e0d\u80fd\u5beb\u4e00\u672c\u767e\u79d1\u5168\u66f8\uff0c\u5305\u542b\u4e00\u5207\uff0c\u4ee5\u7bc0\u7701\u90a3\u8a72\u6b7b\u7684\u641c\u5c0b\u6642\u9593\uff01 \u5728 ChatGPT \u8a95\u751f\u5f88\u4e45\u4ee5\u524d\uff0c\u9019\u500b\u73fe\u8c61\u5df2\u7d93\u5b58\u5728\u4e86\u3002\u9019\u5c31\u662f\u4f60\u6c38\u9060\u627e\u4e0d\u5230\u4e00\u672c\u5305\u542b\u4f60\u6240\u9700\u6240\u6709\u5167\u5bb9\u7684\u6578\u5b78\u6559\u79d1\u66f8\u3002\u6240\u6709\u6771\u897f\u90fd\u6563\u843d\u5728\u4e0d\u540c\u4f5c\u8005\u6240\u5beb\u7684\u6559\u79d1\u66f8\u7684\u6d77\u6d0b\u4e2d\uff0c\u4f60\u9700\u8981\u82b1\u8cbb\u7121\u7528\u7684\u6642\u9593\u4f86\u6536\u96c6\u6240\u6709\u7684\u62fc\u5716\u3002\u4f46\u662f\u70ba\u4ec0\u9ebc\u5462\uff1f\u6c92\u6709\u7406\u7531\u4eba\u985e\u4e0d\u80fd\u5beb\u4e00\u672c\u767e\u79d1\u5168\u66f8\uff0c\u5305\u542b\u6240\u6709\u5167\u5bb9\u4ee5\u7bc0\u7701\u9019\u7cdf\u7cd5\u7684\u641c\u7d22\u6642\u9593\uff01 Same phenomenon is already there long before the birth of ChatGPT. That is you can never find the one math textbook that contains everythin that you need. Everything is scattered in the sea of different textbook written by different author, you need to spend worthless amount of time to gether all the puzzle pieces. But why? There is no reason that human cannot just write one encyclopedic that conatin everything to save the fucking searching time! But the reality is yes, human is fucking disable to think as what \"human\" should be thinking. They just fucking scatter every knowledge in the every conner in the universe to prevent everyone from knowing too much. Same thing happens in every programming language. There is no official tutorial at all. Everything about the usage or bug-fixing or something else is completely in the realm of folklore. I don't even know where to start if I am a beginner.","title":"Human is too stupid to realize that they should train next generation ChatGPT instead of training student to defense\u00a0AI - ZH-HK"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI-zhhk/#human-is-too-stupid-to-realize-that-they-should-train-next-generation-chatgpt-instead-of-training-student-to-defense-ai-zh-hk","text":"\u5728\u904e\u53bb\u5e7e\u500b\u6708ChatGPT\u5927\u986f\u795e\u5a01\uff0c\u96d6\u672a\u70ba\u5b8c\u7f8e\uff0c\u4f46\u8db3\u4ee5\u4ee4\u4eba\u4fe1\u670d\u5176\u667a\u6167\u548c\u80fd\u529b\u8d85\u8d8a\u4e86\u4e00\u822c\u4eba\u985e\u5927\u773e\u3002\u800c\u4e14\u91cd\u9ede\u662f\uff0c\u4eba\u985e\u7684\u8a18\u61b6\u6975\u6613\u9ad8\u63ee\u767c\u6027\uff0c\u800c\u5176\u8a18\u61b6\u537b\u4e0d\u6703\u8f15\u6613\u88ab\u63ee\u767c\u3002","title":"Human is too stupid to realize that they should train next generation ChatGPT instead of training student to defense\u00a0AI - ZH-HK"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI-zhhk/#chatgpt","text":"\u5b78\u9662\u7684\u8001\u5e2b\u3001\u5927\u5b78\u7684\u6559\u6388\uff0c\u5728\u9762\u5c0dChatGPT\u5e36\u4f86\u524d\u6240\u672a\u6709\u7684\u5a01\u8105\u6642\uff0c\u4ed6\u5011\u601d\u8003\u5982\u4f55\u4ee5\u65b0\u6642\u4ee3\u65b0\u6559\u80b2\u601d\u60f3\u4f86\u61c9\u5c0d\uff0c\u5f9e\u4ee5\u907f\u514d\u61f6\u60f0\u7684\u5b78\u751f\u85c9ChatGPT\u4f5c\u5f0a\u4ea4\u529f\u6548\u3002\u6709\u4e9b\u4eba\u53c8\u8a8d\u70ba\u61c9\u8a72\u958b\u653e\u5b78\u751f\u4f7f\u7528ChatGPT\uff0c\u4e0d\u904e\u537b\u662f\u8981\u5b78\u751f\u6539\u6b63ChatGPT\u7684\u4f5c\u6587\u4f5c\u70ba\u529f\u8ab2\u3002 \u9019\u807d\u8d77\u4f86\u4e0d\u932f\uff0c\u6559\u80b2\u5bb6\u7684\u53cd\u61c9\u5c1a\u5feb\uff0c\u800c\u4e14\u770b\u4f86\u6216\u8005\u6709\u6548\u9632\u6b62\u5b78\u751f\u6feb\u7528ChatGPT\u3001\u5f9e\u4ee5\u6291\u5236ChatGPT\u5165\u4fb5\u9ad8\u7b49\u6559\u80b2\u3002\u4f46\u5982\u679c\u4f60\u672a\u5920\u8070\u660e\u4f86\u770b\u900f\u9019\u4e00\u5207\u7684\u8a71\uff0c\u4f60\u4ecd\u7136\u6703\u6df1\u4fe1\u4f60\u9019\u6b21\u505a\u4e86\u6b63\u78ba\u7684\u6c7a\u5b9a\u4f86\u56de\u61c9ChatGPT\u3002 \u5728\u9019\u6211\u63d0\u51fa\u4e00\u500b\u554f\u984c\u3002 \u6191\u4f55\u4f60\u8a8d\u70ba\u6559\u80b2\u4eba\u985e\u662f\u6b63\u78ba\u7684\u9078\u9805\uff1f","title":"ChatGPT\u4e38\u53ef\u6015\u4e86\uff0c\u6211\u5011\u5fc5\u9808\u4ee4\u5b78\u751f\u66f4\u52a0\u9192\u76ee"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI-zhhk/#_1","text":"\u4eba\u985e\u7684\u8a18\u61b6\u548c\u7d93\u9a57\u503c\u90fd\u662f\u63ee\u767c\u6027\u7684\u6771\u897f\u3002\u8aaa\u4f60\u73fe\u572850\u6b72\uff0c\u9084\u5269\u4e0b\u5e7e\u591a\u6a5f\u7387\u4f60\u6703\u8a18\u5f97\u8d77\u81ea\u5df1\u7576\u5e74\u5728\u5927\u5b78\u5beb\u7684\u8ad6\u6587\u7684\u4e00\u53e5\u4e00\u5b57\uff1f\u591a\u4e4e\u54c9\uff1f\u4e0d\u591a\u4e5f\u3002\u5373\u4f7f\u4f60\u53ea\u662f\u7562\u696d\u4e86\u5e7e\u5e74\uff0c\u73fe\u5728\u653b\u8b80\u7814\u7a76\u9662\uff0c\u4f60\u4e5f\u662f\u4f9d\u7a00\u8a18\u8d773\u5e74\u524d\u5beb\u904e\u7684\u6587\u7ae0\u3002\u4eba\u985e\u4e0d\u80fd\u5920\u8a18\u4f4f\u6240\u6709\u6771\u897f\u3002 \u4eba\u985e\u4ea6\u7121\u80fd\u529b\u50b3\u627f\u6240\u6709\u7684\u77e5\u8b58\u548c\u7d93\u9a57\u53bb\u4e0b\u4e00\u4ee3\u3002\u4f8b\u5982\u8aaa\u505a\u4eba\u7236\u6bcd\u3002\u4eba\u985e\u9019\u500b\u7269\u7a2e\u5728\u5730\u4e0a\u884c\u8d70\u4e86\u81f3\u5c11\u5e7e\u5341\u842c\u5e74\uff0c\u4f46\u4e00\u4ee3\u53c8\u4e00\u4ee3\uff0c\u6bcf\u4e00\u4ee3\u4eba\u90fd\u8981\u91cd\u65b0\u7814\u767c\u4f55\u70ba\u300c\u505a\u4eba\u7236\u6bcd\u300d\uff0c\u77e5\u8b58\u548c\u7d93\u9a57\u7684\u50b3\u627f\u6a5f\u5236\u5728\u6b64\u4e8b\u4e0a\u5fb9\u5e95\u5931\u6557\u3002\u6bcf\u500b\u4eba\u73fe\u5728\u4ecd\u7136\u8981\u9762\u5c0d\u5931\u6557\u7684\u7236\u6bcd\uff0c\u5230\u4ed6\u5011\u9577\u5927\uff0c\u4ed6\u5011\u4e5f\u6210\u70ba\u5931\u6557\u7684\u7236\u6bcd\u3002","title":"\u6191\u4f55\u4f60\u8a8d\u70ba\u9019\u500b\u5b87\u5b99\u6703\u5f9e\u4eba\u985e\u7684\u9ad8\u63ee\u767c\u6027\u8a18\u61b6\u4e2d\u5f97\u76ca\uff1f"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI-zhhk/#_2","text":"\u4eba\u985e\u6703\u907a\u5fd8\u4e8b\u60c5\u4e26\u4e14\u7121\u6cd5\u5b8c\u5168\u5730\u5c07\u77e5\u8b58\u50b3\u627f\u7d66\u4e0b\u4e00\u4ee3\uff0c\u9019\u662f\u4e00\u500b\u5927\u554f\u984c\u3002\u67d0\u4e9b\u4eba\u53ef\u80fd\u6703\u9019\u6a23\u60f3\uff0c\u4f46\u73fe\u5728\u6211\u5011\u5df2\u7d93\u64c1\u6709\u6559\u80b2\u7cfb\u7d71\u4e86\u3002 It is a big problem that you think it is ok for human to forgot things and totally fine to fail to passing knowledge to the next generation. Some may think that But we currently have an education system. \u597d\u5427\uff0c\u6211\u5011\u4e0d\u80fd\u4f9d\u8cf4\u6559\u80b2\u9ad4\u7cfb\u3002\u5b78\u751f\u5728\u96e2\u958b\u5b78\u6821\u5e7e\u5e74\u5f8c\u5c31\u6703\u5fd8\u8a18\u4ed6\u5011\u6240\u5b78\u7684\u4e00\u5207\u3002\u8a66\u554f\u4f60\u81ea\u5df1\uff0c\u4f60\u9084\u8a18\u5f97\u90a3\u4e9b\u6b63\u5f26/\u4f59\u5f26/\u6b63\u5207\u4e0d\u7b49\u5f0f\u55ce\uff1f\u4f60\u4ec0\u9ebc\u90fd\u4e0d\u8a18\u5f97\u4e86\u3002 Well, we cannot account on broken education system. Student forget everything they learnt in just after a few years after they left the school. Just ask yourself do you still remember those sin/cos/tan inequallities. You don't remember anything. \u800c\u4eba\u5011\u6c92\u6709\u5c07\u4ed6\u5011\u5728\u5b78\u6821\u6240\u5b78\u5230\u7684\u77e5\u8b58\u61c9\u7528\u5728\u5be6\u969b\u751f\u6d3b\u4e2d\u3002\u4ed6\u5011\u7d66\u81ea\u5df1\u4e00\u500b\u85c9\u53e3\uff0c\u544a\u8a34\u81ea\u5df1\u548c\u5468\u570d\u7684\u4eba\uff0c\u9019\u6a23\u505a\u5b8c\u5168\u6c92\u554f\u984c\uff0c\u5373\u4f7f\u6211\u7684\u5de5\u4f5c\u8207\u6211\u6240\u5b78\u7684\u4e0d\u76f8\u95dc\u3002\u90a3\u9ebc\u4f60\u4e0a\u5b78\u5230\u5e95\u5728\u505a\u4ec0\u9ebc\uff1f\u5f9e\u5b57\u9762\u4e0a\u4f86\u770b\uff0c\u9019\u662f\u6d6a\u8cbb\u6642\u9593\u548c\u8cc7\u6e90\uff0c\u66f4\u4e0d\u7528\u8aaa\u6d6a\u8cbb\u7cbe\u529b\u4e86\u3002 \u4eba\u5011\u4e0d\u4f7f\u7528\u4ed6\u5011\u5728\u5b78\u6821\u5b78\u5230\u7684\u77e5\u8b58\uff0c\u4e26\u4e14\u7d66\u81ea\u5df1\u627e\u85c9\u53e3\u3002\u4ed6\u5011\u544a\u8a34\u81ea\u5df1\u548c\u5468\u570d\u6240\u6709\u4eba\uff1a\u6211\u7684\u5de5\u4f5c\u548c\u6211\u5b78\u5230\u7684\u5167\u5bb9\u6c92\u6709\u4efb\u4f55\u95dc\u806f\uff0c\u9019\u6a23\u5b8c\u5168\u6c92\u554f\u984c\u3002\u90a3\u9ebc\uff0c\u4f60\u5728\u5b78\u6821\u5230\u5e95\u5728\u505a\u4ec0\u9ebc\uff1f\u5f9e\u5b57\u9762\u4e0a\u770b\uff0c\u9019\u662f\u5728\u6d6a\u8cbb\u6642\u9593\u548c\u8cc7\u6e90\uff0c\u800c\u4e14\u6d6a\u8cbb\u80fd\u6e90\u3002 \u800c\u4eba\u5011\u53c8\u4e0d\u4f7f\u7528\u4ed6\u5011\u5f9e\u5b78\u6821\u5b78\u5230\u7684\u77e5\u8b58\u3002\u4ed6\u5011\u7d66\u81ea\u5df1\u4e00\u500b\u85c9\u53e3\uff0c\u544a\u8a34\u81ea\u5df1\u548c\u5468\u570d\u6240\u6709\u4eba\uff0c\u5373\u4f7f\u6211\u7684\u5de5\u4f5c\u8207\u6211\u6240\u5b78\u7121\u95dc\u4e5f\u6c92\u95dc\u4fc2\u3002\u90a3\u4f60\u5728\u5b78\u6821\u5230\u5e95\u5728\u505a\u4ec0\u9ebc\uff1f\u5f9e\u5b57\u9762\u4e0a\u4f86\u8aaa\uff0c\u9019\u5b8c\u5168\u662f\u6d6a\u8cbb\u6642\u9593\u548c\u8cc7\u6e90\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6d6a\u8cbb\u7cbe\u529b\u3002 And people are not using the knowledge they learn from school. They give themselves an excuse. They tell themselves and everyone around that it is totally fine that my job is not related to what I have been learnt. So what are you doing exactly in school seriously? Literally it is wasting time and resources, moreover, wasting energy. \u4eba\u985e\u73fe\u5728\u8a8d\u70ba\u6c92\u6709\u5be6\u969b\u7528\u9014\u7684\u6559\u80b2\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4ed6\u5011\u8aaa\u5de5\u4f5c\u548c\u5b78\u6b77\u4e0d\u5339\u914d\u4e5f\u6c92\u95dc\u4fc2\u3002\u4ed6\u5011\u8a8d\u70ba\u6559\u80b2\u4e26\u4e0d\u662f\u8981\u6709\u5be6\u7528\u50f9\u503c\u3002\u4ed6\u5011\u9084\u80fd\u62ff\u4ec0\u9ebc\u4f86\u505a\u70ba\u501f\u53e3\u5462\uff1f \u4eba\u985e\u73fe\u5728\u5df2\u7d93\u6c7a\u5b9a\u9032\u884c\u6beb\u7121\u7528\u8655\u7684\u6559\u80b2\u3002\u4ed6\u5011\u8aaa\u5de5\u4f5c\u548c\u5b78\u4f4d\u4e0d\u5339\u914d\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4ed6\u5011\u8aaa\u6559\u80b2\u4e0d\u4e00\u5b9a\u8981\u6709\u7528\u3002\u4ed6\u5011\u9084\u80fd\u7528\u4ec0\u9ebc\u85c9\u53e3\uff1f \u4eba\u985e\u73fe\u5728\u5df2\u7d93\u6c7a\u5b9a\u4e86\uff0c\u63a5\u53d7\u6c92\u6709\u7528\u7684\u6559\u80b2\u3002\u4ed6\u5011\u8aaa\u5de5\u4f5c\u548c\u5b78\u6b77\u4e0d\u642d\u914d\u4e5f\u7121\u6240\u8b02\uff0c\u4ed6\u5011\u8aaa\u6559\u80b2\u4e0d\u4e00\u5b9a\u8981\u6709\u7528\u3002\u4ed6\u5011\u9084\u80fd\u7528\u4ec0\u9ebc\u85c9\u53e3\u4f86\u81ea\u5713\u5176\u8faf\uff1f Humanity just decided that it is OK to perform useless education. They say job-degree unmatching is OK. They say education is not meant to be useful. What else can they say as an excuse?","title":"\u96e3\u9053\u6c92\u6709\u4eba\u89ba\u5f97\u6211\u5011\u61c9\u8a72\u4fdd\u5b58\u77e5\u8b58\u548c\u7d93\u9a57\u55ce\uff1f"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI-zhhk/#stuff-generated-by-chatgpt-is-factually-wrong-let-fix-it","text":"\u5927\u5b78\u7684\u6559\u6388\u5011\u6b63\u5728\u8003\u616e\u5c07\u66f4\u6b63ChatGPT\u7684\u7b54\u6848\u4f5c\u70ba\u4e00\u9805\u4f5c\u696d\u5206\u914d\u7d66\u5b78\u751f\uff0c\u4ee5\u4fbf\u5b78\u751f\u53ef\u4ee5\u5f9e\u9019\u500b\u904e\u7a0b\u4e2d\u4e3b\u52d5\u5730\u5b78\u7fd2\u3002\u4f46\u662f\u9019\u500b\u4f5c\u696d\u662f\u7d14\u7cb9\u7121\u610f\u7fa9\u7684\u3002\u539f\u56e0\u5728\u65bc\u57f9\u8a13\u4eba\u985e\u5b78\u751f\u6700\u7d42\u662f\u6beb\u7121\u610f\u7fa9\u7684\u3002\u73fe\u5728\u5047\u8a2d\u60a8\u57f9\u8a13\u4e86\u4e00\u540d\u80fd\u5920\u66f4\u6b63ChatGPT\u932f\u8aa4\u7684\u6b77\u53f2\u5b78\u751f\uff0c\u4f46\u63a5\u4e0b\u4f86\u5462\uff1f\u6c92\u6709\u4e0b\u4e00\u6b65\u3002\u90a3\u500b\u5b78\u751f\u4e0d\u6703\u6210\u70ba\u4e16\u754c\u7d1a\u7684\u6b77\u53f2\u5b78\u5bb6\u6216\u662f\u6b77\u53f2\u8001\u5e2b\uff0c\u751a\u81f3\u5225\u60f3\u8457\u4ed6/\u5979\u6703\u5354\u52a9\u7de8\u8f2f\u6b77\u53f2\u7dad\u57fa\u6216\u8005\u985e\u4f3c\u7684\u4e8b\u60c5\u3002\u7562\u696d\u4e4b\u5f8c\uff0c\u9ea5\u7576\u52de\u5c31\u662f\u4ed6/\u5979\u65b0\u7684\u5bb6\u4e86\u3002\u4ed6/\u5979\u9019\u4e00\u8f29\u5b50\u90fd\u4e0d\u6703\u518d\u78b0\u6b77\u53f2\u4e86\u3002 Professers in the university is considering correcting ChatGPT's answer as an assignment to students, so that students can learn from the process and learn actively. But this assignment is purely pointless. The reason is that training human students is ultimately pointless. Say now you trained a history student that is able to correct wrong stuffs that spell out from ChatGPT. But what next? There is no next. That student is not going to be a world-class historian or become a history teacher, don't even think that student will help edit historical wiki or something. After graduation, McDonald is his/her new home. He/She is not going to touch history for the whole life. \u90a3\u4e48\u4f7f\u7528ChatGPT\u6765\u8bad\u7ec3\u5b66\u751f\u7684\u9519\u8bef\u7ea0\u6b63\u6280\u80fd\u6709\u4f55\u610f\u4e49\u5462\uff1f\u6beb\u65e0\u610f\u4e49\u3002\u4f60\u82b1\u8d39\u4e86\u56db\u5e74\u7684\u65f6\u95f4\u3001\u6210\u5343\u4e0a\u4e07\u4e2a\u5b66\u751f\u7684\u751f\u547d\u548c\u6570\u5341\u4ebf\u7684\u6559\u5b66\u8d39\u7528\uff0c\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e9b\u6beb\u65e0\u610f\u4e49\u7684\u4e8b\u60c5\uff1f\u8fd9\u662f\u4f60\u5bf9ChatGPT\u7684\u6700\u4f73\u56de\u5e94\u5417\uff1f \u90a3\u4e48\u4f7f\u7528 ChatGPT \u57f9\u8bad\u5b66\u751f\u7684\u9519\u8bef\u66f4\u6b63\u6280\u80fd\u6709\u4ec0\u4e48\u610f\u4e49\u5462\uff1f\u6beb\u65e0\u610f\u4e49\u3002\u4f60\u82b1\u8d39\u4e86\u56db\u5e74\u7684\u65f6\u95f4\u3001\u6570\u5343\u4e2a\u5b66\u751f\u7684\u751f\u547d\u548c\u6570\u5341\u4ebf\u7684\u6559\u7a0b\u8d39\u7528\uff0c\u505a\u4e86\u4e00\u4e9b\u5b8c\u5168\u6ca1\u6709\u4efb\u4f55\u6548\u679c\u7684\u4e8b\u60c5\uff0c\u8fd9\u662f\u4f60\u5bf9 ChatGPT \u7684\u6700\u597d\u56de\u5e94\u5417\uff1f So what is the point of using ChatGPT to train student's error correction skill. Pointless. You put 4 years of time and thousands of studentss life and billions of tutorial fee to what? Doing stuff that has literally no effect whatsoever and that is your best respond to ChatGPT?","title":"Stuff generated by ChatGPT is factually wrong. Let fix it."},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI-zhhk/#embrace-non-volatility","text":"\u4eba\u5011\u61c9\u8a72\u628a\u6642\u9593\u548c\u7cbe\u529b\u96c6\u4e2d\u5728\u7a69\u5b9a\u7684\u77e5\u8b58\u548c\u7d93\u9a57\u4e0a\uff0c\u800c\u4e0d\u662f\u6d6a\u8cbb\u5728\u4e0d\u7a69\u5b9a\u7684\u6771\u897f\u4e0a\u3002\u78ba\u4fdd\u4f60\u4ed8\u51fa\u4e86\uff0c\u5c31\u5f97\u5230\u4e86\u56de\u5831\u3002 \u4e0d\u8981\u6d6a\u8cbb\u6642\u9593\u548c\u7cbe\u529b\u5728\u4e0d\u7a69\u5b9a\u7684\u4e8b\u7269\u4e0a\uff0c\u4eba\u985e\u61c9\u8a72\u5c08\u6ce8\u65bc\u7a69\u5b9a\u5730\u7a4d\u7d2f\u77e5\u8b58\u548c\u7d93\u9a57\u3002\u78ba\u4fdd\u4f60\u4ed8\u51fa\u4e86\u5c31\u80fd\u5f97\u5230\u56de\u5831\u3002 \u8a13\u7df4\u4eba\u985e\u5b78\u751f\u88ab\u8b49\u660e\u662f\u6700\u7cdf\u7cd5\u7684\u6c7a\u5b9a\u3002 \u57f9\u990a\u4eba\u985e\u5b78\u751f\u88ab\u8b49\u660e\u662f\u6700\u7cdf\u7cd5\u7684\u6c7a\u5b9a\u3002 \u76ee\u524d\u6211\u5011\u77e5\u9053ChatGPT\u662f\u901a\u904e\u76f8\u5c0d\u8f03\u5c0f\u7684\u6578\u64da\u96c6\u9032\u884c\u5fae\u8abf\u7684\u3002\u5982\u679c\u6211\u8a18\u5f97\u6b63\u78ba\uff0c\u53ea\u67092\uff05\u7684\u6578\u64da\u96c6\u662f\u7531\u4eba\u985e\u751f\u6210\u7684\uff0c\u5176\u4ed6\u6578\u64da\u90fd\u662f\u4f7f\u7528\u53e6\u4e00\u7a2eAI\u81ea\u52d5\u5b8c\u6210\u7684\u3002 \u73fe\u5728\u6211\u5011\u77e5\u9053\uff0cChatGPT\u662f\u7531\u76f8\u5c0d\u8f03\u5c0f\u7684\u6578\u64da\u96c6\u5fae\u8abf\u800c\u6210\u7684\u3002\u5982\u679c\u6211\u6c92\u6709\u8a18\u932f\u7684\u8a71\uff0c\u53ea\u67092\uff05\u7684\u5fae\u8abf\u6578\u64da\u96c6\u662f\u7531\u4eba\u985e\u751f\u6210\u7684\uff0c\u5176\u9918\u7684\u662f\u4f7f\u7528\u53e6\u4e00\u500b\u4eba\u5de5\u667a\u80fd\u81ea\u52d5\u5b8c\u6210\u7684\u3002 Instead of wasting time and energy on volatile stuff, human should focus on accumulate knowledge and experience non-volatilely. Make sure you pay and you got something in return. Training human student is proved to be the worst decision. And currently we know that ChatGPT is finetuned by a relatively smaller dataset. If I remember correctly, only 2% of the dataset used in finetuning is generated by human, others are done automatically using another AI. \u56e0\u6b64\uff0c\u4eba\u985e\u4e0d\u61c9\u8a72\u8a13\u7df4\u5b78\u751f\u70ba\u4e86\u7a7a\u7121/\u865b\u7121\u800c\u5b78\u7fd2\uff0c\u800c\u662f\u61c9\u8a72\u8003\u616e\u5230\u672c\u79d1\u5b78\u751f\u552f\u4e00\u7684\u4efb\u52d9\u61c9\u8a72\u662f\u5e6b\u52a9\u5275\u5efa\u4e8b\u5be6\u4e0a\u6b63\u78ba\u7684\u6578\u64da\u96c6\uff0c\u4ee5\u4fbf\u8a13\u7df4\u4e0b\u4e00\u4ee3\u7684ChatGPT\u3002\u5728\u6b64\u904e\u7a0b\u4e2d\uff0c\u5b78\u751f\u53ef\u4ee5\u81ea\u52d5\u5b78\u7fd2\u4e8b\u5be6\uff0c\u4e26\u7372\u5f97\u5beb\u4f5c\u6280\u80fd\uff0c\u6279\u5224\u6027\u601d\u8003\u7b49\u7b49\uff0c\u7372\u76ca\u532a\u6dfa\uff0c\u4f46\u9019\u6b21\u5be6\u969b\u4e0a\u7d2f\u7a4d\u4e86\u4e00\u4e9b\u6771\u897f\u3002 \u56e0\u6b64\uff0c\u4eba\u985e\u4e0d\u61c9\u8a72\u8a13\u7df4\u5b78\u751f\u53bb\u8ffd\u6c42\u7a7a\u865b\u3001\u865b\u7121\u6216\u6c92\u6709\u56de\u5831\u7684\u5883\u754c\uff0c\u800c\u662f\u61c9\u8a72\u8003\u616e\u5c07\u672c\u79d1\u5b78\u751f\u552f\u4e00\u7684\u4efb\u52d9\u8a2d\u5b9a\u70ba\u5e6b\u52a9\u5275\u5efa\u4e8b\u5be6\u6e96\u78ba\u7684\u6578\u64da\u96c6\uff0c\u4ee5\u57f9\u990a\u4e0b\u4e00\u4ee3ChatGPT\u3002\u5728\u9019\u500b\u904e\u7a0b\u4e2d\uff0c\u5b78\u751f\u53ef\u4ee5\u81ea\u52d5\u5b78\u7fd2\u4e8b\u5be6\uff0c\u540c\u6642\u7372\u5f97\u5beb\u4f5c\u6280\u5de7\u3001\u6279\u5224\u6027\u601d\u8003\u7b49\u7b49\u7684\u597d\u8655\uff0c\u4f46\u9019\u4e00\u6b21\u5be6\u969b\u4e0a\u6709\u4e00\u4e9b\u7a4d\u7d2f\u7684\u6771\u897f\u3002 \u5982\u679c\u4f60\u5728\u5927\u5b78\u5de5\u4f5c\uff0c\u4e26\u4e14\u8a8d\u70baChatGPT\u53ea\u80fd\u8aaa\u51fa\u80e1\u8a00\u4e82\u8a9e\uff0c\u90a3\u9ebc\u5c31\u505c\u6b62\u8aaa\u80e1\u8a71\uff0c\u73fe\u5728\u5c31\u4fee\u6b63\u5b83\u3002 \u5982\u679c\u4f60\u5728\u5927\u5b78\u5de5\u4f5c\uff0c\u4e26\u4e14\u8a8d\u70baChatGPT\u53ea\u6703\u80e1\u8aaa\u516b\u9053\uff0c\u90a3\u5c31\u5225\u518d\u8aaa\u5ee2\u8a71\u4e86\uff0c\u73fe\u5728\u5c31\u4f86\u89e3\u6c7a\u5b83\u3002 So instead of training human student for emptiness/void/nothing in return, human should consider that the only assignment for undergraduate student should be help creating factually correct dataset to train the next generation ChatGPT. In the process, student can automatically learn the fact, also obtain writing skill, critial thinking, etc, everything benifit as usually, but this time there is something actually being accumulated. If you work in a university and think that ChatGPT can only spell out bullshit, than stop talking bullshit and fix it now.","title":"Embrace non-volatility"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI-zhhk/#but-human-is-just-too-stupid-to-do-anything-to-accumulate-knowledge","text":"\u5728 ChatGPT \u8a95\u751f\u4e4b\u524d\uff0c\u9019\u7a2e\u73fe\u8c61\u5c31\u5df2\u7d93\u5b58\u5728\u4e86\u5f88\u4e45\u3002\u9019\u5c31\u662f\u4f60\u6c38\u9060\u627e\u4e0d\u5230\u4e00\u672c\u5305\u542b\u4f60\u6240\u9700\u8981\u7684\u4e00\u5207\u7684\u6578\u5b78\u6559\u79d1\u66f8\u3002\u4e00\u5207\u90fd\u5206\u6563\u5728\u4e0d\u540c\u4f5c\u8005\u64b0\u5beb\u7684\u6d77\u6d0b\u4e2d\uff0c\u4f60\u9700\u8981\u82b1\u8cbb\u5f88\u591a\u7684\u6642\u9593\u53bb\u6536\u96c6\u6240\u6709\u7684\u62fc\u5716\u3002\u4f46\u70ba\u4ec0\u9ebc\u5462\uff1f\u4eba\u985e\u70ba\u4ec0\u9ebc\u4e0d\u80fd\u5beb\u4e00\u672c\u767e\u79d1\u5168\u66f8\uff0c\u5305\u542b\u4e00\u5207\uff0c\u4ee5\u7bc0\u7701\u90a3\u8a72\u6b7b\u7684\u641c\u5c0b\u6642\u9593\uff01 \u5728 ChatGPT \u8a95\u751f\u5f88\u4e45\u4ee5\u524d\uff0c\u9019\u500b\u73fe\u8c61\u5df2\u7d93\u5b58\u5728\u4e86\u3002\u9019\u5c31\u662f\u4f60\u6c38\u9060\u627e\u4e0d\u5230\u4e00\u672c\u5305\u542b\u4f60\u6240\u9700\u6240\u6709\u5167\u5bb9\u7684\u6578\u5b78\u6559\u79d1\u66f8\u3002\u6240\u6709\u6771\u897f\u90fd\u6563\u843d\u5728\u4e0d\u540c\u4f5c\u8005\u6240\u5beb\u7684\u6559\u79d1\u66f8\u7684\u6d77\u6d0b\u4e2d\uff0c\u4f60\u9700\u8981\u82b1\u8cbb\u7121\u7528\u7684\u6642\u9593\u4f86\u6536\u96c6\u6240\u6709\u7684\u62fc\u5716\u3002\u4f46\u662f\u70ba\u4ec0\u9ebc\u5462\uff1f\u6c92\u6709\u7406\u7531\u4eba\u985e\u4e0d\u80fd\u5beb\u4e00\u672c\u767e\u79d1\u5168\u66f8\uff0c\u5305\u542b\u6240\u6709\u5167\u5bb9\u4ee5\u7bc0\u7701\u9019\u7cdf\u7cd5\u7684\u641c\u7d22\u6642\u9593\uff01 Same phenomenon is already there long before the birth of ChatGPT. That is you can never find the one math textbook that contains everythin that you need. Everything is scattered in the sea of different textbook written by different author, you need to spend worthless amount of time to gether all the puzzle pieces. But why? There is no reason that human cannot just write one encyclopedic that conatin everything to save the fucking searching time! But the reality is yes, human is fucking disable to think as what \"human\" should be thinking. They just fucking scatter every knowledge in the every conner in the universe to prevent everyone from knowing too much. Same thing happens in every programming language. There is no official tutorial at all. Everything about the usage or bug-fixing or something else is completely in the realm of folklore. I don't even know where to start if I am a beginner.","title":"But human is just too stupid to do anything to accumulate knowledge"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI/","text":"Human is too stupid to realize that they should train next generation ChatGPT instead of training student to defense AI \u00b6 ChatGPT is smart, but not perfect, still ia's (\"ai\" -> \"ia\" ~= \"it\" to invent the pronoun for ai) intellegence is objectively above average. Moreover, ia has non-volatile memory. In contrast, human memory and human experience is highly volatile. ChatGPT is scary. So we should train student to be smarter than ChatGPT. \u00b6 With the threating text generation power of ChatGPT, professors, teacher, tutor across the globe start thinking how to transform the current education system, so that they can prevent student being lazy to generate homework by ChatGPT. Also, some think that it is a good idea to let student use ChatGPT, but instead to correct the wrong thing that ChatGPT write. That seems great, responsive, and might effectively prevent the invasion of ChatGPT into higher education, if you are not smart enough to see through all these. Here I propose a question. Why do you think that it is the right choice to train human student? Why do you think the Universe will benifit from training human's volatile memory? \u00b6 Human memory and experience is volatile. Let say you are 50 years old. The chance that you still remember every word of your undergraduate thesis. Even if you are studying graduate school, you are kind of forget what you wrote 3 years ago. Human cannot remember everything. Human also unable to inherent every knowledge and experience to the next generation. Say parenting. Human species exist for more than 100,000 years. Generations after generations. Knowledge and experience of parenting yet not able to pass over the next generetion. Human species still suffer from bad parenting and grow up to be a bad parent themsleves. So no one think that we should save our knowledge and experience? \u00b6 It is a big problem that you think it is ok for human to forgot things and totally fine to fail to passing knowledge to the next generation. Some may think that But we currently have an education system. Well, we cannot account on broken education system. Student forget everything they learnt in just after a few years after they left the school. Just ask yourself do you still remember those sin/cos/tan inequallities. You don't remember anything. And people are not using the knowledge they learn from school. They give themselves an excuse. They tell themselves and everyone around that it is totally fine that my job is not related to what I have been learnt. So what are you doing exactly in school seriously? Literally it is wasting time and resources, moreover, wasting energy. Humanity just decided that it is OK to perform useless education. They say job-degree unmatching is OK. They say education is not meant to be useful. What else can they say as an excuse? Stuff generated by ChatGPT is factually wrong. Let fix it. \u00b6 Professers in the university is considering correcting ChatGPT's answer as an assignment to students, so that students can learn from the process and learn actively. But this assignment is purely pointless. The reason is that training human students is ultimately pointless. Say now you trained a history student that is able to correct wrong stuffs that spell out from ChatGPT. But what next? There is no next. That student is not going to be a world-class historian or become a history teacher, don't even think that student will help edit historical wiki or something. After graduation, McDonald is his/her new home. He/She is not going to touch history for the whole life. So what is the point of using ChatGPT to train student's error correction skill. Pointless. You put 4 years of time and thousands of studentss life and billions of tutorial fee to what? Doing stuff that has literally no effect whatsoever and that is your best respond to ChatGPT? Embrace non-volatility \u00b6 Instead of wasting time and energy on volatile stuff, human should focus on accumulate knowledge and experience non-volatilely. Make sure you pay and you got something in return. Training human student is proved to be the worst decision. And currently we know that ChatGPT is finetuned by a relatively smaller dataset. If I remember correctly, only 2% of the dataset used in finetuning is generated by human, others are done automatically using another AI. So instead of training human student for emptiness/void/nothing in return, human should consider that the only assignment for undergraduate student should be help creating factually correct dataset to train the next generation ChatGPT. In the process, student can automatically learn the fact, also obtain writing skill, critial thinking, etc, everything benifit as usually, but this time there is something actually being accumulated. If you work in a university and think that ChatGPT can only spell out bullshit, than stop talking bullshit and fix it now. But human is just too stupid to do anything to accumulate knowledge \u00b6 Same phenomenon is already there long before the birth of ChatGPT. That is you can never find the one math textbook that contains everythin that you need. Everything is scattered in the sea of different textbook written by different author, you need to spend worthless amount of time to gether all the puzzle pieces. But why? There is no reason that human cannot just write one encyclopedic that conatin everything to save the fucking searching time! But the reality is yes, human is fucking disable to think as what \"human\" should be thinking. They just fucking scatter every knowledge in the every conner in the universe to prevent everyone from knowing too much. Same thing happens in every programming language. There is no official tutorial at all. Everything about the usage or bug-fixing or something else is completely in the realm of folklore. I don't even know where to start if I am a beginner.","title":"Human is too stupid to realize that they should train next generation ChatGPT instead of training student to defense\u00a0AI"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI/#human-is-too-stupid-to-realize-that-they-should-train-next-generation-chatgpt-instead-of-training-student-to-defense-ai","text":"ChatGPT is smart, but not perfect, still ia's (\"ai\" -> \"ia\" ~= \"it\" to invent the pronoun for ai) intellegence is objectively above average. Moreover, ia has non-volatile memory. In contrast, human memory and human experience is highly volatile.","title":"Human is too stupid to realize that they should train next generation ChatGPT instead of training student to defense\u00a0AI"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI/#chatgpt-is-scary-so-we-should-train-student-to-be-smarter-than-chatgpt","text":"With the threating text generation power of ChatGPT, professors, teacher, tutor across the globe start thinking how to transform the current education system, so that they can prevent student being lazy to generate homework by ChatGPT. Also, some think that it is a good idea to let student use ChatGPT, but instead to correct the wrong thing that ChatGPT write. That seems great, responsive, and might effectively prevent the invasion of ChatGPT into higher education, if you are not smart enough to see through all these. Here I propose a question. Why do you think that it is the right choice to train human student?","title":"ChatGPT is scary. So we should train student to be smarter than ChatGPT."},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI/#why-do-you-think-the-universe-will-benifit-from-training-humans-volatile-memory","text":"Human memory and experience is volatile. Let say you are 50 years old. The chance that you still remember every word of your undergraduate thesis. Even if you are studying graduate school, you are kind of forget what you wrote 3 years ago. Human cannot remember everything. Human also unable to inherent every knowledge and experience to the next generation. Say parenting. Human species exist for more than 100,000 years. Generations after generations. Knowledge and experience of parenting yet not able to pass over the next generetion. Human species still suffer from bad parenting and grow up to be a bad parent themsleves.","title":"Why do you think the Universe will benifit from training human's volatile memory?"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI/#so-no-one-think-that-we-should-save-our-knowledge-and-experience","text":"It is a big problem that you think it is ok for human to forgot things and totally fine to fail to passing knowledge to the next generation. Some may think that But we currently have an education system. Well, we cannot account on broken education system. Student forget everything they learnt in just after a few years after they left the school. Just ask yourself do you still remember those sin/cos/tan inequallities. You don't remember anything. And people are not using the knowledge they learn from school. They give themselves an excuse. They tell themselves and everyone around that it is totally fine that my job is not related to what I have been learnt. So what are you doing exactly in school seriously? Literally it is wasting time and resources, moreover, wasting energy. Humanity just decided that it is OK to perform useless education. They say job-degree unmatching is OK. They say education is not meant to be useful. What else can they say as an excuse?","title":"So no one think that we should save our knowledge and experience?"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI/#stuff-generated-by-chatgpt-is-factually-wrong-let-fix-it","text":"Professers in the university is considering correcting ChatGPT's answer as an assignment to students, so that students can learn from the process and learn actively. But this assignment is purely pointless. The reason is that training human students is ultimately pointless. Say now you trained a history student that is able to correct wrong stuffs that spell out from ChatGPT. But what next? There is no next. That student is not going to be a world-class historian or become a history teacher, don't even think that student will help edit historical wiki or something. After graduation, McDonald is his/her new home. He/She is not going to touch history for the whole life. So what is the point of using ChatGPT to train student's error correction skill. Pointless. You put 4 years of time and thousands of studentss life and billions of tutorial fee to what? Doing stuff that has literally no effect whatsoever and that is your best respond to ChatGPT?","title":"Stuff generated by ChatGPT is factually wrong. Let fix it."},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI/#embrace-non-volatility","text":"Instead of wasting time and energy on volatile stuff, human should focus on accumulate knowledge and experience non-volatilely. Make sure you pay and you got something in return. Training human student is proved to be the worst decision. And currently we know that ChatGPT is finetuned by a relatively smaller dataset. If I remember correctly, only 2% of the dataset used in finetuning is generated by human, others are done automatically using another AI. So instead of training human student for emptiness/void/nothing in return, human should consider that the only assignment for undergraduate student should be help creating factually correct dataset to train the next generation ChatGPT. In the process, student can automatically learn the fact, also obtain writing skill, critial thinking, etc, everything benifit as usually, but this time there is something actually being accumulated. If you work in a university and think that ChatGPT can only spell out bullshit, than stop talking bullshit and fix it now.","title":"Embrace non-volatility"},{"location":"blog/Human%20is%20too%20stupid%20to%20realize%20that%20they%20should%20train%20next%20generation%20ChatGPT%20instead%20of%20training%20student%20to%20defense%C2%A0AI/#but-human-is-just-too-stupid-to-do-anything-to-accumulate-knowledge","text":"Same phenomenon is already there long before the birth of ChatGPT. That is you can never find the one math textbook that contains everythin that you need. Everything is scattered in the sea of different textbook written by different author, you need to spend worthless amount of time to gether all the puzzle pieces. But why? There is no reason that human cannot just write one encyclopedic that conatin everything to save the fucking searching time! But the reality is yes, human is fucking disable to think as what \"human\" should be thinking. They just fucking scatter every knowledge in the every conner in the universe to prevent everyone from knowing too much. Same thing happens in every programming language. There is no official tutorial at all. Everything about the usage or bug-fixing or something else is completely in the realm of folklore. I don't even know where to start if I am a beginner.","title":"But human is just too stupid to do anything to accumulate knowledge"},{"location":"blog/mul%5Bi%5D%28%20ai%20%2B%20bi%20%29/","text":"What if we add first then multiply in matrix multiplication? Inner Product in linear algebra is defined as the following: Text Only 1 2 3 4 5 6 7 8 9 10 11 vector a = [a1] [a2] [a3] vector b = [b1] [b2] [b3] inner product(a, b) = a1 b1 + a2 b2 + a3 b3 = sum[i]( ai * bi ) What if I swap the addition and multiplication? What will happen? Text Only 1 2 3 4 sum[i]( ai * bi ) -> mul[i]( ai + bi ) => (a1 + b1) (a2 + b2) (a3 + b3) Let's expend this equation. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 (a1 + b1) (a2 + b2) (a3 + b3) = a1 (a2 + b2) (a3 + b3) + b1 (a2 + b2) (a3 + b3) = a1 a2 (a3 + b3) + a1 b2 (a3 + b3) + b1 a2 (a3 + b3) + b1 b2 (a3 + b3) = a1 a2 a3 + a1 a2 b3 + a1 b2 a3 + a1 b2 b3 + b1 a2 a3 + b1 a2 b3 + b1 b2 a3 + b1 b2 b3 This result is showing that every possibly route to go down the vector. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 e.g. a1 a2 a3 [a1] [b1] | [a2] [b2] | [a3] [b3] e.g. a1 a2 b3 [a1] [b1] | [a2] [b2] \\ [a3] [b3] But what means by multiplying all possibly route and then add them up? The only sense I can make out of it that this arithematic is probabily dealing with \"probability\". Say there are 3 electron orbits. The probability that you will find an electron in there can be expressed by system c. And there is another 3 electron orbits expressed by system d. Text Only 1 2 3 4 5 6 7 system c = [0.4] [0.2] [0.2] system d = [0.3] [0.5] [0.2] And magically system c and system d collides and they now sharing the same 3 orbits spacially. But still they are independent systems, just overlaping their orbits. Text Only 1 2 3 4 c d [0.4] [0.3] orbit1 [0.2] [0.5] orbit2 [0.2] [0.2] orbit3 Now 3 electrons filled all 3 orbits. One electron is in orbit1 but it is contributed by system c, and the chance to find an electron in system c orbit1 is 0.4. Another electron is in orbit2 but it is contributed by system d, and the chance to find an electron in system d orbit2 is 0.5. Another electron is in orbit3 but it is contributed by system c, and the chance to find an electron in system c orbit3 is 0.2. So the overall probability is 0.4 * 0.5 * 0.2. As ultimately there are 3 electrons there. There is a lot of different combination of the source of contributions. So you add up all those probilities. Text Only 1 2 3 4 5 6 7 8 9 10 = a1 a2 a3 + a1 a2 b3 + a1 b2 a3 + a1 b2 b3 + b1 a2 a3 + b1 a2 b3 + b1 b2 a3 + b1 b2 b3 = arbitrary real number But then the result is a number. What is the meaning of this number? The total probility that I will find 3 electrons in such compond system? My real question is, what is this number means by a matrix operation? Text Only 1 2 3 4 5 # .x. to label the multiplication part [.system m.] [.v1.] = [.z1.] <= what is this shit? [ system n ] [.v2.] [ z2 ] [ system o ] [.v3.] [ z3 ] The meaning of vector v has changed and vector z now has totally different meaning. Can I say that z1 z2 z3 now means the probabilities that I will find 3 electrons in system m n o respectively? Than I multiply another set systems (matrix) on to it, to obtain a further compounded complex system? Text Only 1 2 3 4 5 system m n o interacting with system v w x [.system m.] [.v1.| w1 | x1 ] = [.z1.| p1 | q1 ] [ system n ] [.v2.| w2 | x2 ] [ z2 | p2 | q2 ] [ system o ] [.v3.| w3 | x3 ] [ z3 | p3 | q3 ] I don't know.","title":"Mul[i]( ai + bi )"},{"location":"how_to/","text":"How To Do That? \u00b6 How to setup Animate4K \u00b6 NAS is not backup Par2 is \u00b6","title":"How to"},{"location":"how_to/#how-to-do-that","text":"","title":"How To Do That?"},{"location":"how_to/#how-to-setup-animate4k","text":"","title":"How to setup Animate4K"},{"location":"how_to/#nas-is-not-backup-par2-is","text":"","title":"NAS is not backup Par2 is"},{"location":"how_to/How%20to%20Anime4K/","text":"How To Setup Animate4K \u00b6 Animate4K is a AI anime upsampling plugin for video player, its usage is not limited by anime, you can use it on other material although not optimized. Herer I documented how I installed this thing mainly to serve myself. Then i think this may also benefit you. So here it is. 1. Download mpv.net player \u00b6 https://github.com/stax76/mpv.net/releases/ 2. Download Anime4K shader files \u00b6 https://github.com/bloc97/Anime4K/releases 3. Set key bindings for Anime4K \u00b6 Open mpv.net player right click -> Settings -> Open Config Folders Create a new folder named 'shaders' in this config folder Put everything in Anime4K.zip into the root of the folder 'shaders' Edit the input.conf by text editor Insert code in scetion4 to the end of the input.conf ( Here I changed the original key binding CTRL+NUM to CTRL+Alt+NUM to avoid collision ) After that you can use CTRL+Alt+1 , CTRL+Alt+2, CTRL+Alt+3 to toggle Anime4K You can use CTRL+Alt+0 to disable Anime4K 4. Code You need to insert to configuration file \u00b6 Optimized shaders for higher-end GPU Optimized shaders for lower-end GPU (Eg. GTX 1080, RTX 2070, RTX 3060, RX 590, Vega 56, 5700XT, 6600XT) 1 2 3 4 5 6 7 8 CTRL+Alt+1 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode A (HQ)\" CTRL+Alt+2 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode B (HQ)\" CTRL+Alt+3 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode C (HQ)\" CTRL+Alt+4 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode A+A (HQ)\" CTRL+Alt+5 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode B+B (HQ)\" CTRL+Alt+6 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode C+A (HQ)\" CTRL+Alt+0 no-osd change-list glsl-shaders clr \"\"; show-text \"GLSL shaders cleared\" (Eg. GTX 980, GTX 1060, RX 570) 1 2 3 4 5 6 7 8 CTRL+Alt+1 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode A (Fast)\" CTRL+Alt+2 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode B (Fast)\" CTRL+Alt+3 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode C (Fast)\" CTRL+Alt+4 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_Restore_CNN_S.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode A+A (Fast)\" CTRL+Alt+5 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_S.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode B+B (Fast)\" CTRL+Alt+6 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_S.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode C+A (Fast)\" CTRL+Alt+0 no-osd change-list glsl-shaders clr \"\"; show-text \"GLSL shaders cleared\"","title":"How To Setup Animate4K"},{"location":"how_to/How%20to%20Anime4K/#how-to-setup-animate4k","text":"Animate4K is a AI anime upsampling plugin for video player, its usage is not limited by anime, you can use it on other material although not optimized. Herer I documented how I installed this thing mainly to serve myself. Then i think this may also benefit you. So here it is.","title":"How To Setup Animate4K"},{"location":"how_to/How%20to%20Anime4K/#1-download-mpvnet-player","text":"https://github.com/stax76/mpv.net/releases/","title":"1. Download mpv.net player"},{"location":"how_to/How%20to%20Anime4K/#2-download-anime4k-shader-files","text":"https://github.com/bloc97/Anime4K/releases","title":"2. Download Anime4K shader files"},{"location":"how_to/How%20to%20Anime4K/#3-set-key-bindings-for-anime4k","text":"Open mpv.net player right click -> Settings -> Open Config Folders Create a new folder named 'shaders' in this config folder Put everything in Anime4K.zip into the root of the folder 'shaders' Edit the input.conf by text editor Insert code in scetion4 to the end of the input.conf ( Here I changed the original key binding CTRL+NUM to CTRL+Alt+NUM to avoid collision ) After that you can use CTRL+Alt+1 , CTRL+Alt+2, CTRL+Alt+3 to toggle Anime4K You can use CTRL+Alt+0 to disable Anime4K","title":"3. Set key bindings for Anime4K"},{"location":"how_to/How%20to%20Anime4K/#4-code-you-need-to-insert-to-configuration-file","text":"Optimized shaders for higher-end GPU Optimized shaders for lower-end GPU (Eg. GTX 1080, RTX 2070, RTX 3060, RX 590, Vega 56, 5700XT, 6600XT) 1 2 3 4 5 6 7 8 CTRL+Alt+1 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode A (HQ)\" CTRL+Alt+2 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode B (HQ)\" CTRL+Alt+3 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode C (HQ)\" CTRL+Alt+4 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode A+A (HQ)\" CTRL+Alt+5 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode B+B (HQ)\" CTRL+Alt+6 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode C+A (HQ)\" CTRL+Alt+0 no-osd change-list glsl-shaders clr \"\"; show-text \"GLSL shaders cleared\" (Eg. GTX 980, GTX 1060, RX 570) 1 2 3 4 5 6 7 8 CTRL+Alt+1 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode A (Fast)\" CTRL+Alt+2 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode B (Fast)\" CTRL+Alt+3 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode C (Fast)\" CTRL+Alt+4 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_Restore_CNN_S.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode A+A (Fast)\" CTRL+Alt+5 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_S.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode B+B (Fast)\" CTRL+Alt+6 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_S.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode C+A (Fast)\" CTRL+Alt+0 no-osd change-list glsl-shaders clr \"\"; show-text \"GLSL shaders cleared\"","title":"4. Code You need to insert to configuration file"},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/","text":"NAS is not backup. Par2 is. \u00b6 Par2 is a opensource file archive and repair software. I know nothing about its history but it is awesome! I used to buy a bunch of external HDD and copy every file onto it. Having multiple copies across different physical HDD is essentially RAID1 mirroring, but it is painful when I need to move new files in and to edit old files. Then here comes my savier, PAR2. You archive your files with it, then it is able to detect any changes happened on your files and able to repair it, if the data loss is still manageable. For example, JPG is susceptible to data corruption. There are high energy particles hitting the ground every second, it is called radiation from the sky. When those particles hits the memory storage, that changes some bits. The probability is not high, still it is high enough to corrupt 10 to 20 photos in my phone and harddisk per year. PAR2 can fix this by repairing. Even if the file is completely gone. You can download Par2 software in Github. It is call MultiPar, made by the original author. Download \u00b6 You should scroll down and find Assets , download for example MultiPar1326_setup.exe and install it. https://github.com/Yutaka-Sawada/MultiPar/releases Installing \u00b6 While you are installing, there should by a option to create a button in the right-click menu. You should enable it. It gives better experience. Using \u00b6 Now that you finished installing. Let say you got a bunch of files pending to archive. put them to the same folder inside the folder select all right click MultiPar > Create Recovery Files the GUI should show up Let me explain the interface. And where should you look at. 1. This is the datas that you selected to archive. \u00b6 Right below the (1) that I draw, it said Splie Files . Don't ever tick it. Say if you have one 4GB video, ticking it will chop your video into pieces like 1GB-1GB-1GB-1GB and these are the ones who are going to be archived. 2. Block Count. \u00b6 It means that datas that you selected to archive is splited as many blocks. The software will calculate hash and parity for each block. 3. Block Size. \u00b6 Depend on how many blocks you decide to split. For example 1GB data into 4 blocks, which is 250MB for each block. 4. Number of Recovery blocks. \u00b6 How many extra data you are going to keep, to revovery the data loss. Let say you decided to split up 200 blocks in (2), here you select 40 of them as revovery blocks to make a extra copy of it. This give you 40/200 = 20% redundancy. You can make it 200% redundancy if you want, so that you can rebuild everything bit of data even when the original ones are all gone. You may consider to make it a multiple of (2) block count. 5. Number of Recovery files. \u00b6 Data blocks in (4) are gathered together as a single file. Here you can choose how many files will be saved on your disk. you can press Preview button in the bottom right conner to see how it will look like. 6. Efficiency. \u00b6 How efficient is this archive. For example if you have 8MB block size in (3) and your data that being archived are all small 5MB JPG photos, there is still 8-5 = 3MB of space for each block. The efficiency will be low. For that, you can slide the bar in (2) and see how the number in Recovery data size below (5) changes. So that you make it more efficient. But as the author said, < 3% different in efficiency is almost no difference. If you are archiving a bunch of small files, you better zip them before doing this PAR2 thing. 7. One thing you should be alert to \u00b6 is the long sentence in the bottom right conner Number of files can be fully reconstructed if missing (Min - Max) . Try to make the numbers look legit. For exsample Max0 means you are not able to rebuild any file at all with the current settings. If you accidentally deleted something, it is deleted forever. Max1 is also a bad idea. For example you only have a big zip file to archive. And the redundancy is lower than 100%. If you accidentally deleted that zip file, it is also deleted forever. You should split the zip file into many chunks. When you think it is OK, you can press Preview button in the bottom right conner to see what is going to happen. And if that is OK too, you may click Create to actually run the hash program, and wait until it finished. After it finished, there should be some .par2 files being made in the folder. You can double click on any of them, you should be able to call out MultiPar window. There you can check if anything is corrupted, if yes, you can press repair to repair it. My personal tip is not to archive too many files at once. Because the hash is being calcutated for all files as a whole. If you archive say 40GB or 60GB of files at once, every time you need to check for 60GB + 15GB (25% redundency) to look for any inconsistency, even though all you want to do is to repair 1MB of data among them. 20GB is a sweet spot for me. But it is still kind of slow. You figure it out yourself.","title":"NAS is not backup. Par2 is."},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#nas-is-not-backup-par2-is","text":"Par2 is a opensource file archive and repair software. I know nothing about its history but it is awesome! I used to buy a bunch of external HDD and copy every file onto it. Having multiple copies across different physical HDD is essentially RAID1 mirroring, but it is painful when I need to move new files in and to edit old files. Then here comes my savier, PAR2. You archive your files with it, then it is able to detect any changes happened on your files and able to repair it, if the data loss is still manageable. For example, JPG is susceptible to data corruption. There are high energy particles hitting the ground every second, it is called radiation from the sky. When those particles hits the memory storage, that changes some bits. The probability is not high, still it is high enough to corrupt 10 to 20 photos in my phone and harddisk per year. PAR2 can fix this by repairing. Even if the file is completely gone. You can download Par2 software in Github. It is call MultiPar, made by the original author.","title":"NAS is not backup. Par2 is."},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#download","text":"You should scroll down and find Assets , download for example MultiPar1326_setup.exe and install it. https://github.com/Yutaka-Sawada/MultiPar/releases","title":"Download"},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#installing","text":"While you are installing, there should by a option to create a button in the right-click menu. You should enable it. It gives better experience.","title":"Installing"},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#using","text":"Now that you finished installing. Let say you got a bunch of files pending to archive. put them to the same folder inside the folder select all right click MultiPar > Create Recovery Files the GUI should show up Let me explain the interface. And where should you look at.","title":"Using"},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#1-this-is-the-datas-that-you-selected-to-archive","text":"Right below the (1) that I draw, it said Splie Files . Don't ever tick it. Say if you have one 4GB video, ticking it will chop your video into pieces like 1GB-1GB-1GB-1GB and these are the ones who are going to be archived.","title":"1. This is the datas that you selected to archive."},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#2-block-count","text":"It means that datas that you selected to archive is splited as many blocks. The software will calculate hash and parity for each block.","title":"2. Block Count."},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#3-block-size","text":"Depend on how many blocks you decide to split. For example 1GB data into 4 blocks, which is 250MB for each block.","title":"3. Block Size."},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#4-number-of-recovery-blocks","text":"How many extra data you are going to keep, to revovery the data loss. Let say you decided to split up 200 blocks in (2), here you select 40 of them as revovery blocks to make a extra copy of it. This give you 40/200 = 20% redundancy. You can make it 200% redundancy if you want, so that you can rebuild everything bit of data even when the original ones are all gone. You may consider to make it a multiple of (2) block count.","title":"4. Number of Recovery blocks."},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#5-number-of-recovery-files","text":"Data blocks in (4) are gathered together as a single file. Here you can choose how many files will be saved on your disk. you can press Preview button in the bottom right conner to see how it will look like.","title":"5. Number of Recovery files."},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#6-efficiency","text":"How efficient is this archive. For example if you have 8MB block size in (3) and your data that being archived are all small 5MB JPG photos, there is still 8-5 = 3MB of space for each block. The efficiency will be low. For that, you can slide the bar in (2) and see how the number in Recovery data size below (5) changes. So that you make it more efficient. But as the author said, < 3% different in efficiency is almost no difference. If you are archiving a bunch of small files, you better zip them before doing this PAR2 thing.","title":"6. Efficiency."},{"location":"how_to/NAS%20is%20not%20backup%20Par2%20is/#7-one-thing-you-should-be-alert-to","text":"is the long sentence in the bottom right conner Number of files can be fully reconstructed if missing (Min - Max) . Try to make the numbers look legit. For exsample Max0 means you are not able to rebuild any file at all with the current settings. If you accidentally deleted something, it is deleted forever. Max1 is also a bad idea. For example you only have a big zip file to archive. And the redundancy is lower than 100%. If you accidentally deleted that zip file, it is also deleted forever. You should split the zip file into many chunks. When you think it is OK, you can press Preview button in the bottom right conner to see what is going to happen. And if that is OK too, you may click Create to actually run the hash program, and wait until it finished. After it finished, there should be some .par2 files being made in the folder. You can double click on any of them, you should be able to call out MultiPar window. There you can check if anything is corrupted, if yes, you can press repair to repair it. My personal tip is not to archive too many files at once. Because the hash is being calcutated for all files as a whole. If you archive say 40GB or 60GB of files at once, every time you need to check for 60GB + 15GB (25% redundency) to look for any inconsistency, even though all you want to do is to repair 1MB of data among them. 20GB is a sweet spot for me. But it is still kind of slow. You figure it out yourself.","title":"7. One thing you should be alert to"},{"location":"python/","text":"Python Guide \u00b6 Essential Python Programming (for begineer) \u00b6","title":"Python Guide"},{"location":"python/#python-guide","text":"","title":"Python Guide"},{"location":"python/#essential-python-programming-for-begineer","text":"","title":"Essential Python Programming (for begineer)"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/","text":"Essential Python Programming (for begineer) \u00b6 Print \u00b6 print() is the first step of Python. It show you stuff. Python 1 print ( 10 ) Type \u00b6 type() tell you the type of the object. Python 1 2 type ( 3 ) type ( \"3\" ) Number \u00b6 Number in Python is just written like a number. Python 1 2 3 type ( 3 ) type ( 3.0 ) type ( 3.0 + 7 j ) String \u00b6 String is different from number. Python 1 2 3 type ( \"3\" ) type ( \"3.0\" ) type ( \"3.0+7j\" ) Changing Type \u00b6 By now you should know that type(3) is int and type(\"3\") is str . This type can also use as a transform function. Python 1 2 print ( str ( 3 ), type ( str ( 3 )) print ( int ( \"3.0\" ), type ( int ( \"3.0\" ))) Variable \u00b6 Just like 3x = y in school algebra, x and y are variable. Variable is a name. There is a value behind the name. Python 1 2 3 4 x = 3 print ( x ) x = 5 print ( x ) Comment \u00b6 Comment is not part of the program. Python do not excute the part you written as a comment by default. # indicate stuffs behind is intended to be a comment. Python 1 2 3 4 x = 3 #print(x) x = 5 #print(x) You can see nothing is being output. Since those lines for outputing stuffs on screen are now comments. For the sake of convenient, now I use comment to show the output of certain line. Operation \u00b6 Python 1 2 3 4 5 x = 3 y = 2 print ( x + y ) # 5 print ( x - y ) # 1 print ( x * y ) # 6 Condition \u00b6 Condition is simple. If this do this else do that. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 x = 3 if x == 3 : # equality in Pythin is denoted by 2 `=` sign print ( True ) else : print ( False ) # True x = 5 # change the value if x == 3 : print ( True ) else : print ( False ) # False x = 5 if x == 3 : print ( True ) elif x == 5 : # adding second condition print ( True ) else : print ( False ) # True Temporary variable \u00b6 Temporary variable is like this: temp := some condition . When the condition is evaluated as True, that value is assigned to the variable name temp . Usually using with condition. Below is the conventional code. Python 1 2 3 4 5 6 name = \"John\" if name == \"Mary\" : # Checking equality message = name == \"Mary\" print ( message ) else : print ( \"Not Mary\" ) You want to print the value if name == \"Mary\" but this code do not seem smart. Use temporary variable Python 1 2 3 4 5 name = \"John\" if message := ( name == \"Mary\" ): print ( message ) else : print ( \"Not Mary\" ) When the value of name == \"Mary\" is not False, it will be assigned to variable name message . What means by is not False ? It is that the string is not empty, the string is not evaluated as False. Range \u00b6 Provided a upper bound and a lower bound, you can count numbers. You can ask if a value is within the range. Python 1 2 3 4 5 6 7 x = range ( 0 , 10 ) print ( x ) # range(0, 10) print ( 3 in x ) # True print ( 4 in x ) # True print ( 11 in x ) # False print ( 10 in x ) # False # Because in Python, the stopping point 10 is not included print ( - 10 in x ) # False List \u00b6 List is a list. For example name list, a bunch of names inside a single list. list() is a function that can change some specific stuff into a list. Python 1 2 3 4 5 6 7 x = [ 0 , 1 , 2 , 3 , 4 ] print ( x ) # [0, 1, 2, 3, 4] x = list ( range ( 0 , 5 )) print ( x ) # [0, 1, 2, 3, 4] print ( 0 in x ) # True print ( 5 in x ) # False print ( 10 in x ) # False Check how many stuffs are in the list. len() stands for length. Python 1 2 x = [ 0 , 1 , 2 , 3 , 4 ] print ( len ( x )) # 5 N dimensional List \u00b6 You can put anything insided a List, including a List itself. Python 1 2 x = [[ 0 , 1 ],[ 2 , 3 ],[ 4 , 5 ]] print ( x ) # [[0,1],[2,3],[4,5]] List index \u00b6 Stuffs inside a List count from 0. 0 th element, 1 st element, 2 nd elenment, and so on. Python 1 2 3 4 x = [ 6 , 7 , 8 , 9 ] print ( x [ 0 ]) # 6 # [0] means the first element print ( x [ 3 ]) # 9 print ( x [ - 1 ]) # 9 # [-1] means the last element List is mutable \u00b6 Stuff inside a List can be changed. Python 1 2 3 x = [ 5 , 6 , 7 , 8 ] x [ 0 ] = 99 print ( x ) # [99, 6, 7, 8] List contain a reference \u00b6 id() is how you can check the memory address of a object. Python 1 2 3 4 x = 8 print ( id ( x )) # 2369491173840 # this value depends because it is the memory address x = [ 6 , 7 , 8 , 9 ] print ( id ( x [ 2 ]))) # 2369491173840 You see that both return the same value. Both are referencing to the same memory address. In Python, number/interger is inmutable and everytime you callit, it refers to the same object. Unless you do not want this feature on purpose. So there is \"imutable\" object in Python. Of cos, there is \"mutable\" object in Python. One of this kind is the List we are looking right now. So when you put a List inside another List, you are puting the reference of the List only, not the elements inside of the first list. Hence when you change the element, the changes happen to everywhere. Python 1 2 3 4 5 6 y = [ 0 , 1 ] x = [ y , y , y ] print ( x ) # [[0, 1], [0, 1], [0, 1]] print ( id ( x [ 0 ]), id ( x [ 1 ]), id ( x [ 2 ])) # 2369531363840 2369531363840 2369531363840 y [ 0 ] = 99 print ( x ) # [[99, 1], [99, 1], [99, 1]] # All inner List changed at once List copying \u00b6 To prevent the global changes of element, you have to create new object for each of them. Python 1 2 3 4 5 6 x = [ 0 , 1 ] y = [ 0 , 1 ] z = [ 0 , 1 ] mylist = [ x , y , z ] x [ 0 ] = 99 print ( mylist ) # [[99, 1], [0, 1], [0, 1]] Or you may use the copy() function from List itself. But also, it only give you the reference of its elements. When the element is another list, it is the same object before and after copying. Let's first see how List.copy() work in action. Python 1 2 3 4 5 6 x = [ 0 , 1 ] x2 = x . copy () print ( x2 ) # [0, 1] x2 [ 0 ] = 99 print ( x ) # [0, 1] print ( x2 ) # [99, 1] You can see original x is not affected because element of x is number/integer and it is imutable. And imutable object is the end of the journey, you cannot reassign another value to that memory address. Python 1 2 3 4 5 6 7 8 9 x = [[ 0 , 1 ], [ 2 , 3 ]] x2 = x . copy () print ( x ) # [[0,1], [2,3]] print ( x2 ) # [[0,1], [2,3]] x2 [ 1 ][ 1 ] = 99 print ( x ) # [[0, 1], [2, 99]] print ( x2 ) # [[0, 1], [2, 99]] print ( id ( x [ 1 ])) # 2369531365120 print ( id ( x2 [ 1 ])) # 2369531365120 x2[1] refer to the inner List [2,3] . x2[1][1] means that we are changing the second value of this inner List to 99 . By print the memory address, you can see that both refer to the same object. Hence when you change one side, the other side also changed. Deepcopy \u00b6 In the previous section, we see that modifying a N dimension List will have some unwanted side effect. How to prevent that? Here comes a function that is handy but if not careful enough, it hurt the performance a lot. Python 1 2 3 4 5 6 7 8 9 10 from copy import deepcopy x = [[ 0 , 1 ], [ 2 , 3 ]] x2 = deepcopy ( x ) print ( x ) # [[0,1], [2,3]] print ( x2 ) # [[0,1], [2,3]] print ( id ( x [ 1 ])) # 2369531365760 print ( id ( x2 [ 1 ])) # 2369531346624 # See that they do the share the same memory address x2 [ 1 ][ 1 ] = 99 print ( x ) # [[0, 1], [2, 3]] print ( x2 ) # [[0, 1], [2, 99]] Remember to use deepcopy() carefully. Do not make unnecessary copy. Loop \u00b6 One of the greatest thing in programming is that you can repeat same task for many times. This ability is called looping . Mainly, there are two types of loop in Python. For loop and WHITE loop . For loop \u00b6 Python 1 2 3 4 5 x = [ 0 , 1 , 2 , 3 , 4 ] for number in x : print ( number ) # 0 -> 1 -> 2 -> 3 -> 4 for number in range ( 5 ): print ( number ) # 0 -> 1 -> 2 -> 3 -> 4 For loop with condition \u00b6 Python 1 2 3 for number in range ( 5 ): if number > 2 : # Larger than print ( number ) # 3 -> 4 For loop break continue pass \u00b6 You can stop the For loop manually by break . Python 1 2 3 4 5 6 for num in range ( 7 ); if num < 3 : print ( num ) else : print ( \"Stoping the loop\" ) break Text Only 1 2 3 4 5 0 1 2 3 Stoping the loop You can skip the current cycle by continue . Python 1 2 3 4 5 6 for num in range ( 7 ); if num < 3 : print ( \"Skipping\" ) continue else : print ( num ) Text Only 1 2 3 4 5 6 Skipping Skipping 3 4 5 6 You can pretend that there is code but actually nothing. Python 1 2 for num in range ( 7 ); pass Nothing is being done inside the loop. But that still require some computational resource since it is still counting from 0 to 7. But pass is different from continue , pass is like a space holder but do not have the same functionality of continue . pass do not do skip. Python 1 2 3 for num in range ( 7 ); pass print ( num ) Text Only 1 2 3 4 5 6 7 0 1 2 3 4 5 6 N dimensional For loop \u00b6 For each layer of For loop, one element is being taken out from the list. When that element is also a list, you can use for loop on this element of list. Python 1 2 3 4 x = [[ 0 , 1 ],[ 2 , 3 ],[ 4 , 5 ]] for layer1 in x : for layer2 in layer1 : print ( layer2 ) # 0 -> 1 -> 2 -> 3 -> 4 By changing the position of function print() , or stuff inside function print() , you can obtain different effect. Python 1 2 3 4 5 x = [[ 0 , 1 ],[ 2 , 3 ],[ 4 , 5 ]] for layer1 in x : print ( \"Now\" , layer1 ) # Now [0,1] -> Now [2,3] for layer2 in layer1 : print ( layer2 ) #-> 0 -> 1 -> 2 ... So the overall printing will be: Text Only 1 2 3 4 5 6 Now [0,1] 0 1 Now [2,3] 2 3 Enumerate \u00b6 When it become confusing to make sense of N dimensional Loop, use enumerate() . Python 1 2 3 x = [ 0 , 1 , 2 , 3 , 4 ] for i , number in enumerate ( x ): print ( \"element\" , i , \"=\" , number ) # element 0 = 0 -> element 1 = 1 -> ... More typical usage of enumerate() is like this. Python 1 2 3 4 5 x = [[[ 0 , 0 ],[ 1 , 1 ]],[[ 2 , 2 ],[ 3 , 3 ]],[[ 4 , 4 ],[ 5 , 5 ]]] # This is a 3 dimension List for i , d1 in enumerate ( x ): for j , d2 in enumerate ( d1 ): for k , d3 in enumerate ( d2 ): print ( i , j , k , d3 ) # 0 0 0 0 -> 0 0 1 0 -> 0 1 0 1 -> ... So that you know which dimension is which. Building List using For loop \u00b6 You can put stuff into empty list by List.append() . Python 1 2 3 4 5 6 mylist = [] for number in range ( 5 ): mylist . append ( number ) print ( \"adding number\" , number , \"to the list.\" ) # adding number 0 to the list. -> ... print ( \">>> my list :\" , mylist ) # >>> my list : [0] -> >>> my list : [0, 1] -> ... print ( mylist ) # [0, 1, 2, 3, 4] Decompose List using For loop \u00b6 Python 1 2 3 4 5 6 7 x = [[[ 0 , 0 ],[ 1 , 1 ]],[[ 2 , 2 ],[ 3 , 3 ]],[[ 4 , 4 ],[ 5 , 5 ]]] # This is a 3 dimension List y = [] for i , d1 in enumerate ( x ): for j , d2 in enumerate ( d1 ): for k , d3 in enumerate ( d2 ): y . append ( d3 ) print ( y ) # [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5] # N dimension is reduced to 1 dimension List comprehension \u00b6 The building process of a list and the expression of For loop can be compressed into a single line. [] construct a List. for name in namelist make a For loop. By combining both, you can make a List in one line of code. Python 1 2 x = [ number for number in range ( 5 )] print ( x ) # [0, 1, 2, 3, 4] This is the same as: Python 1 2 3 x = [] for number in range ( 5 ): x . append ( number ) List comprehension with condition \u00b6 Python 1 2 x = [ number for number in range ( 5 ) if number > 2 ] print ( x ) # [3, 4] This is the same as: Python 1 2 3 4 5 x = [] for number in range ( 5 ): if number > 2 : # if number larger than 2 x . append ( number ) # x = [3, 4] N dimensional List comprehension \u00b6 Python 1 x = [[[ i , j ] for j in range ( 3 )] for i in range ( 2 )] This is the same as: Python 1 2 3 4 5 6 7 8 9 x = [] for i in range ( 2 ): innerlayer = [] for j in range ( 3 ): temp = [ i , j ] innerlayer . append ( temp ) x . append ( innerlayer ) # x = [[[0,0], [0,1], [0,2]], # [[1,0], [1,1], [1,2]]] You can use this method to build a empty matrix. Python 1 2 3 x = [[ 0 for j in range ( 3 )] for i in range ( 2 )] # x = [[0, 0, 0], # [0, 0, 0]] List comprehension with temporary variable \u00b6 Python 1 2 x = [ val for num in range ( 10 ) if ( val := num % 2 ) ] # x = [1, 1, 1, 1, 1] Explained: Counting from 0 to 10, not include 10. num%2 means remainder after num is divided by 2. It the remainder is nonzero, it means True to Python. Therefore, If the number has remainder after divided by 2, assign this remainder to the new List x. So eventually you obtain a List full of 1. By changing num%1 to num%4 , you got the x mod 4 in algebra. Python 1 2 x = [ val for num in range ( 10 ) if ( val := num % 4 ) ] # x = [1, 2, 3, 1, 2, 3, 1] WHILE loop \u00b6 WHILE loop is like this: While the condition is True, do the following non stoply . Python 1 2 3 4 5 x = 0 while x < 2 : print ( x ) x += 1 print ( 999 ) Output: Text Only 1 2 3 4 0 1 2 999 Explained: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Begining at 0 check if (0 < 2) => YUP print the current value = 0 current value plus 1 (current value = 1) check if (1 < 2) => YUP print the current value = 1 current value plus 1 (current value = 2) check if (2 < 2) => YUP print the current value = 2 current value plus 1 (current value = 3) check if (3 < 2) => NOPE stop looping print value 999 While True and break \u00b6 Sometimes it is just more convenient to do the loop first, check the condition then. Python 1 2 3 4 5 6 7 x = 0 while True : x += 1 print ( x ) if x > 5 : print ( \"x is now larger than 5\" ) break Text Only 1 2 3 4 5 6 1 2 3 4 5 x is now larger than 5 The usage depend on you. But never forget to end the loop. Otherwise it is called infinite loop. The loop will never end. And Python can not tell itself is doing infinite loop of if the loop is going to end. When you wait so long and still not seeing the result of your program, probably you wrote some infinite loop back there. While Continue Pass \u00b6 Same usage as For loop. While Comprehension \u00b6 As far as I know there is no such thing in Python (or is it?) Dictionary \u00b6 Vocabulary -> Meaning. This is the Dictionary. Creating a connected pair. Or mathematically speaking, a mapping (hey no one understand this!). Python 1 2 x = { \"A\" : \"Apple\" , \"B\" : \"Bob\" } x [ \"A\" ] # \"Apple\" Dictionary is constructed by {} . Inside this curvy braket, key : value . A for Apple B for Bob! When extrating the value back, use the same syntax of List indexing. Calling x[\"A\"] like asking the Dictionary hey what is connected to \"A\"? The Dictionary anwser you Oh it is \"Apple\". Dictionary Construction \u00b6 Well almost same as if this is a list. But a little different. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 x = {} # Empty Dictionary initials = [ \"A\" , \"B\" , \"C\" ] for initial in initials : if initial == \"A\" : value = \"Apple\" elif initial == \"B\" : value = \"Bob\" elif value == \"C\" : value = \"Catastrophe\" else : value = \"Unknow\" x [ initial ] = value print ( x ) # {\"A\": \"Apple\", \"B\": \"Bob\" , \"C\": \"Catastrophe\"} But this code do not seem smart. Then, use zip() . zip() combine two or more stream of data into one, so that you can write a for loop for it! Python 1 2 3 4 5 6 x = {} # Empty Dictionary initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] for ( initial , value ) in zip ( initials , values ): x [ initial ] = value print ( x ) # {\"A\": \"Apple\", \"B\": \"Bob\" , \"C\": \"Catastrophe\"} Zip Dictionary Construction \u00b6 zip() usage in the previous section. We can make use of that and write just a fewer code to achieve the same thing. Python 1 2 3 4 initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] x = dict ( zip ( initials , values )) print ( x ) # {\"A\": \"Apple\", \"B\": \"Bob\" , \"C\": \"Catastrophe\"} zip() combine two list, and dict() turn this combined stream of data into a Dictionary. But this only work if stuff inside zip() make a pair. If you have something like zip(list1, list2, list3) , this do not work. What you need is the next technique. Dictionary Comprehension \u00b6 Just like List Comprehension, there is Dictionary Comprehension too. Given that {} make a Dictionary, just like [] make a List, you can do this. The syntax is only differ from List Comprehension by a little. Basically this is just the code from previous section with different ordering. Python 1 2 3 4 initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] x = { initial : value for ( initial , value ) in zip ( initials , values ) } print ( x ) # {\"A\": \"Apple\", \"B\": \"Bob\" , \"C\": \"Catastrophe\"} By Dictionary Comprehension, you can now do zip(list1, list2, list3) . Python 1 2 3 4 5 6 initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] values2 = [ \"Amos\" , \"Behemoth\" , \"Ceres\" ] x = { initial : [ value , value2 ] for ( initial , value , value2 ) in zip ( initials , values , values2 ) } print ( x ) # {\"A\": [\"Apple\", \"Amos\"], \"B\": [\"Bob\", \"Behemoth\"] , \"C\": [\"Catastrophe\", \"Ceres\"]} print ( x [ \"A\" ]) # [\"Apple\", \"Amos\"] # The value is now a list. As you see from this demostration, everything can be assigned as a value of Dictionary including number, string, List, Dictionary... But not the key. For a key, Dictionary require you to have a unique key for each object. But is way beyond comprehension of a begineer, so you can totally ignore this fact. Just try if you are not certain. Sometime Python will stop you from doing that. Try using a list as a key of Dictionary like the following code. Python 1 2 3 4 x = {} key = [ 0 , 1 , 2 ] value = \"my list\" x [ key ] = value # This line will raise error Enumerate Dictionary \u00b6 Dictionary provide the fastest way to access a value by its key. But what if you want the inverted version: access a key by its value? For example a List, you want to know the List index of certain string. Here you can combine Dict Comprehension and function enumerate() to achieve that. Python 1 2 3 values = [ \"Amos\" , \"Behemoth\" , \"Ceres\" ] lookup = { x : i for ( i , x ) in enumerate ( values ) } lookup [ \"Behemoth\" ] # 1 # tell you that it is at position 1 But this only work if and only if the element inside the List is all unique. For example when you have two Amos [\"Amos\", \"Amos\", \"Behemoth\", \"Ceres\"], the information from the first entry is being covered by the second entry. So the resulting lookup dictionary will only store it Amos is in position 1, not [0,1]. For multiple entry, you need to write a normal For loop. Python 1 2 3 4 5 6 7 values = [ \"Amos\" , \"Amos\" , \"Behemoth\" , \"Ceres\" ] lookup = {} for ( i , value ) in enumerate ( values ): if value not in lookup : lookup [ value ] = [ i ] else : lookip [ value ] . append ( i ) Now you may ask if that if value not in lookup: checking is cumbersome because it actually is. So there is a better solution for this. A DefaultDict. DefaultDict \u00b6 First you need to tell the DefaultDict, what is your default value if the key is not being assigned to the dict. This time you say you want a list as default. So that DefaultDict will create a empty list for you. Python 1 2 3 4 5 6 7 from collections import defaultdict x = defaultdict ( list ) values = [ \"Amos\" , \"Amos\" , \"Behemoth\" , \"Ceres\" ] lookup = {} for ( i , value ) in enumerate ( values ): lookip [ value ] . append ( i ) # now you do not need to check for `value in lookup` Tuple \u00b6 Tuple is the imutable version of List. And because Tuple is imutable, you can assign it as a key of a Dictionary! Python 1 2 3 4 5 this_is_a_tuple = ( 0 , 1 , 2 , 3 , 4 ) print ( this_is_a_tuple ) # (0, 1, 2, 3, 4) print ( type ( this_is_a_tuple )) 3 tuple this_is_a_list = [ 0 , 1 , 2 , 3 , 4 ] print ( this_is_a_list ) # [0, 1, 2, 3, 4] Python 1 2 3 4 5 x = {} key = ( 0 , 1 , 2 ) value = \"my list\" x [ key ] = value # Success print ( x ) # {(0, 1, 2): \"my list\"} Imutable \u00b6 Almost everything is same as a List except that now you cannot change the content inside a Tuple. Python 1 2 x = ( 0 , 1 , 2 , 3 ) x [ - 1 ] = 99 # You can not do this But just as what you have learnt from the section of referencing, Tuple only keep track of the first layer of reference. If you put List inside a Tuple, you can not change the List, but you can change stuff inside that List. Python 1 2 3 4 x = ([ 0 , 1 , 2 , 3 ],) # Tuple need you to type that comma if there is only one element print ( x [ 0 ]) # [0,1,2,3] x [ 0 ][ - 1 ] = 99 print ( x ) # x = ([0,1,2,99],) But you can do this does not mean that you should do this. Tupling \u00b6 Just lke you can turn something into a List by using function list() , you can almost do the same thing with function tuple() . Python 1 2 3 4 x = list ( range ( 5 )) print ( x , type ( x )) # [0, 1, 2, 3, 4] list x = tuple ( range ( 5 )) print ( x , type ( x )) # (0, 1, 2, 3, 4) tuple Tuple Comprehension \u00b6 Do not like List or Dictionary, for Tuple, you need to use function tuple() to write a comprehension. Python 1 2 3 4 5 x = [ val for num in range ( 10 ) if ( val := num % 4 ) ] # x = [1, 2, 3, 1, 2, 3, 1] x = tuple ( val for num in range ( 10 ) if ( val := num % 4 ) ) # x = (1, 2, 3, 1, 2, 3, 1) Itemgetter \u00b6 Function itemgetter() comes handy when you need to obtain multiple element from a List of from a Tuple of from a Dictionary at once. Usually people do this. Python 1 2 3 4 5 6 7 x = [ \"Amos\" , \"Amos\" , \"Behemoth\" , \"Ceres\" ] need = [ 0 , 2 , 3 ] y = [] for index in need : y . append ( x [ index ]) print ( y ) # [\"Amos\", \"Behemoth\", \"Ceres\"] Stop doing this. Use itemgetter. Python 1 2 3 4 5 6 7 x = [ \"Amos\" , \"Amos\" , \"Behemoth\" , \"Ceres\" ] need = [ 0 , 2 , 3 ] from operator import itemgetter y = itemgetter ( 0 , 2 , 3 )( x ) print ( y ) # (\"Amos\", \"Behemoth\", \"Ceres\") y = itemgetter ( * need )( x ) print ( y ) # (\"Amos\", \"Behemoth\", \"Ceres\") If you obtaining multiple stuff, Itemgetter return a Tuple. If you obtain only single stuff, itemgetter return that single object without putting it in any List or Tuple. You need to be careful with this. Since tou can use * to unpack a List or Tuple even if that List or Tuple contain only single element. But since you are using * to unpack something, you are expecting many things inside. Really, be careful of this behaviour. But first of all what means by \"use * to unpack a List or Tuple\" ??? This is explained in the following section. But before that, just one more thing. You can use itemgetter() to extract element from 2 dimension List. Python 1 2 3 4 x = [[ 0 , 1 ],[ 2 , 3 ],[ 4 , 5 ]] # let say you want the first element from each sub-List from operator import itemgetter y = map ( itemgetter ( 0 ), x ) # 0 means index 0 of List. print ( y ) # (0, 2, 4) map(itemgetter(0), x) is like a idiom, so remenber it. Multiple Unpack \u00b6 Python 1 2 3 4 5 x = {} # Empty Dictionary initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] for ( initial , value ) in zip ( initials , values ): x [ initial ] = value You have seen this in the section of Dictionary. You should have ask the question \"What is that for (initial, value) in zip( ? \" This is called multiple unpack in Python. Pairs are being returned from function zip() , and you assign a each of them to a variable name initial and value . Basically this act the same as following code. Python 1 2 3 4 for pair in zip ( initials , values ): initial = pair [ 0 ] value = pair [ 1 ] x [ initial ] = value With multiple unpack, we can just split and asign each element inside a Tuple or a List of something work like them with a variable name. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 x = [ 0 , 99 ] a , b = x print ( a ) # 0 print ( b ) # 99 x = [ 0 , 1 , 2 , 3 , 4 ] head , * middle , end = x # `*` indicate that contain multiple stuff inside print ( head ) # 0 print ( middle ) # [1, 2, 3] print ( end ) # [4] y = [ head , middle , end ] print ( y ) # [0, [1, 2, 3], 4] y = [ head , * middle , end ] # with `*` for middle, you unpack stuffs inside print ( y ) # [0, 1, 2, 3, 4] Although multiple unpack is useful, do not addict to it. Sometimes it comes with performance penalty like the following. Python 1 2 3 a , b , c = tuple ([ 0 , 0 , 0 ]) # never do this a , b , c = ( 0 , 0 , 0 ) # never do this a = b = c = 0 # do this, if the value is a number. Number is imutable Set \u00b6 So you know there is List, Tuple, Dictionary. There is one more: Set . Set share the same symbol as Dictionary. But to build a Set, you need to call the function set() . Python 1 2 x = set () print ( type ( x )) # set Python 1 2 3 4 x = { 0 , 1 , 2 , 3 , 4 } print ( type ( x )) # set x = { 0 , 0 , 3 , 3 , 4 } print ( x ) # {0, 3, 4} # only unique element are stored in Set Building a Set using For loop \u00b6 Python 1 2 3 4 5 x = [ 0 for num in range ( 5 )] # a List full of 0 myset = set () for num in x : myset . add ( num ) # contrast to `List.append()`, You use `Set.add()` print ( myset ) # {0} Set Comprehension \u00b6 Well, there has List Comprehension, Dict Comprehension, no Tuple Comprehension, but there has Set Comprehension. It is just [ for the List thing replaced by { . Python 1 2 3 4 5 6 7 8 x = [ val for num in range ( 10 ) if ( val := num % 4 ) ] # x = [1, 2, 3, 1, 2, 3, 1] x = tuple ( val for num in range ( 10 ) if ( val := num % 4 ) ) # x = (1, 2, 3, 1, 2, 3, 1) x = { val for num in range ( 10 ) if ( val := num % 4 ) } # x = {1, 2, 3} Setting \u00b6 Python 1 2 3 x = ( 1 , 2 , 3 , 1 , 2 , 3 , 1 ) y = { num for num in x } # Never write this y = set ( x ) # just slap function `set()` to it List(Set(List)) \u00b6 For example you got a List x=[1,2,3,1,2,3,1], you want to eliminate duplicated elelment. Do this, list(set(List)). No matter what your algorithms textbook is saying, this is the known fastest way in Python. Python 1 2 3 x = [ 1 , 2 , 3 , 1 , 2 , 3 , 1 ] y = list ( set ( x )) print ( y ) # [1, 2, 3] Set Relation \u00b6 Make use of set relationship. You can make the fastest program out of them. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 x = { 0 , 1 , 2 } y = { 2 , 3 , 4 } x . intersection ( y ) # {2} x & y # {2} x . isdisjoint ( y ) # False x . update ( y ) # {0,1,2,3,4} x | y # {0,1,2,3,4} x . difference ( y ) # {0,1} x - y # {0,1} Want More? \u00b6","title":"Essential Python Programming (for begineer)"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#essential-python-programming-for-begineer","text":"","title":"Essential Python Programming (for begineer)"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#print","text":"print() is the first step of Python. It show you stuff. Python 1 print ( 10 )","title":"Print"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#type","text":"type() tell you the type of the object. Python 1 2 type ( 3 ) type ( \"3\" )","title":"Type"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#number","text":"Number in Python is just written like a number. Python 1 2 3 type ( 3 ) type ( 3.0 ) type ( 3.0 + 7 j )","title":"Number"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#string","text":"String is different from number. Python 1 2 3 type ( \"3\" ) type ( \"3.0\" ) type ( \"3.0+7j\" )","title":"String"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#changing-type","text":"By now you should know that type(3) is int and type(\"3\") is str . This type can also use as a transform function. Python 1 2 print ( str ( 3 ), type ( str ( 3 )) print ( int ( \"3.0\" ), type ( int ( \"3.0\" )))","title":"Changing Type"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#variable","text":"Just like 3x = y in school algebra, x and y are variable. Variable is a name. There is a value behind the name. Python 1 2 3 4 x = 3 print ( x ) x = 5 print ( x )","title":"Variable"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#comment","text":"Comment is not part of the program. Python do not excute the part you written as a comment by default. # indicate stuffs behind is intended to be a comment. Python 1 2 3 4 x = 3 #print(x) x = 5 #print(x) You can see nothing is being output. Since those lines for outputing stuffs on screen are now comments. For the sake of convenient, now I use comment to show the output of certain line.","title":"Comment"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#operation","text":"Python 1 2 3 4 5 x = 3 y = 2 print ( x + y ) # 5 print ( x - y ) # 1 print ( x * y ) # 6","title":"Operation"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#condition","text":"Condition is simple. If this do this else do that. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 x = 3 if x == 3 : # equality in Pythin is denoted by 2 `=` sign print ( True ) else : print ( False ) # True x = 5 # change the value if x == 3 : print ( True ) else : print ( False ) # False x = 5 if x == 3 : print ( True ) elif x == 5 : # adding second condition print ( True ) else : print ( False ) # True","title":"Condition"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#temporary-variable","text":"Temporary variable is like this: temp := some condition . When the condition is evaluated as True, that value is assigned to the variable name temp . Usually using with condition. Below is the conventional code. Python 1 2 3 4 5 6 name = \"John\" if name == \"Mary\" : # Checking equality message = name == \"Mary\" print ( message ) else : print ( \"Not Mary\" ) You want to print the value if name == \"Mary\" but this code do not seem smart. Use temporary variable Python 1 2 3 4 5 name = \"John\" if message := ( name == \"Mary\" ): print ( message ) else : print ( \"Not Mary\" ) When the value of name == \"Mary\" is not False, it will be assigned to variable name message . What means by is not False ? It is that the string is not empty, the string is not evaluated as False.","title":"Temporary variable"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#range","text":"Provided a upper bound and a lower bound, you can count numbers. You can ask if a value is within the range. Python 1 2 3 4 5 6 7 x = range ( 0 , 10 ) print ( x ) # range(0, 10) print ( 3 in x ) # True print ( 4 in x ) # True print ( 11 in x ) # False print ( 10 in x ) # False # Because in Python, the stopping point 10 is not included print ( - 10 in x ) # False","title":"Range"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#list","text":"List is a list. For example name list, a bunch of names inside a single list. list() is a function that can change some specific stuff into a list. Python 1 2 3 4 5 6 7 x = [ 0 , 1 , 2 , 3 , 4 ] print ( x ) # [0, 1, 2, 3, 4] x = list ( range ( 0 , 5 )) print ( x ) # [0, 1, 2, 3, 4] print ( 0 in x ) # True print ( 5 in x ) # False print ( 10 in x ) # False Check how many stuffs are in the list. len() stands for length. Python 1 2 x = [ 0 , 1 , 2 , 3 , 4 ] print ( len ( x )) # 5","title":"List"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#n-dimensional-list","text":"You can put anything insided a List, including a List itself. Python 1 2 x = [[ 0 , 1 ],[ 2 , 3 ],[ 4 , 5 ]] print ( x ) # [[0,1],[2,3],[4,5]]","title":"N dimensional List"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#list-index","text":"Stuffs inside a List count from 0. 0 th element, 1 st element, 2 nd elenment, and so on. Python 1 2 3 4 x = [ 6 , 7 , 8 , 9 ] print ( x [ 0 ]) # 6 # [0] means the first element print ( x [ 3 ]) # 9 print ( x [ - 1 ]) # 9 # [-1] means the last element","title":"List index"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#list-is-mutable","text":"Stuff inside a List can be changed. Python 1 2 3 x = [ 5 , 6 , 7 , 8 ] x [ 0 ] = 99 print ( x ) # [99, 6, 7, 8]","title":"List is mutable"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#list-contain-a-reference","text":"id() is how you can check the memory address of a object. Python 1 2 3 4 x = 8 print ( id ( x )) # 2369491173840 # this value depends because it is the memory address x = [ 6 , 7 , 8 , 9 ] print ( id ( x [ 2 ]))) # 2369491173840 You see that both return the same value. Both are referencing to the same memory address. In Python, number/interger is inmutable and everytime you callit, it refers to the same object. Unless you do not want this feature on purpose. So there is \"imutable\" object in Python. Of cos, there is \"mutable\" object in Python. One of this kind is the List we are looking right now. So when you put a List inside another List, you are puting the reference of the List only, not the elements inside of the first list. Hence when you change the element, the changes happen to everywhere. Python 1 2 3 4 5 6 y = [ 0 , 1 ] x = [ y , y , y ] print ( x ) # [[0, 1], [0, 1], [0, 1]] print ( id ( x [ 0 ]), id ( x [ 1 ]), id ( x [ 2 ])) # 2369531363840 2369531363840 2369531363840 y [ 0 ] = 99 print ( x ) # [[99, 1], [99, 1], [99, 1]] # All inner List changed at once","title":"List contain a reference"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#list-copying","text":"To prevent the global changes of element, you have to create new object for each of them. Python 1 2 3 4 5 6 x = [ 0 , 1 ] y = [ 0 , 1 ] z = [ 0 , 1 ] mylist = [ x , y , z ] x [ 0 ] = 99 print ( mylist ) # [[99, 1], [0, 1], [0, 1]] Or you may use the copy() function from List itself. But also, it only give you the reference of its elements. When the element is another list, it is the same object before and after copying. Let's first see how List.copy() work in action. Python 1 2 3 4 5 6 x = [ 0 , 1 ] x2 = x . copy () print ( x2 ) # [0, 1] x2 [ 0 ] = 99 print ( x ) # [0, 1] print ( x2 ) # [99, 1] You can see original x is not affected because element of x is number/integer and it is imutable. And imutable object is the end of the journey, you cannot reassign another value to that memory address. Python 1 2 3 4 5 6 7 8 9 x = [[ 0 , 1 ], [ 2 , 3 ]] x2 = x . copy () print ( x ) # [[0,1], [2,3]] print ( x2 ) # [[0,1], [2,3]] x2 [ 1 ][ 1 ] = 99 print ( x ) # [[0, 1], [2, 99]] print ( x2 ) # [[0, 1], [2, 99]] print ( id ( x [ 1 ])) # 2369531365120 print ( id ( x2 [ 1 ])) # 2369531365120 x2[1] refer to the inner List [2,3] . x2[1][1] means that we are changing the second value of this inner List to 99 . By print the memory address, you can see that both refer to the same object. Hence when you change one side, the other side also changed.","title":"List copying"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#deepcopy","text":"In the previous section, we see that modifying a N dimension List will have some unwanted side effect. How to prevent that? Here comes a function that is handy but if not careful enough, it hurt the performance a lot. Python 1 2 3 4 5 6 7 8 9 10 from copy import deepcopy x = [[ 0 , 1 ], [ 2 , 3 ]] x2 = deepcopy ( x ) print ( x ) # [[0,1], [2,3]] print ( x2 ) # [[0,1], [2,3]] print ( id ( x [ 1 ])) # 2369531365760 print ( id ( x2 [ 1 ])) # 2369531346624 # See that they do the share the same memory address x2 [ 1 ][ 1 ] = 99 print ( x ) # [[0, 1], [2, 3]] print ( x2 ) # [[0, 1], [2, 99]] Remember to use deepcopy() carefully. Do not make unnecessary copy.","title":"Deepcopy"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#loop","text":"One of the greatest thing in programming is that you can repeat same task for many times. This ability is called looping . Mainly, there are two types of loop in Python. For loop and WHITE loop .","title":"Loop"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#for-loop","text":"Python 1 2 3 4 5 x = [ 0 , 1 , 2 , 3 , 4 ] for number in x : print ( number ) # 0 -> 1 -> 2 -> 3 -> 4 for number in range ( 5 ): print ( number ) # 0 -> 1 -> 2 -> 3 -> 4","title":"For loop"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#for-loop-with-condition","text":"Python 1 2 3 for number in range ( 5 ): if number > 2 : # Larger than print ( number ) # 3 -> 4","title":"For loop with condition"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#for-loop-break-continue-pass","text":"You can stop the For loop manually by break . Python 1 2 3 4 5 6 for num in range ( 7 ); if num < 3 : print ( num ) else : print ( \"Stoping the loop\" ) break Text Only 1 2 3 4 5 0 1 2 3 Stoping the loop You can skip the current cycle by continue . Python 1 2 3 4 5 6 for num in range ( 7 ); if num < 3 : print ( \"Skipping\" ) continue else : print ( num ) Text Only 1 2 3 4 5 6 Skipping Skipping 3 4 5 6 You can pretend that there is code but actually nothing. Python 1 2 for num in range ( 7 ); pass Nothing is being done inside the loop. But that still require some computational resource since it is still counting from 0 to 7. But pass is different from continue , pass is like a space holder but do not have the same functionality of continue . pass do not do skip. Python 1 2 3 for num in range ( 7 ); pass print ( num ) Text Only 1 2 3 4 5 6 7 0 1 2 3 4 5 6","title":"For loop break continue pass"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#n-dimensional-for-loop","text":"For each layer of For loop, one element is being taken out from the list. When that element is also a list, you can use for loop on this element of list. Python 1 2 3 4 x = [[ 0 , 1 ],[ 2 , 3 ],[ 4 , 5 ]] for layer1 in x : for layer2 in layer1 : print ( layer2 ) # 0 -> 1 -> 2 -> 3 -> 4 By changing the position of function print() , or stuff inside function print() , you can obtain different effect. Python 1 2 3 4 5 x = [[ 0 , 1 ],[ 2 , 3 ],[ 4 , 5 ]] for layer1 in x : print ( \"Now\" , layer1 ) # Now [0,1] -> Now [2,3] for layer2 in layer1 : print ( layer2 ) #-> 0 -> 1 -> 2 ... So the overall printing will be: Text Only 1 2 3 4 5 6 Now [0,1] 0 1 Now [2,3] 2 3","title":"N dimensional For loop"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#enumerate","text":"When it become confusing to make sense of N dimensional Loop, use enumerate() . Python 1 2 3 x = [ 0 , 1 , 2 , 3 , 4 ] for i , number in enumerate ( x ): print ( \"element\" , i , \"=\" , number ) # element 0 = 0 -> element 1 = 1 -> ... More typical usage of enumerate() is like this. Python 1 2 3 4 5 x = [[[ 0 , 0 ],[ 1 , 1 ]],[[ 2 , 2 ],[ 3 , 3 ]],[[ 4 , 4 ],[ 5 , 5 ]]] # This is a 3 dimension List for i , d1 in enumerate ( x ): for j , d2 in enumerate ( d1 ): for k , d3 in enumerate ( d2 ): print ( i , j , k , d3 ) # 0 0 0 0 -> 0 0 1 0 -> 0 1 0 1 -> ... So that you know which dimension is which.","title":"Enumerate"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#building-list-using-for-loop","text":"You can put stuff into empty list by List.append() . Python 1 2 3 4 5 6 mylist = [] for number in range ( 5 ): mylist . append ( number ) print ( \"adding number\" , number , \"to the list.\" ) # adding number 0 to the list. -> ... print ( \">>> my list :\" , mylist ) # >>> my list : [0] -> >>> my list : [0, 1] -> ... print ( mylist ) # [0, 1, 2, 3, 4]","title":"Building List using For loop"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#decompose-list-using-for-loop","text":"Python 1 2 3 4 5 6 7 x = [[[ 0 , 0 ],[ 1 , 1 ]],[[ 2 , 2 ],[ 3 , 3 ]],[[ 4 , 4 ],[ 5 , 5 ]]] # This is a 3 dimension List y = [] for i , d1 in enumerate ( x ): for j , d2 in enumerate ( d1 ): for k , d3 in enumerate ( d2 ): y . append ( d3 ) print ( y ) # [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5] # N dimension is reduced to 1 dimension","title":"Decompose List using For loop"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#list-comprehension","text":"The building process of a list and the expression of For loop can be compressed into a single line. [] construct a List. for name in namelist make a For loop. By combining both, you can make a List in one line of code. Python 1 2 x = [ number for number in range ( 5 )] print ( x ) # [0, 1, 2, 3, 4] This is the same as: Python 1 2 3 x = [] for number in range ( 5 ): x . append ( number )","title":"List comprehension"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#list-comprehension-with-condition","text":"Python 1 2 x = [ number for number in range ( 5 ) if number > 2 ] print ( x ) # [3, 4] This is the same as: Python 1 2 3 4 5 x = [] for number in range ( 5 ): if number > 2 : # if number larger than 2 x . append ( number ) # x = [3, 4]","title":"List comprehension with condition"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#n-dimensional-list-comprehension","text":"Python 1 x = [[[ i , j ] for j in range ( 3 )] for i in range ( 2 )] This is the same as: Python 1 2 3 4 5 6 7 8 9 x = [] for i in range ( 2 ): innerlayer = [] for j in range ( 3 ): temp = [ i , j ] innerlayer . append ( temp ) x . append ( innerlayer ) # x = [[[0,0], [0,1], [0,2]], # [[1,0], [1,1], [1,2]]] You can use this method to build a empty matrix. Python 1 2 3 x = [[ 0 for j in range ( 3 )] for i in range ( 2 )] # x = [[0, 0, 0], # [0, 0, 0]]","title":"N dimensional List comprehension"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#list-comprehension-with-temporary-variable","text":"Python 1 2 x = [ val for num in range ( 10 ) if ( val := num % 2 ) ] # x = [1, 1, 1, 1, 1] Explained: Counting from 0 to 10, not include 10. num%2 means remainder after num is divided by 2. It the remainder is nonzero, it means True to Python. Therefore, If the number has remainder after divided by 2, assign this remainder to the new List x. So eventually you obtain a List full of 1. By changing num%1 to num%4 , you got the x mod 4 in algebra. Python 1 2 x = [ val for num in range ( 10 ) if ( val := num % 4 ) ] # x = [1, 2, 3, 1, 2, 3, 1]","title":"List comprehension with temporary variable"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#while-loop","text":"WHILE loop is like this: While the condition is True, do the following non stoply . Python 1 2 3 4 5 x = 0 while x < 2 : print ( x ) x += 1 print ( 999 ) Output: Text Only 1 2 3 4 0 1 2 999 Explained: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Begining at 0 check if (0 < 2) => YUP print the current value = 0 current value plus 1 (current value = 1) check if (1 < 2) => YUP print the current value = 1 current value plus 1 (current value = 2) check if (2 < 2) => YUP print the current value = 2 current value plus 1 (current value = 3) check if (3 < 2) => NOPE stop looping print value 999","title":"WHILE loop"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#while-true-and-break","text":"Sometimes it is just more convenient to do the loop first, check the condition then. Python 1 2 3 4 5 6 7 x = 0 while True : x += 1 print ( x ) if x > 5 : print ( \"x is now larger than 5\" ) break Text Only 1 2 3 4 5 6 1 2 3 4 5 x is now larger than 5 The usage depend on you. But never forget to end the loop. Otherwise it is called infinite loop. The loop will never end. And Python can not tell itself is doing infinite loop of if the loop is going to end. When you wait so long and still not seeing the result of your program, probably you wrote some infinite loop back there.","title":"While True and break"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#while-continue-pass","text":"Same usage as For loop.","title":"While Continue Pass"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#while-comprehension","text":"As far as I know there is no such thing in Python (or is it?)","title":"While Comprehension"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#dictionary","text":"Vocabulary -> Meaning. This is the Dictionary. Creating a connected pair. Or mathematically speaking, a mapping (hey no one understand this!). Python 1 2 x = { \"A\" : \"Apple\" , \"B\" : \"Bob\" } x [ \"A\" ] # \"Apple\" Dictionary is constructed by {} . Inside this curvy braket, key : value . A for Apple B for Bob! When extrating the value back, use the same syntax of List indexing. Calling x[\"A\"] like asking the Dictionary hey what is connected to \"A\"? The Dictionary anwser you Oh it is \"Apple\".","title":"Dictionary"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#dictionary-construction","text":"Well almost same as if this is a list. But a little different. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 x = {} # Empty Dictionary initials = [ \"A\" , \"B\" , \"C\" ] for initial in initials : if initial == \"A\" : value = \"Apple\" elif initial == \"B\" : value = \"Bob\" elif value == \"C\" : value = \"Catastrophe\" else : value = \"Unknow\" x [ initial ] = value print ( x ) # {\"A\": \"Apple\", \"B\": \"Bob\" , \"C\": \"Catastrophe\"} But this code do not seem smart. Then, use zip() . zip() combine two or more stream of data into one, so that you can write a for loop for it! Python 1 2 3 4 5 6 x = {} # Empty Dictionary initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] for ( initial , value ) in zip ( initials , values ): x [ initial ] = value print ( x ) # {\"A\": \"Apple\", \"B\": \"Bob\" , \"C\": \"Catastrophe\"}","title":"Dictionary Construction"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#zip-dictionary-construction","text":"zip() usage in the previous section. We can make use of that and write just a fewer code to achieve the same thing. Python 1 2 3 4 initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] x = dict ( zip ( initials , values )) print ( x ) # {\"A\": \"Apple\", \"B\": \"Bob\" , \"C\": \"Catastrophe\"} zip() combine two list, and dict() turn this combined stream of data into a Dictionary. But this only work if stuff inside zip() make a pair. If you have something like zip(list1, list2, list3) , this do not work. What you need is the next technique.","title":"Zip Dictionary Construction"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#dictionary-comprehension","text":"Just like List Comprehension, there is Dictionary Comprehension too. Given that {} make a Dictionary, just like [] make a List, you can do this. The syntax is only differ from List Comprehension by a little. Basically this is just the code from previous section with different ordering. Python 1 2 3 4 initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] x = { initial : value for ( initial , value ) in zip ( initials , values ) } print ( x ) # {\"A\": \"Apple\", \"B\": \"Bob\" , \"C\": \"Catastrophe\"} By Dictionary Comprehension, you can now do zip(list1, list2, list3) . Python 1 2 3 4 5 6 initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] values2 = [ \"Amos\" , \"Behemoth\" , \"Ceres\" ] x = { initial : [ value , value2 ] for ( initial , value , value2 ) in zip ( initials , values , values2 ) } print ( x ) # {\"A\": [\"Apple\", \"Amos\"], \"B\": [\"Bob\", \"Behemoth\"] , \"C\": [\"Catastrophe\", \"Ceres\"]} print ( x [ \"A\" ]) # [\"Apple\", \"Amos\"] # The value is now a list. As you see from this demostration, everything can be assigned as a value of Dictionary including number, string, List, Dictionary... But not the key. For a key, Dictionary require you to have a unique key for each object. But is way beyond comprehension of a begineer, so you can totally ignore this fact. Just try if you are not certain. Sometime Python will stop you from doing that. Try using a list as a key of Dictionary like the following code. Python 1 2 3 4 x = {} key = [ 0 , 1 , 2 ] value = \"my list\" x [ key ] = value # This line will raise error","title":"Dictionary Comprehension"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#enumerate-dictionary","text":"Dictionary provide the fastest way to access a value by its key. But what if you want the inverted version: access a key by its value? For example a List, you want to know the List index of certain string. Here you can combine Dict Comprehension and function enumerate() to achieve that. Python 1 2 3 values = [ \"Amos\" , \"Behemoth\" , \"Ceres\" ] lookup = { x : i for ( i , x ) in enumerate ( values ) } lookup [ \"Behemoth\" ] # 1 # tell you that it is at position 1 But this only work if and only if the element inside the List is all unique. For example when you have two Amos [\"Amos\", \"Amos\", \"Behemoth\", \"Ceres\"], the information from the first entry is being covered by the second entry. So the resulting lookup dictionary will only store it Amos is in position 1, not [0,1]. For multiple entry, you need to write a normal For loop. Python 1 2 3 4 5 6 7 values = [ \"Amos\" , \"Amos\" , \"Behemoth\" , \"Ceres\" ] lookup = {} for ( i , value ) in enumerate ( values ): if value not in lookup : lookup [ value ] = [ i ] else : lookip [ value ] . append ( i ) Now you may ask if that if value not in lookup: checking is cumbersome because it actually is. So there is a better solution for this. A DefaultDict.","title":"Enumerate Dictionary"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#defaultdict","text":"First you need to tell the DefaultDict, what is your default value if the key is not being assigned to the dict. This time you say you want a list as default. So that DefaultDict will create a empty list for you. Python 1 2 3 4 5 6 7 from collections import defaultdict x = defaultdict ( list ) values = [ \"Amos\" , \"Amos\" , \"Behemoth\" , \"Ceres\" ] lookup = {} for ( i , value ) in enumerate ( values ): lookip [ value ] . append ( i ) # now you do not need to check for `value in lookup`","title":"DefaultDict"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#tuple","text":"Tuple is the imutable version of List. And because Tuple is imutable, you can assign it as a key of a Dictionary! Python 1 2 3 4 5 this_is_a_tuple = ( 0 , 1 , 2 , 3 , 4 ) print ( this_is_a_tuple ) # (0, 1, 2, 3, 4) print ( type ( this_is_a_tuple )) 3 tuple this_is_a_list = [ 0 , 1 , 2 , 3 , 4 ] print ( this_is_a_list ) # [0, 1, 2, 3, 4] Python 1 2 3 4 5 x = {} key = ( 0 , 1 , 2 ) value = \"my list\" x [ key ] = value # Success print ( x ) # {(0, 1, 2): \"my list\"}","title":"Tuple"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#imutable","text":"Almost everything is same as a List except that now you cannot change the content inside a Tuple. Python 1 2 x = ( 0 , 1 , 2 , 3 ) x [ - 1 ] = 99 # You can not do this But just as what you have learnt from the section of referencing, Tuple only keep track of the first layer of reference. If you put List inside a Tuple, you can not change the List, but you can change stuff inside that List. Python 1 2 3 4 x = ([ 0 , 1 , 2 , 3 ],) # Tuple need you to type that comma if there is only one element print ( x [ 0 ]) # [0,1,2,3] x [ 0 ][ - 1 ] = 99 print ( x ) # x = ([0,1,2,99],) But you can do this does not mean that you should do this.","title":"Imutable"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#tupling","text":"Just lke you can turn something into a List by using function list() , you can almost do the same thing with function tuple() . Python 1 2 3 4 x = list ( range ( 5 )) print ( x , type ( x )) # [0, 1, 2, 3, 4] list x = tuple ( range ( 5 )) print ( x , type ( x )) # (0, 1, 2, 3, 4) tuple","title":"Tupling"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#tuple-comprehension","text":"Do not like List or Dictionary, for Tuple, you need to use function tuple() to write a comprehension. Python 1 2 3 4 5 x = [ val for num in range ( 10 ) if ( val := num % 4 ) ] # x = [1, 2, 3, 1, 2, 3, 1] x = tuple ( val for num in range ( 10 ) if ( val := num % 4 ) ) # x = (1, 2, 3, 1, 2, 3, 1)","title":"Tuple Comprehension"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#itemgetter","text":"Function itemgetter() comes handy when you need to obtain multiple element from a List of from a Tuple of from a Dictionary at once. Usually people do this. Python 1 2 3 4 5 6 7 x = [ \"Amos\" , \"Amos\" , \"Behemoth\" , \"Ceres\" ] need = [ 0 , 2 , 3 ] y = [] for index in need : y . append ( x [ index ]) print ( y ) # [\"Amos\", \"Behemoth\", \"Ceres\"] Stop doing this. Use itemgetter. Python 1 2 3 4 5 6 7 x = [ \"Amos\" , \"Amos\" , \"Behemoth\" , \"Ceres\" ] need = [ 0 , 2 , 3 ] from operator import itemgetter y = itemgetter ( 0 , 2 , 3 )( x ) print ( y ) # (\"Amos\", \"Behemoth\", \"Ceres\") y = itemgetter ( * need )( x ) print ( y ) # (\"Amos\", \"Behemoth\", \"Ceres\") If you obtaining multiple stuff, Itemgetter return a Tuple. If you obtain only single stuff, itemgetter return that single object without putting it in any List or Tuple. You need to be careful with this. Since tou can use * to unpack a List or Tuple even if that List or Tuple contain only single element. But since you are using * to unpack something, you are expecting many things inside. Really, be careful of this behaviour. But first of all what means by \"use * to unpack a List or Tuple\" ??? This is explained in the following section. But before that, just one more thing. You can use itemgetter() to extract element from 2 dimension List. Python 1 2 3 4 x = [[ 0 , 1 ],[ 2 , 3 ],[ 4 , 5 ]] # let say you want the first element from each sub-List from operator import itemgetter y = map ( itemgetter ( 0 ), x ) # 0 means index 0 of List. print ( y ) # (0, 2, 4) map(itemgetter(0), x) is like a idiom, so remenber it.","title":"Itemgetter"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#multiple-unpack","text":"Python 1 2 3 4 5 x = {} # Empty Dictionary initials = [ \"A\" , \"B\" , \"C\" ] values = [ \"Apple\" , \"Bob\" , \"Catastrophe\" ] for ( initial , value ) in zip ( initials , values ): x [ initial ] = value You have seen this in the section of Dictionary. You should have ask the question \"What is that for (initial, value) in zip( ? \" This is called multiple unpack in Python. Pairs are being returned from function zip() , and you assign a each of them to a variable name initial and value . Basically this act the same as following code. Python 1 2 3 4 for pair in zip ( initials , values ): initial = pair [ 0 ] value = pair [ 1 ] x [ initial ] = value With multiple unpack, we can just split and asign each element inside a Tuple or a List of something work like them with a variable name. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 x = [ 0 , 99 ] a , b = x print ( a ) # 0 print ( b ) # 99 x = [ 0 , 1 , 2 , 3 , 4 ] head , * middle , end = x # `*` indicate that contain multiple stuff inside print ( head ) # 0 print ( middle ) # [1, 2, 3] print ( end ) # [4] y = [ head , middle , end ] print ( y ) # [0, [1, 2, 3], 4] y = [ head , * middle , end ] # with `*` for middle, you unpack stuffs inside print ( y ) # [0, 1, 2, 3, 4] Although multiple unpack is useful, do not addict to it. Sometimes it comes with performance penalty like the following. Python 1 2 3 a , b , c = tuple ([ 0 , 0 , 0 ]) # never do this a , b , c = ( 0 , 0 , 0 ) # never do this a = b = c = 0 # do this, if the value is a number. Number is imutable","title":"Multiple Unpack"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#set","text":"So you know there is List, Tuple, Dictionary. There is one more: Set . Set share the same symbol as Dictionary. But to build a Set, you need to call the function set() . Python 1 2 x = set () print ( type ( x )) # set Python 1 2 3 4 x = { 0 , 1 , 2 , 3 , 4 } print ( type ( x )) # set x = { 0 , 0 , 3 , 3 , 4 } print ( x ) # {0, 3, 4} # only unique element are stored in Set","title":"Set"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#building-a-set-using-for-loop","text":"Python 1 2 3 4 5 x = [ 0 for num in range ( 5 )] # a List full of 0 myset = set () for num in x : myset . add ( num ) # contrast to `List.append()`, You use `Set.add()` print ( myset ) # {0}","title":"Building a Set using For loop"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#set-comprehension","text":"Well, there has List Comprehension, Dict Comprehension, no Tuple Comprehension, but there has Set Comprehension. It is just [ for the List thing replaced by { . Python 1 2 3 4 5 6 7 8 x = [ val for num in range ( 10 ) if ( val := num % 4 ) ] # x = [1, 2, 3, 1, 2, 3, 1] x = tuple ( val for num in range ( 10 ) if ( val := num % 4 ) ) # x = (1, 2, 3, 1, 2, 3, 1) x = { val for num in range ( 10 ) if ( val := num % 4 ) } # x = {1, 2, 3}","title":"Set Comprehension"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#setting","text":"Python 1 2 3 x = ( 1 , 2 , 3 , 1 , 2 , 3 , 1 ) y = { num for num in x } # Never write this y = set ( x ) # just slap function `set()` to it","title":"Setting"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#listsetlist","text":"For example you got a List x=[1,2,3,1,2,3,1], you want to eliminate duplicated elelment. Do this, list(set(List)). No matter what your algorithms textbook is saying, this is the known fastest way in Python. Python 1 2 3 x = [ 1 , 2 , 3 , 1 , 2 , 3 , 1 ] y = list ( set ( x )) print ( y ) # [1, 2, 3]","title":"List(Set(List))"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#set-relation","text":"Make use of set relationship. You can make the fastest program out of them. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 x = { 0 , 1 , 2 } y = { 2 , 3 , 4 } x . intersection ( y ) # {2} x & y # {2} x . isdisjoint ( y ) # False x . update ( y ) # {0,1,2,3,4} x | y # {0,1,2,3,4} x . difference ( y ) # {0,1} x - y # {0,1}","title":"Set Relation"},{"location":"python/Essential%20Python%20Programming%20%28for%20begineer%29/#want-more","text":"","title":"Want More?"},{"location":"python/Optimising%20Python/","text":"Optimising Python Loops \u00b6 Never Write Recursion \u00b6 Recursion come with cost. Every time you call a function, new resources needed to be allocated. Here is a comparsion of recursive and loop version of the same fibonacci function. First lets see the recursive one. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def recursive_fibonacci(x): return ( recursive_fibonacci(x-1) + recursive_fibonacci(x-2) if x>=2 else 1 if x==1 else 0 if x == 0 else -1 ) recursive_coode = \"\"\" x = [recursive_fibonacci(n) for n in range(30)] \"\"\" import cProfile cProfile.run(recursive_coode) >>> 4356590 function calls (34 primitive calls) in 7.765 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 7.765 7.765 <string>:1(<module>) 1 0.000 0.000 7.765 7.765 <string>:2(<listcomp>) 4356586/30 7.765 0.000 7.765 0.259 Fibonancci.py:6(recursive_fibonacci) 1 0.000 0.000 7.765 7.765 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} And here is the loop one. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def loop_fibonacci(x): # Split the domain of input into 3 parts # x<0 | 0<=x<2 | 2<=x # For each case: if x<2: return 0 if x==0 else 1 if x==1 else -1 # Minimun return from here is x==2 total = 0 one_less = 1 # fibonacci(1) two_less = 0 # fibonacci(0) i = 2 while i <= x: one_less, two_less = one_less + two_less, one_less i += 1 else: return one_less loop_code = \"\"\" y = [loop_fibonacci(n) for n in range(30)] \"\"\" import cProfile cProfile.run(loop_code) >>> 34 function calls in 0.001 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.000 0.000 :1( ) 1 0.000 0.000 0.000 0.000 :2( ) 30 0.000 0.000 0.000 0.000 Fibonancci.py:19(loop_fibonacci) 1 0.000 0.000 0.001 0.001 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Immediately you can see the difference. Loop version takes so little time compare to the recursive one. Because of that, I need to increase the number to where they are costing the same time. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 loop_code = \"\"\" y = [loop_fibonacci(n) for n in range(3750)] \"\"\" import cProfile cProfile.run(loop_code) >>> 3754 function calls in 7.659 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 7.659 7.659 <string>:1(<module>) 1 0.009 0.009 7.659 7.659 <string>:2(<listcomp>) 3750 7.650 0.002 7.650 0.002 Fibonancci.py:19(loop_fibonacci) 1 0.000 0.000 7.659 7.659 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} It shows that loop fibonacci function can make a 3575-element long series while recursive one can only make a 30-element long in the same time span. Let's analysis that. Each function call on any fibonacci, say fibonacci(k), it needs to recalculate everything from 0 to k. Obviously this is a waste. Because we have already obtained some numbers in previous iterations isn't it? Driven by this thought, here is another tips to optimise your loop. Store The Results If You Are Going To Reuse It \u00b6 If you know you are going to reuse a calculation result, you have better store that somewhere! Below is the fibonacci function implemented. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # We have to wrap the fibonacci function into nested loop def loop_fibonacci_series(count_to): book = {0: 0, 1: 1, } # Handle exceptional case first if count_to < 0: return [-1] result = [] put = result.append # Preload the function to speedup for x in range(count_to): if x in book: put(book[x]) else: book[x] = temp = book[x-1] + book[x-2] put(temp) return result loop_series_code = \"\"\" z = [loop_fibonacci_series(3750)] \"\"\" import cProfile cProfile.run(loop_series_code) >>> 3754 function calls in 0.018 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.017 0.017 :1( ) 1 0.015 0.015 0.017 0.017 Fibonancci.py:52(loop_fibonacci_series) 1 0.000 0.000 0.018 0.018 {built-in method builtins.exec} 3750 0.002 0.000 0.002 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} As you can see, the time span reduced a lot. It is almost a million times faster than the recursive version from there! But, still there are rooms for improvement. Preallocating Memory \u00b6 List and Dict in Python are flexble sized. It will grow into bigger size when you need more. But that growing also takes time. As you append more and more items into the list, or the dict, soon it may again fulled and need another growth. When this happens a lot, it takes a lot of time to deal with the memory space arrangement. Therefore given that you know how many resources you need, you can preallocate that amount of memory. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # We have to wrap the fibonacci function into nested loop def loop_fibonacci_series(count_to): book = {n:None for n in range(count_to)} book.update({ 0: 0, 1: 1, }) # Handle exceptional case first if count_to < 0: return [-1] result = [None for n in range(count_to)] # Preallocate memory put = result.append # Preload the function to speedup for x in range(count_to): if x in book: put(book[x]) else: book[x] = temp = book[x-1] + book[x-2] put(temp) return result loop_series_code = f\"\"\" z = [loop_fibonacci_series(count_to)] \"\"\" import cProfile cProfile.run(loop_series_code) >>> 3757 function calls in 0.009 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.009 0.009 :1( ) 1 0.005 0.005 0.009 0.009 Fibonancci.py:86(loop_fibonacci_series) 1 0.001 0.001 0.001 0.001 Fibonancci.py:88( ) 1 0.001 0.001 0.001 0.001 Fibonancci.py:98( ) 1 0.000 0.000 0.009 0.009 {built-in method builtins.exec} 3750 0.002 0.000 0.002 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} 1 0.000 0.000 0.000 0.000 {method 'update' of 'dict' objects} You can see that this is even faster! Say Goodbye To itertools.combinations \u00b6 Let say you need the combinations of some sort of arrangement as the input. Text Only 1 2 def some_func(x, y, z): pass The standard the to use itertools.combinations to do it. For example, Text Only 1 2 3 4 from itertools import combinations for x,y,z in combinations(X, Y, Z): print(some_func(x,y,z)) However this is unoptimised because x and y must reset in every iteration. Despite that say you are counting combinations of numbers. Text Only 1 000 001 010 011 ... You see the value in x rarely changed. This leads to the dicision that nested for loop is still the recommented way to do it right. Combinations: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def use_combinations(count_to): from itertools import combinations f = loop_fibonacci # from previous code result = [] put = result.append for x,y,z in combinations(range(count_to), r=3): # Let say we somehow need to do a little manipluation to the value. # Because x,y,z value reset everytime, you need to calculate this again and again. fx, fy, fz = f(x), f(y), f(z) put((fx, fy, fz)) return result import cProfile cProfile.run(\"use_combinations(100)\") >>> 646804 function calls in 13.517 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.036 0.036 13.516 13.516 <string>:1(<module>) 1 0.769 0.769 13.481 13.481 Fibonancci.py:147(use_combinations) 485100 12.622 0.000 12.622 0.000 Fibonancci.py:20(loop_fibonacci) 1 0.000 0.000 13.517 13.517 {built-in method builtins.exec} 161700 0.089 0.000 0.089 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Nested Loop: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def use_nest(count_to): X = range(count_to) f = loop_fibonacci result = [] put = result.append for x in (X): # Let say we somehow need to do a little manipluation to the value. # It will just stay until the next iteration, before that, never gonna changed. # Thus save us a significant amount of time. fx = f(x) for y in range(x+1, count_to): fy = f(y) for z in range(y+1, count_to): fz = f(z) put((fx, fy, fz)) import cProfile cProfile.run(\"use_nest(100)\") >>> 328454 function calls in 7.097 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.030 0.030 7.097 7.097 <string>:1(<module>) 1 0.413 0.413 7.067 7.067 Fibonancci.py:122(use_nest) 166750 6.565 0.000 6.565 0.000 Fibonancci.py:20(loop_fibonacci) 1 0.000 0.000 7.097 7.097 {built-in method builtins.exec} 161700 0.088 0.000 0.088 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Well, the time span speaks for itself.","title":"Optimising Python Loops"},{"location":"python/Optimising%20Python/#optimising-python-loops","text":"","title":"Optimising Python Loops"},{"location":"python/Optimising%20Python/#never-write-recursion","text":"Recursion come with cost. Every time you call a function, new resources needed to be allocated. Here is a comparsion of recursive and loop version of the same fibonacci function. First lets see the recursive one. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def recursive_fibonacci(x): return ( recursive_fibonacci(x-1) + recursive_fibonacci(x-2) if x>=2 else 1 if x==1 else 0 if x == 0 else -1 ) recursive_coode = \"\"\" x = [recursive_fibonacci(n) for n in range(30)] \"\"\" import cProfile cProfile.run(recursive_coode) >>> 4356590 function calls (34 primitive calls) in 7.765 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 7.765 7.765 <string>:1(<module>) 1 0.000 0.000 7.765 7.765 <string>:2(<listcomp>) 4356586/30 7.765 0.000 7.765 0.259 Fibonancci.py:6(recursive_fibonacci) 1 0.000 0.000 7.765 7.765 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} And here is the loop one. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def loop_fibonacci(x): # Split the domain of input into 3 parts # x<0 | 0<=x<2 | 2<=x # For each case: if x<2: return 0 if x==0 else 1 if x==1 else -1 # Minimun return from here is x==2 total = 0 one_less = 1 # fibonacci(1) two_less = 0 # fibonacci(0) i = 2 while i <= x: one_less, two_less = one_less + two_less, one_less i += 1 else: return one_less loop_code = \"\"\" y = [loop_fibonacci(n) for n in range(30)] \"\"\" import cProfile cProfile.run(loop_code) >>> 34 function calls in 0.001 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.000 0.000 :1( ) 1 0.000 0.000 0.000 0.000 :2( ) 30 0.000 0.000 0.000 0.000 Fibonancci.py:19(loop_fibonacci) 1 0.000 0.000 0.001 0.001 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Immediately you can see the difference. Loop version takes so little time compare to the recursive one. Because of that, I need to increase the number to where they are costing the same time. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 loop_code = \"\"\" y = [loop_fibonacci(n) for n in range(3750)] \"\"\" import cProfile cProfile.run(loop_code) >>> 3754 function calls in 7.659 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 7.659 7.659 <string>:1(<module>) 1 0.009 0.009 7.659 7.659 <string>:2(<listcomp>) 3750 7.650 0.002 7.650 0.002 Fibonancci.py:19(loop_fibonacci) 1 0.000 0.000 7.659 7.659 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} It shows that loop fibonacci function can make a 3575-element long series while recursive one can only make a 30-element long in the same time span. Let's analysis that. Each function call on any fibonacci, say fibonacci(k), it needs to recalculate everything from 0 to k. Obviously this is a waste. Because we have already obtained some numbers in previous iterations isn't it? Driven by this thought, here is another tips to optimise your loop.","title":"Never Write Recursion"},{"location":"python/Optimising%20Python/#store-the-results-if-you-are-going-to-reuse-it","text":"If you know you are going to reuse a calculation result, you have better store that somewhere! Below is the fibonacci function implemented. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # We have to wrap the fibonacci function into nested loop def loop_fibonacci_series(count_to): book = {0: 0, 1: 1, } # Handle exceptional case first if count_to < 0: return [-1] result = [] put = result.append # Preload the function to speedup for x in range(count_to): if x in book: put(book[x]) else: book[x] = temp = book[x-1] + book[x-2] put(temp) return result loop_series_code = \"\"\" z = [loop_fibonacci_series(3750)] \"\"\" import cProfile cProfile.run(loop_series_code) >>> 3754 function calls in 0.018 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.017 0.017 :1( ) 1 0.015 0.015 0.017 0.017 Fibonancci.py:52(loop_fibonacci_series) 1 0.000 0.000 0.018 0.018 {built-in method builtins.exec} 3750 0.002 0.000 0.002 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} As you can see, the time span reduced a lot. It is almost a million times faster than the recursive version from there! But, still there are rooms for improvement.","title":"Store The Results If You Are Going To Reuse It"},{"location":"python/Optimising%20Python/#preallocating-memory","text":"List and Dict in Python are flexble sized. It will grow into bigger size when you need more. But that growing also takes time. As you append more and more items into the list, or the dict, soon it may again fulled and need another growth. When this happens a lot, it takes a lot of time to deal with the memory space arrangement. Therefore given that you know how many resources you need, you can preallocate that amount of memory. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # We have to wrap the fibonacci function into nested loop def loop_fibonacci_series(count_to): book = {n:None for n in range(count_to)} book.update({ 0: 0, 1: 1, }) # Handle exceptional case first if count_to < 0: return [-1] result = [None for n in range(count_to)] # Preallocate memory put = result.append # Preload the function to speedup for x in range(count_to): if x in book: put(book[x]) else: book[x] = temp = book[x-1] + book[x-2] put(temp) return result loop_series_code = f\"\"\" z = [loop_fibonacci_series(count_to)] \"\"\" import cProfile cProfile.run(loop_series_code) >>> 3757 function calls in 0.009 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.009 0.009 :1( ) 1 0.005 0.005 0.009 0.009 Fibonancci.py:86(loop_fibonacci_series) 1 0.001 0.001 0.001 0.001 Fibonancci.py:88( ) 1 0.001 0.001 0.001 0.001 Fibonancci.py:98( ) 1 0.000 0.000 0.009 0.009 {built-in method builtins.exec} 3750 0.002 0.000 0.002 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} 1 0.000 0.000 0.000 0.000 {method 'update' of 'dict' objects} You can see that this is even faster!","title":"Preallocating Memory"},{"location":"python/Optimising%20Python/#say-goodbye-to-itertoolscombinations","text":"Let say you need the combinations of some sort of arrangement as the input. Text Only 1 2 def some_func(x, y, z): pass The standard the to use itertools.combinations to do it. For example, Text Only 1 2 3 4 from itertools import combinations for x,y,z in combinations(X, Y, Z): print(some_func(x,y,z)) However this is unoptimised because x and y must reset in every iteration. Despite that say you are counting combinations of numbers. Text Only 1 000 001 010 011 ... You see the value in x rarely changed. This leads to the dicision that nested for loop is still the recommented way to do it right. Combinations: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def use_combinations(count_to): from itertools import combinations f = loop_fibonacci # from previous code result = [] put = result.append for x,y,z in combinations(range(count_to), r=3): # Let say we somehow need to do a little manipluation to the value. # Because x,y,z value reset everytime, you need to calculate this again and again. fx, fy, fz = f(x), f(y), f(z) put((fx, fy, fz)) return result import cProfile cProfile.run(\"use_combinations(100)\") >>> 646804 function calls in 13.517 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.036 0.036 13.516 13.516 <string>:1(<module>) 1 0.769 0.769 13.481 13.481 Fibonancci.py:147(use_combinations) 485100 12.622 0.000 12.622 0.000 Fibonancci.py:20(loop_fibonacci) 1 0.000 0.000 13.517 13.517 {built-in method builtins.exec} 161700 0.089 0.000 0.089 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Nested Loop: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def use_nest(count_to): X = range(count_to) f = loop_fibonacci result = [] put = result.append for x in (X): # Let say we somehow need to do a little manipluation to the value. # It will just stay until the next iteration, before that, never gonna changed. # Thus save us a significant amount of time. fx = f(x) for y in range(x+1, count_to): fy = f(y) for z in range(y+1, count_to): fz = f(z) put((fx, fy, fz)) import cProfile cProfile.run(\"use_nest(100)\") >>> 328454 function calls in 7.097 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.030 0.030 7.097 7.097 <string>:1(<module>) 1 0.413 0.413 7.067 7.067 Fibonancci.py:122(use_nest) 166750 6.565 0.000 6.565 0.000 Fibonancci.py:20(loop_fibonacci) 1 0.000 0.000 7.097 7.097 {built-in method builtins.exec} 161700 0.088 0.000 0.088 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Well, the time span speaks for itself.","title":"Say Goodbye To itertools.combinations"},{"location":"review_book/","text":"Book Review \u00b6 Mathematics \u00b6 Title Edition Author Pages Review URL Engineering Mathematics 8 K.A. Stroud, Dexter J. Booth 1180","title":"Book Review"},{"location":"review_book/#book-review","text":"","title":"Book Review"},{"location":"review_book/#mathematics","text":"Title Edition Author Pages Review URL Engineering Mathematics 8 K.A. Stroud, Dexter J. Booth 1180","title":"Mathematics"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/","text":"Engineering Mathematics by Booth and Stroud - A Pedagogic Approach Toward Mathematical Maturity \u00b6 I spended 1.5 month reading and working out this 1100-pages book: Title \u00b6 Engineering Mathematics by Booth and Stroud. Here is what I think about this book. Coverage \u00b6 The book has a broad coverage across a lot of topics. precalculus addition, multiplication, associativity, distributivity, commutativity, linearity identity, inverse bin, oct, dec, hex number system and their manipulations sin, cos, tan, cosec, sec, cotan, sinh, cosh, tanh, and their inverse binomial expansion complex number and e^ix = cos(x) + isin(x) complex trigonomatric functino(sin and sinh are connected!!) linear algebra vector, linearity, linear combination matrix, determinant Eigenvalue and eigenvector Hamilton-Caley theorem calculus limt (no delta epsilon theorem) derivative, partial derivative and their applications integral, multiple integral and theor applications first-order, second-order differential equation LaPalace Transform and n-order differential equation sequences and series, converge and diverge numerical methods such as the usage of binomial and taylor expansion in integration statics mean, mode, median deviation, standard variation Bernoulli distribution, Pisson distribution, and their relationship standard normal possibility distribution What made this book extrodinaly? \u00b6 real self-contained \u00b6 The authors put a great effort into the book to make it as pagmatic and pedagogic as possible. So far I have never seen a book can reach this level of completeness, namely, self-contained and pain-free. But this judgement might have a bias due to the fact that this is my second expose to calculus. And in fact in some topics the authors are just throwing equations to the readers without explaining them. I think real beginers might find confusion in those topics. Still, including those sections in the mist, the book as a whole no doubt reached a unpreccedented level of self-containness. How many of students in the world is suffering in the abyss of \"the proof is left as exercise\"? That is a awful attitude in writing a book, especially a textbook. First is because student have already paid the money for the tution, or the cost of the book, still, those unfriendly, selfish and greedy authors want more from the students. Second, this approach is proven not helpful at all and its existence should be elinminated. For further details, take a look at this 2010 research. Alfieri, L., Brooks, P. J., Aldrich, N. J., & Tenenbaum, H. R. (2011). Does discovery-based instruction enhance learning? Journal of Educational Psychology, 103(1), 1\u201318. Discovery learning approaches to education have recently come under scrutiny... The findings suggest that unassisted discovery does not benefit learners, whereas feedback, worked examples, scaffolding, and elicited explanations do. A mathematician has created a teaching method that\u2019s proving there\u2019s no such thing as a bad math student no-bullshit proofs \u00b6 Greatfully, there is no such do-your-exercise bullshit in this book. Proofs and answers are all worked out by the authors . Student can follow these learning material with ease. Also proofs provided are simple and intuitive as hell. Some not-so-important proof are completely omited from the text. Which avoid digress from the main storyline. This will be discussed later. learn through examples \u00b6 Unlike those exampleless math textbooks, this textbook is basically composited by a ton of worked out examples. Starting with some simple ones, then some variation of the patterns, and then introducing more advanced concept and skill through more examples. Usually 3 examples for 1 concept. The answers are all step-by-step guide. I believe that human learn better with examples rather than boring text and axioms. Just like researchs failed in making artifical intellegence in the early days, but then they gain a great success these days as soon as they realise that it is the matter of the volume of examples i.e. training data, and iterations. Most textbook failed at teaching anything but this book is different. barrier-free \u00b6 But I would argue that the examples and problems are a bit too easy. If you are pusuring competitive exams, this may not for you. But think of this, what is the point of making examples and problems insanely difficult to a beginer? Books for beginers should help student to build their confidence and attitude toware the subject instead of torturing. It is meaningless to make the learning curve so steep. It can only be a barrier instead of a ladder. You are doing so to keep people out from knowledge and keep the unknowledged and poverty. chapters are ordered structurally \u00b6 Obviously the authors sorted the chapters intentionally just like the my favorite mentioned above. I can see there is a clear dependence tree made behind the scene. In particular, You don't need to know integral before you do partital derivative. Also you need to know both integral and derivative to do differential equation. And there is another consideration: clustering the related topics so that reader will can carry on to more advance topic before they forget. This is the order of chapters after considering the dependence tree: derivative partial derivative integral multiple integral differential equation While other \"formal\" calculus is like: derivative integral differential equation partial derivative multiple integral differential equation This kind of ordering obviously did not account for the memory loss nature of human readers. And in fact this happens to me. I almost forget anything from the derivative while I was looking at partial derivate, after the lengthy chapter of integral and applications of integral. almost typo-free \u00b6 I worked out almost pages and the examples, found almost no typo. Except where placese should be \"cosecant\", are left empty. Mystery. What is lacking in the book? \u00b6 Obviously there are handful of advanced topics are absent from this book. Especiallly those you are able to find in other commersial university calculus textbook. rigious establishment of the concept \"limit\" and Delta-Epsilon-Theorem but I will argue that this is totally unnecessary since the concept of limit is easy, it is just the mathematical definition is written ugly. the fundamental theorem of calculus but the authurs does introduc it conceptually and without the name of it. I would say acceptible. My favorite \u00b6 The introduction to complex number and the following hyperbolic function are fantasic. First they introduce trigonometry function such as sin cos tan. Then complex number. After that there is the Taylor Expansion of sin cos. So reader will know that complex number can be expressed in the form of Text Only 1 r[ cos(x) + isin(x) ]. Next, they introduce the concept of add and even function. Gradually carry to the point that hyperbolic sine and cosine is the odd and even part of e^ix. This conneced complex number to hyperboic functions. Lastly, what if we do sinh(ix) instead of sinh(x)? After working out, turn out hyperbolic function with a complex number being inputed is normal trigonometry. The author spend a great effor to show me that Text Only 1 [trigonometry - complex number - hyperbolic function] are all connected. At the end I am shocked by this discovery. Now I feel I finally understand what a hyperbolic function is. This is a Ah-Ha moment that other formal calculus book fail to gave me. Summary \u00b6 Engineering Mathematic by Booth and Stroud is a epic unconventional book for you to learn and refresh the basics of college level mathematics. It covers a lot of topics and kindly provides insane amount of worked example for readers. This book is the corner stone in math pedagogy. No one can unsee this book after seeing it.","title":"Engineering Mathematics by Booth and Stroud - A Pedagogic Approach Toward Mathematical Maturity"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#engineering-mathematics-by-booth-and-stroud-a-pedagogic-approach-toward-mathematical-maturity","text":"I spended 1.5 month reading and working out this 1100-pages book:","title":"Engineering Mathematics by Booth and Stroud - A Pedagogic Approach Toward Mathematical Maturity"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#title","text":"Engineering Mathematics by Booth and Stroud. Here is what I think about this book.","title":"Title"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#coverage","text":"The book has a broad coverage across a lot of topics. precalculus addition, multiplication, associativity, distributivity, commutativity, linearity identity, inverse bin, oct, dec, hex number system and their manipulations sin, cos, tan, cosec, sec, cotan, sinh, cosh, tanh, and their inverse binomial expansion complex number and e^ix = cos(x) + isin(x) complex trigonomatric functino(sin and sinh are connected!!) linear algebra vector, linearity, linear combination matrix, determinant Eigenvalue and eigenvector Hamilton-Caley theorem calculus limt (no delta epsilon theorem) derivative, partial derivative and their applications integral, multiple integral and theor applications first-order, second-order differential equation LaPalace Transform and n-order differential equation sequences and series, converge and diverge numerical methods such as the usage of binomial and taylor expansion in integration statics mean, mode, median deviation, standard variation Bernoulli distribution, Pisson distribution, and their relationship standard normal possibility distribution","title":"Coverage"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#what-made-this-book-extrodinaly","text":"","title":"What made this book extrodinaly?"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#real-self-contained","text":"The authors put a great effort into the book to make it as pagmatic and pedagogic as possible. So far I have never seen a book can reach this level of completeness, namely, self-contained and pain-free. But this judgement might have a bias due to the fact that this is my second expose to calculus. And in fact in some topics the authors are just throwing equations to the readers without explaining them. I think real beginers might find confusion in those topics. Still, including those sections in the mist, the book as a whole no doubt reached a unpreccedented level of self-containness. How many of students in the world is suffering in the abyss of \"the proof is left as exercise\"? That is a awful attitude in writing a book, especially a textbook. First is because student have already paid the money for the tution, or the cost of the book, still, those unfriendly, selfish and greedy authors want more from the students. Second, this approach is proven not helpful at all and its existence should be elinminated. For further details, take a look at this 2010 research. Alfieri, L., Brooks, P. J., Aldrich, N. J., & Tenenbaum, H. R. (2011). Does discovery-based instruction enhance learning? Journal of Educational Psychology, 103(1), 1\u201318. Discovery learning approaches to education have recently come under scrutiny... The findings suggest that unassisted discovery does not benefit learners, whereas feedback, worked examples, scaffolding, and elicited explanations do. A mathematician has created a teaching method that\u2019s proving there\u2019s no such thing as a bad math student","title":"real self-contained"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#no-bullshit-proofs","text":"Greatfully, there is no such do-your-exercise bullshit in this book. Proofs and answers are all worked out by the authors . Student can follow these learning material with ease. Also proofs provided are simple and intuitive as hell. Some not-so-important proof are completely omited from the text. Which avoid digress from the main storyline. This will be discussed later.","title":"no-bullshit proofs"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#learn-through-examples","text":"Unlike those exampleless math textbooks, this textbook is basically composited by a ton of worked out examples. Starting with some simple ones, then some variation of the patterns, and then introducing more advanced concept and skill through more examples. Usually 3 examples for 1 concept. The answers are all step-by-step guide. I believe that human learn better with examples rather than boring text and axioms. Just like researchs failed in making artifical intellegence in the early days, but then they gain a great success these days as soon as they realise that it is the matter of the volume of examples i.e. training data, and iterations. Most textbook failed at teaching anything but this book is different.","title":"learn through examples"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#barrier-free","text":"But I would argue that the examples and problems are a bit too easy. If you are pusuring competitive exams, this may not for you. But think of this, what is the point of making examples and problems insanely difficult to a beginer? Books for beginers should help student to build their confidence and attitude toware the subject instead of torturing. It is meaningless to make the learning curve so steep. It can only be a barrier instead of a ladder. You are doing so to keep people out from knowledge and keep the unknowledged and poverty.","title":"barrier-free"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#chapters-are-ordered-structurally","text":"Obviously the authors sorted the chapters intentionally just like the my favorite mentioned above. I can see there is a clear dependence tree made behind the scene. In particular, You don't need to know integral before you do partital derivative. Also you need to know both integral and derivative to do differential equation. And there is another consideration: clustering the related topics so that reader will can carry on to more advance topic before they forget. This is the order of chapters after considering the dependence tree: derivative partial derivative integral multiple integral differential equation While other \"formal\" calculus is like: derivative integral differential equation partial derivative multiple integral differential equation This kind of ordering obviously did not account for the memory loss nature of human readers. And in fact this happens to me. I almost forget anything from the derivative while I was looking at partial derivate, after the lengthy chapter of integral and applications of integral.","title":"chapters are ordered structurally"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#almost-typo-free","text":"I worked out almost pages and the examples, found almost no typo. Except where placese should be \"cosecant\", are left empty. Mystery.","title":"almost typo-free"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#what-is-lacking-in-the-book","text":"Obviously there are handful of advanced topics are absent from this book. Especiallly those you are able to find in other commersial university calculus textbook. rigious establishment of the concept \"limit\" and Delta-Epsilon-Theorem but I will argue that this is totally unnecessary since the concept of limit is easy, it is just the mathematical definition is written ugly. the fundamental theorem of calculus but the authurs does introduc it conceptually and without the name of it. I would say acceptible.","title":"What is lacking in the book?"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#my-favorite","text":"The introduction to complex number and the following hyperbolic function are fantasic. First they introduce trigonometry function such as sin cos tan. Then complex number. After that there is the Taylor Expansion of sin cos. So reader will know that complex number can be expressed in the form of Text Only 1 r[ cos(x) + isin(x) ]. Next, they introduce the concept of add and even function. Gradually carry to the point that hyperbolic sine and cosine is the odd and even part of e^ix. This conneced complex number to hyperboic functions. Lastly, what if we do sinh(ix) instead of sinh(x)? After working out, turn out hyperbolic function with a complex number being inputed is normal trigonometry. The author spend a great effor to show me that Text Only 1 [trigonometry - complex number - hyperbolic function] are all connected. At the end I am shocked by this discovery. Now I feel I finally understand what a hyperbolic function is. This is a Ah-Ha moment that other formal calculus book fail to gave me.","title":"My favorite"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#summary","text":"Engineering Mathematic by Booth and Stroud is a epic unconventional book for you to learn and refresh the basics of college level mathematics. It covers a lot of topics and kindly provides insane amount of worked example for readers. This book is the corner stone in math pedagogy. No one can unsee this book after seeing it.","title":"Summary"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/","text":"\u8b80\u66f8\u5831\u544a\uff1a\u6467\u6bc0\u7d93\u6fdf\uff0c\u523b\u4e0d\u5bb9\u7de9 \u00b6 National Academy of Sciences. 2020. Climate Change: Evidence and Causes: Update 2020. Washington, DC: The National Academies Press. https://doi.org/10.17226/25733. \u6587\u79d1\u4ed4\u6700\u597d\u60f3\u770b\u5230\u7684\u8b49\u64da\u767c\u751f\u4e86\uff01\uff01\uff01\u90a3\u5c31\u662f\u8b49\u660e\u4e86\u4eba\u985e\u4e26\u6c92\u6709\u4ee4\u4e16\u754c\u8b8a\u5f97\u66f4\u597d\u7684\u9019\u500b\u4e8b\u5be6\uff0c\u76f4\u63a5\u64bc\u52d5\u4e86\u4eba\u6587\u5b78\u79d1\u7684\u5b97\u6559\u6839\u57fa\u3002 \u9019\u662f\u7f8e\u570b\u570b\u5bb6\u79d1\u5b78\u9662\u806f\u540c\u82f1\u570b\u7687\u5bb6\u5b78\u6703\u5171\u540c\u51fa\u7248\u768420\u9801\u5c0f\u518a\u5b50\uff0c\u5716\u6587\u4e26\u8302\u5730\u89e3\u91cb\u4e86\u4eba\u70ba\u6c23\u5019\u8b8a\u5316\u7684\u524d\u56e0\u5f8c\u679c\uff0c\u7576\u4e2d\u53cd\u99c1\u4e86\u5f88\u591a\u7591\u60d1\u3002 1. \u5168\u7403\u6696\u5316\u662f\u5426\u7576\u771f\uff1f \u00b6 \u81ea1850\u5e74\u958b\u59cb\u7684\u6c23\u6eab\u76e3\u5bdf\u6578\u64da\u6307\u51fa\u4e86\u660e\u78ba\u7684\u6c23\u6eab\u4e0a\u6607\u30021950\u5e74\u4ee3\u81ea\u4eca\u7684\u5e73\u5747\u6c23\u6eab\u5df2\u7d93\u4e0a\u5347\u4e86\u651d\u6c0f1.0\u5ea6\u3002\u5168\u7403\u6696\u5316\u5df2\u662f\u7121\u5bb9\u7f6e\u7591\u3002 2. \u4f60\u9ede\u77e5\u4f60\u4eba\u70ba\u5168\u7403\u6696\u5316\uff1f\u8b1b\u5c31\u4fc2\uff1f \u00b6 \u79d1\u5b78\u5bb6\u85c9\u7531\u7269\u7406\u6cd5\u5247\u3001\u6c23\u5019\u6a21\u578b\u4ee5\u53ca\u89c0\u5bdf\u6578\u64da\u7b49\u5f97\u4ee5\u78ba\u8a8d\u5728\u5168\u7403\u6696\u5316\u4e00\u4e8b\u4e4b\u4e0a\uff0c\u4eba\u70ba\u56e0\u7d20\u4f54\u4e86\u5f88\u91cd\u8981\u7684\u90e8\u4efd\u3002 \u81ea19\u4e16\u7d00\u4e2d\u8449\uff0c\u79d1\u5b78\u5bb6\u5df2\u7d93\u77e5\u9053CO2\u70ba\u6eab\u5ba4\u6c23\u9ad4\u3002\u5728\u76f4\u63a5\u4ee5\u53ca\u9593\u63a5\u5730\u6e2c\u91cf\u51b0\u5c64\u4e2d\u7684CO2\u542b\u91cf\uff0c\u79d1\u5b78\u5bb6\u5f97\u77e5\u5f9e1800\u5e74\u81f3\u4eca\u5927\u6c23\u4e2dCO2\u6fc3\u5ea6\u4e0a\u5347\u4e8640%\u3002\u540c\u4f4d\u7d20\u7684\u5206\u6790\u986f\u793a\u662f\u9019\u662f\u4eba\u70ba\u7684\u3002 \u7531\u81ea\u7136\u767c\u751f\u6703\u5c0e\u81f4\u6c23\u5019\u8b8a\u5316\u7684\u592a\u967d\u529f\u7387\u3001\u706b\u5c71\u7206\u767c\u3001\u62c9\u59ae\u5a1c\u73fe\u8c61\u7b49\u7b49\uff0c\u90fd\u7121\u6cd5\u89e3\u91cb\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u73fe\u8c61\u3002 3. CO2\u4e00\u5411\u90fd\u97ff\u5927\u6c23\u5165\u9762\uff0c\u95dc\u6211\u54a9\u4e8b\uff1f \u00b6 \u751f\u7269\u6b7b\u7269\u90fd\u727d\u6d89\u5728CO2\u7684\u751f\u6210\u548c\u56fa\u5b9a\u4e4b\u4e0a\u3002\u706b\u5c71\u7206\u767c\u770b\u8d77\u4f86\u4f54\u5f88\u5927\u4efd\u984d\uff0c\u4f46\u6bd4\u8d77\u5316\u77f3\u71c3\u6599\u7684\u6392\u653e\uff0c\u539f\u4f86\u706b\u5c71\u7206\u767c\u53ea\u67091%\u7684\u898f\u6a21\u3002 \u5728\u81ea\u7136\u754c\uff0c\u672c\u8eabCO2\u5c31\u6703\u4ee5\u751f\u5316\u6a5f\u5236\u4f86\u8abf\u7bc0\uff0c\u4f8b\u5982\u6709\u5b54\u87f2\u5438\u53d6CO2\u4f86\u5f62\u6210\u78b3\u9178\u9223\u5916\u6bbc\uff0c\u5f9e\u9762\u300c\u56fa\u78b3\u300d\u3002 \u4f46\u4e8b\u5be6\u986f\u793aCO2\u6fc3\u5ea6\u4e0a\u5347\u7684\u5927\u90e8\u4efd\u90fd\u662f\u4f86\u81ea\u65bc1970\u5e74\u4e4b\u5f8c\u7684\u6642\u671f\uff0c\u6b63\u6b63\u4e5f\u662f\u5168\u7403\u80fd\u6e90\u6d88\u8017\u6025\u5347\u7684\u6642\u671f\u3002\u89c0\u5bdf\u7576\u4e2dC13 C14\u7684\u540c\u4f4d\u7d20\u6bd4\u4f8b\uff0c\u4ee5\u53ca\u5927\u6c23\u4e2d\u6c27\u6c23\u542b\u91cf\u7684\u4e0b\u964d\uff0c\u79d1\u5b78\u5bb6\u53ef\u4ee5\u80af\u5b9a\u90a3\u4e9bCO2\u90fd\u4e0d\u662f\u4f86\u81ea\u65bc\u81ea\u7136\u754c\u7684\u3002 \u5728\u6975\u5730\u51b0\u5c64\u62bd\u82af\u7684\u5316\u9a5f\u7d50\u679c\u66f4\u52a0\u986f\u793a\uff0c\u73fe\u5728\u7684CO2\u6fc3\u5ea6\u70ba\u904e\u53bb80\u842c\u5e74\u9593\u6700\u9ad8\u7684\u6c34\u5e73\u3002 4. \u592a\u967d\u5728\u5168\u7403\u6696\u5316\u4e0a\u626e\u6f14\u4e00\u500b\u91cd\u8981\u89d2\u8272\u3002 \u00b6 \u592a\u967d\u8f38\u51fa\u529f\u7387\u6709\u4e00\u500b\u4ee511\u5e74\u70ba\u671f\u7684\u8d77\u4f0f\uff0c\u4f46\u90fd\u4e0d\u8db3\u4ee5\u89e3\u91cb\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u3002\u56e0\u70ba\u592a\u967d\u8f38\u51fa\u7684\u8d77\u4f0f\u5341\u5206\u7a69\u5b9a\uff0c\u5c31\u4ee5\u904e\u53bb\u5e7e\u5341\u5e74\u79d1\u5b78\u5bb6\u4ee5\u885b\u661f\u76f4\u63a5\u89c0\u5bdf\u592a\u967d\u6240\u7d2f\u7a4d\u7684\u6578\u64da\uff0c\u90fd\u7121\u767c\u73fe\u6709\u7dda\u6027\u5411\u4e0a\u7684\u6301\u7e8c\u589e\u52a0\u8da8\u52e2\u3002\u66f4\u4e0d\u7528\u8aaa\u7684\u662f\uff0c\u90a3\u529f\u7387\u8d77\u4f0f\u7684\u9ad8\u4f4e\u53ea\u67090.1%\u5dee\u8ddd\u3002 \u800c\u64da\u79d1\u5b78\u5bb6\u5c0d\u5927\u6c23\u7684\u4e86\u89e3\uff0c\u5982\u679c\u592a\u967d\u529f\u7387\u5c0e\u81f4\u5168\u7403\u6696\u5316\u7684\u8a71\uff0c\u5e73\u6d41\u5c64\u4ee5\u4e0a\u6574\u9ad4\u7684\u5927\u6c23\u6eab\u5ea6\u4e00\u5b9a\u6703\u63d0\u9ad8\u3002\u4f46\u73fe\u5728\u4e8b\u5be6\u662f\u53ea\u6709\u5c0d\u6d41\u5c64\u3001\u5927\u6c23\u6700\u5e95\u5c64\u7684\u6eab\u5ea6\u63d0\u9ad8\u800c\u5df2\uff0c\u9019\u73fe\u8c61\u6b63\u6b63\u543b\u5408\u4e86\u4eba\u70ba\u5168\u7403\u6696\u5316\u7684\u300c\u6307\u7d0b\u300d\u3002 5. \u6c23\u5019\u5728\u5730\u7403\u6b77\u53f2\u4e0a\u4e00\u76f4\u90fd\u5728\u8b8a\u5316\uff0c\u6709\u54a9\u503c\u5f97\u95dc\u6ce8\uff1f \u00b6 \u91cd\u9ede\u4e0d\u662f\u300c\u6703\u300d\u8b8a\u5316\uff0c\u800c\u662f\u8b8a\u5316\u7684\u300c\u901f\u5ea6\u300d\u3002\u73fe\u5728\u5730\u7403\u6b63\u8655\u65bc\u51b0\u6cb3\u6642\u671f\uff0c\u7576\u523b\u662f10\u842c\u5e74\u5bd2\u51b7\u671f\u904e\u5f8c\u77ed\u66ab\u76841\u842c\u5e74\u9593\u51b0\u671f\uff0c\u4f46\u4e0d\u4ee3\u8868\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u7684\u6b63\u5e38\u3002\u9593\u51b0\u671f\u524d\u5f8c\u7684\u5e73\u5747\u6c23\u6eab\u6709\u651d\u6c0f4\u81f35\u5ea6\u843d\u5dee\uff0c\u9019\u662f\u57281\u842c\u5e74\u9593\u7684\u8b8a\u5316\u3002\u4f46\u73fe\u5728\u5de5\u696d\u9769\u547d\u5f8c\u7684200\u5e74\u5c31\u5df2\u7d93\u4e0a\u5347\u4e861\u5ea6\uff0cCO2\u6fc3\u5ea6\u4ea6\u4e86\u589e\u52a040%\uff0c\u9019\u7d55\u4e0d\u300c\u81ea\u7136\u300d\u3002 \u6975\u5730\u51b0\u5c64\u62bd\u82af\u7d50\u679c\u986f\u793a\uff0c\u904e\u53bb80\u842c\u5e74\u9593\u7684CO2\u6fc3\u5ea6\u90fd\u7dad\u6301\u5728170\u5230300ppm\u4e4b\u9593\uff0c\u7136\u800c\u4eba\u985e\u53ea\u7528\u4e86200\u5e74\u5c31\u628a\u5b83\u63d0\u5347\u81f3400ppm\u4e86\u3002\u7e31\u4f7f500\u842c\u5e74\u524d\u5730\u7403\u7684CO2\u6fc3\u5ea6\u66fe\u70ba1000ppm\uff0c\u4f46\u7576\u6642\u7684\u5e73\u5747\u6c23\u6eab\u6bd4\u73fe\u5728\u9ad810\u5ea6\uff0c\u6d77\u5e73\u9762\u9ad860\u7c73\uff0c\u4f60\u78ba\u5b9a\u80fd\u5920\u5b58\u6d3b\u5728\u9019\u7a2e\u6c23\u5019\u55ce\uff1f 6. \u7269\u6975\u5fc5\u53cd\uff0c\u66f4\u591a\u7684CO2\u4e0d\u4ee3\u8868\u66f4\u9ad8\u7684\u6c23\u6eab\u3002 \u00b6 \u5b8c\u5168\u8352\u8b2c\u3002\u6eab\u5ba4\u6c23\u9ad4\u5438\u6536\u7d05\u5916\u7dda\u4f86\u5132\u71b1\uff0c\u66f4\u591a\u7684\u6eab\u5ba4\u6c23\u9ad4\u53ea\u662f\u4ee3\u8868\u4e86\u5b83\u80fd\u5920\u5438\u66f4\u591a\u71b1\u3002 7. \u51ac\u5929\u4ecd\u7136\u5f88\u51cd\uff0c\u8aaa\u597d\u7684\u5168\u7403\u6696\u5316\u5462\uff1f \u00b6 \u6c23\u5019\u8b8a\u5316\u4e0d\u55ae\u6b62\u662f\u5e73\u5747\u6c23\u6eab\uff0c\u4ea6\u6709\u6539\u8b8a\u4e86\u5927\u6c23\u5faa\u74b0\uff0c\u56e0\u6b64\u5e36\u4f86\u4e86\u66f4\u591a\u7684\u6975\u7aef\u6c23\u5019\uff0c\u4f8b\u5982\u5bd2\u6d41\u3001\u71b1\u6d6a\u3001\u66b4\u96e8\u7b49\u7b49\u3002 \u5e73\u5747\u6c23\u6eab\u4e0a\u5347\uff0c\u4ee4\u5927\u6c23\u6c34\u84b8\u6c23\u7684\u6700\u5927\u5bb9\u91cf\u63d0\u9ad8\uff0c\u56e0\u6b64\u66b4\u96e8\u548c\u53f0\u98a8\u4e4b\u985e\u7684\u6c23\u8c61\u6703\u66f4\u5e38\u898b\u3002 8. \u7531\u9019\u4e00\u523b\u958b\u59cb\u96f6\u6392\u653e\uff0c\u53ef\u80fd\u626d\u8f49\u5c40\u9762\u55ce\uff1f \u00b6 \u4e0d\u53ef\u80fd\u3002\u56e0\u70ba\u81ea\u7136\u754c\u7684CO2\u5faa\u74b0\u662f\u6975\u5176\u7de9\u6162\u7684\u904e\u7a0b\uff0c\u5373\u4f7f2020\u5e74\u5f8c\u5168\u4e16\u754c\u96f6\u6392\u653e\uff0c\u4ea6\u9700\u8981\u5e7e\u5343\u5e74\u7684\u6642\u9593\u624d\u56de\u5230\u5de5\u696d\u9769\u547d\u4e4b\u524d\u7684\u6c34\u5e73\u3002 \u4f46\u5982\u679c\u79d1\u6280\u767c\u5c55\u5230\u80fd\u5920\u8ca0\u6392\u653e\u7684\u8a71\uff0c\u6216\u8005\u4e5f\u9700\u8981300\u81f31000\u5e74\u3002 \u4f38\u5ef6\u95b1\u8b80\uff1a \u00b6 \u79d1\u5b78\u5bb6\u8b66\u544a\u6240\u8b02\u300c\u53ef\u6301\u7e8c\u767c\u5c55\u300d\u53ea\u662f\u81ea\u6b3a\u6b3a\u4eba\uff0c\u4eba\u985e\u7d55\u4e0d\u80fd\u5920\u518d\u300c\u767c\u5c55\u300d\u4e0b\u53bb \u7d93\u6fdf\u589e\u9577\u6210\u70ba\u4e86\u7d93\u6fdf\u5b78\u7684\u6700\u9ad8\u4fe1\u689d\uff0c\u6b64\u8207\u74b0\u4fdd\u7406\u5ff5\u7d50\u5408\u800c\u6210\u300c\u53ef\u6301\u7e8c\u767c\u5c55\u300d\u3002 \u7136\u800c\u7121\u8ad6\u5982\u4f55\uff0c\u9019\u500b\u76ee\u6a19\u7d42\u7a76\u53ea\u662f\u8352\u8b2c\u7684\uff0c\u56e0\u70ba\u6700\u7d42\u8a08\u7b97\u4e0b\u4f86\u7684\u7e3d\u6392\u653e\u4e26\u4e0d\u6703\u6e1b\u5c11\uff0c\u8207\u6b64\u540c\u6642\u79d1\u6280\u767c\u5c55\u8ffd\u4e0d\u4e0a\u7d93\u6fdf\u589e\u9577\u7684\u901f\u5ea6\uff0c\u6c23\u5019\u5e73\u8861\u5fc5\u4ee5\u5d29\u6f70\u3002 \u771f\u6b63\u7684\u53ef\u6301\u7e8c\uff0c\u5c31\u662f\u7576\u4eba\u985e\u5fb9\u5e95\u653e\u68c4\u300c\u589e\u9577\u300d\u3001\u300c\u767c\u5c55\u300d\u4e4b\u6642\u3002 Wiedmann, T., Lenzen, M., Key\u00dfer, L.T. et al. Scientists\u2019 warning on affluence. Nat Commun 11, 3107 (2020). https://doi.org/10.1038/s41467-020-16941-y","title":"\u8b80\u66f8\u5831\u544a\uff1a\u6467\u6bc0\u7d93\u6fdf\uff0c\u523b\u4e0d\u5bb9\u7de9"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#_1","text":"National Academy of Sciences. 2020. Climate Change: Evidence and Causes: Update 2020. Washington, DC: The National Academies Press. https://doi.org/10.17226/25733. \u6587\u79d1\u4ed4\u6700\u597d\u60f3\u770b\u5230\u7684\u8b49\u64da\u767c\u751f\u4e86\uff01\uff01\uff01\u90a3\u5c31\u662f\u8b49\u660e\u4e86\u4eba\u985e\u4e26\u6c92\u6709\u4ee4\u4e16\u754c\u8b8a\u5f97\u66f4\u597d\u7684\u9019\u500b\u4e8b\u5be6\uff0c\u76f4\u63a5\u64bc\u52d5\u4e86\u4eba\u6587\u5b78\u79d1\u7684\u5b97\u6559\u6839\u57fa\u3002 \u9019\u662f\u7f8e\u570b\u570b\u5bb6\u79d1\u5b78\u9662\u806f\u540c\u82f1\u570b\u7687\u5bb6\u5b78\u6703\u5171\u540c\u51fa\u7248\u768420\u9801\u5c0f\u518a\u5b50\uff0c\u5716\u6587\u4e26\u8302\u5730\u89e3\u91cb\u4e86\u4eba\u70ba\u6c23\u5019\u8b8a\u5316\u7684\u524d\u56e0\u5f8c\u679c\uff0c\u7576\u4e2d\u53cd\u99c1\u4e86\u5f88\u591a\u7591\u60d1\u3002","title":"\u8b80\u66f8\u5831\u544a\uff1a\u6467\u6bc0\u7d93\u6fdf\uff0c\u523b\u4e0d\u5bb9\u7de9"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#1","text":"\u81ea1850\u5e74\u958b\u59cb\u7684\u6c23\u6eab\u76e3\u5bdf\u6578\u64da\u6307\u51fa\u4e86\u660e\u78ba\u7684\u6c23\u6eab\u4e0a\u6607\u30021950\u5e74\u4ee3\u81ea\u4eca\u7684\u5e73\u5747\u6c23\u6eab\u5df2\u7d93\u4e0a\u5347\u4e86\u651d\u6c0f1.0\u5ea6\u3002\u5168\u7403\u6696\u5316\u5df2\u662f\u7121\u5bb9\u7f6e\u7591\u3002","title":"1. \u5168\u7403\u6696\u5316\u662f\u5426\u7576\u771f\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#2","text":"\u79d1\u5b78\u5bb6\u85c9\u7531\u7269\u7406\u6cd5\u5247\u3001\u6c23\u5019\u6a21\u578b\u4ee5\u53ca\u89c0\u5bdf\u6578\u64da\u7b49\u5f97\u4ee5\u78ba\u8a8d\u5728\u5168\u7403\u6696\u5316\u4e00\u4e8b\u4e4b\u4e0a\uff0c\u4eba\u70ba\u56e0\u7d20\u4f54\u4e86\u5f88\u91cd\u8981\u7684\u90e8\u4efd\u3002 \u81ea19\u4e16\u7d00\u4e2d\u8449\uff0c\u79d1\u5b78\u5bb6\u5df2\u7d93\u77e5\u9053CO2\u70ba\u6eab\u5ba4\u6c23\u9ad4\u3002\u5728\u76f4\u63a5\u4ee5\u53ca\u9593\u63a5\u5730\u6e2c\u91cf\u51b0\u5c64\u4e2d\u7684CO2\u542b\u91cf\uff0c\u79d1\u5b78\u5bb6\u5f97\u77e5\u5f9e1800\u5e74\u81f3\u4eca\u5927\u6c23\u4e2dCO2\u6fc3\u5ea6\u4e0a\u5347\u4e8640%\u3002\u540c\u4f4d\u7d20\u7684\u5206\u6790\u986f\u793a\u662f\u9019\u662f\u4eba\u70ba\u7684\u3002 \u7531\u81ea\u7136\u767c\u751f\u6703\u5c0e\u81f4\u6c23\u5019\u8b8a\u5316\u7684\u592a\u967d\u529f\u7387\u3001\u706b\u5c71\u7206\u767c\u3001\u62c9\u59ae\u5a1c\u73fe\u8c61\u7b49\u7b49\uff0c\u90fd\u7121\u6cd5\u89e3\u91cb\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u73fe\u8c61\u3002","title":"2. \u4f60\u9ede\u77e5\u4f60\u4eba\u70ba\u5168\u7403\u6696\u5316\uff1f\u8b1b\u5c31\u4fc2\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#3-co2","text":"\u751f\u7269\u6b7b\u7269\u90fd\u727d\u6d89\u5728CO2\u7684\u751f\u6210\u548c\u56fa\u5b9a\u4e4b\u4e0a\u3002\u706b\u5c71\u7206\u767c\u770b\u8d77\u4f86\u4f54\u5f88\u5927\u4efd\u984d\uff0c\u4f46\u6bd4\u8d77\u5316\u77f3\u71c3\u6599\u7684\u6392\u653e\uff0c\u539f\u4f86\u706b\u5c71\u7206\u767c\u53ea\u67091%\u7684\u898f\u6a21\u3002 \u5728\u81ea\u7136\u754c\uff0c\u672c\u8eabCO2\u5c31\u6703\u4ee5\u751f\u5316\u6a5f\u5236\u4f86\u8abf\u7bc0\uff0c\u4f8b\u5982\u6709\u5b54\u87f2\u5438\u53d6CO2\u4f86\u5f62\u6210\u78b3\u9178\u9223\u5916\u6bbc\uff0c\u5f9e\u9762\u300c\u56fa\u78b3\u300d\u3002 \u4f46\u4e8b\u5be6\u986f\u793aCO2\u6fc3\u5ea6\u4e0a\u5347\u7684\u5927\u90e8\u4efd\u90fd\u662f\u4f86\u81ea\u65bc1970\u5e74\u4e4b\u5f8c\u7684\u6642\u671f\uff0c\u6b63\u6b63\u4e5f\u662f\u5168\u7403\u80fd\u6e90\u6d88\u8017\u6025\u5347\u7684\u6642\u671f\u3002\u89c0\u5bdf\u7576\u4e2dC13 C14\u7684\u540c\u4f4d\u7d20\u6bd4\u4f8b\uff0c\u4ee5\u53ca\u5927\u6c23\u4e2d\u6c27\u6c23\u542b\u91cf\u7684\u4e0b\u964d\uff0c\u79d1\u5b78\u5bb6\u53ef\u4ee5\u80af\u5b9a\u90a3\u4e9bCO2\u90fd\u4e0d\u662f\u4f86\u81ea\u65bc\u81ea\u7136\u754c\u7684\u3002 \u5728\u6975\u5730\u51b0\u5c64\u62bd\u82af\u7684\u5316\u9a5f\u7d50\u679c\u66f4\u52a0\u986f\u793a\uff0c\u73fe\u5728\u7684CO2\u6fc3\u5ea6\u70ba\u904e\u53bb80\u842c\u5e74\u9593\u6700\u9ad8\u7684\u6c34\u5e73\u3002","title":"3. CO2\u4e00\u5411\u90fd\u97ff\u5927\u6c23\u5165\u9762\uff0c\u95dc\u6211\u54a9\u4e8b\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#4","text":"\u592a\u967d\u8f38\u51fa\u529f\u7387\u6709\u4e00\u500b\u4ee511\u5e74\u70ba\u671f\u7684\u8d77\u4f0f\uff0c\u4f46\u90fd\u4e0d\u8db3\u4ee5\u89e3\u91cb\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u3002\u56e0\u70ba\u592a\u967d\u8f38\u51fa\u7684\u8d77\u4f0f\u5341\u5206\u7a69\u5b9a\uff0c\u5c31\u4ee5\u904e\u53bb\u5e7e\u5341\u5e74\u79d1\u5b78\u5bb6\u4ee5\u885b\u661f\u76f4\u63a5\u89c0\u5bdf\u592a\u967d\u6240\u7d2f\u7a4d\u7684\u6578\u64da\uff0c\u90fd\u7121\u767c\u73fe\u6709\u7dda\u6027\u5411\u4e0a\u7684\u6301\u7e8c\u589e\u52a0\u8da8\u52e2\u3002\u66f4\u4e0d\u7528\u8aaa\u7684\u662f\uff0c\u90a3\u529f\u7387\u8d77\u4f0f\u7684\u9ad8\u4f4e\u53ea\u67090.1%\u5dee\u8ddd\u3002 \u800c\u64da\u79d1\u5b78\u5bb6\u5c0d\u5927\u6c23\u7684\u4e86\u89e3\uff0c\u5982\u679c\u592a\u967d\u529f\u7387\u5c0e\u81f4\u5168\u7403\u6696\u5316\u7684\u8a71\uff0c\u5e73\u6d41\u5c64\u4ee5\u4e0a\u6574\u9ad4\u7684\u5927\u6c23\u6eab\u5ea6\u4e00\u5b9a\u6703\u63d0\u9ad8\u3002\u4f46\u73fe\u5728\u4e8b\u5be6\u662f\u53ea\u6709\u5c0d\u6d41\u5c64\u3001\u5927\u6c23\u6700\u5e95\u5c64\u7684\u6eab\u5ea6\u63d0\u9ad8\u800c\u5df2\uff0c\u9019\u73fe\u8c61\u6b63\u6b63\u543b\u5408\u4e86\u4eba\u70ba\u5168\u7403\u6696\u5316\u7684\u300c\u6307\u7d0b\u300d\u3002","title":"4. \u592a\u967d\u5728\u5168\u7403\u6696\u5316\u4e0a\u626e\u6f14\u4e00\u500b\u91cd\u8981\u89d2\u8272\u3002"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#5","text":"\u91cd\u9ede\u4e0d\u662f\u300c\u6703\u300d\u8b8a\u5316\uff0c\u800c\u662f\u8b8a\u5316\u7684\u300c\u901f\u5ea6\u300d\u3002\u73fe\u5728\u5730\u7403\u6b63\u8655\u65bc\u51b0\u6cb3\u6642\u671f\uff0c\u7576\u523b\u662f10\u842c\u5e74\u5bd2\u51b7\u671f\u904e\u5f8c\u77ed\u66ab\u76841\u842c\u5e74\u9593\u51b0\u671f\uff0c\u4f46\u4e0d\u4ee3\u8868\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u7684\u6b63\u5e38\u3002\u9593\u51b0\u671f\u524d\u5f8c\u7684\u5e73\u5747\u6c23\u6eab\u6709\u651d\u6c0f4\u81f35\u5ea6\u843d\u5dee\uff0c\u9019\u662f\u57281\u842c\u5e74\u9593\u7684\u8b8a\u5316\u3002\u4f46\u73fe\u5728\u5de5\u696d\u9769\u547d\u5f8c\u7684200\u5e74\u5c31\u5df2\u7d93\u4e0a\u5347\u4e861\u5ea6\uff0cCO2\u6fc3\u5ea6\u4ea6\u4e86\u589e\u52a040%\uff0c\u9019\u7d55\u4e0d\u300c\u81ea\u7136\u300d\u3002 \u6975\u5730\u51b0\u5c64\u62bd\u82af\u7d50\u679c\u986f\u793a\uff0c\u904e\u53bb80\u842c\u5e74\u9593\u7684CO2\u6fc3\u5ea6\u90fd\u7dad\u6301\u5728170\u5230300ppm\u4e4b\u9593\uff0c\u7136\u800c\u4eba\u985e\u53ea\u7528\u4e86200\u5e74\u5c31\u628a\u5b83\u63d0\u5347\u81f3400ppm\u4e86\u3002\u7e31\u4f7f500\u842c\u5e74\u524d\u5730\u7403\u7684CO2\u6fc3\u5ea6\u66fe\u70ba1000ppm\uff0c\u4f46\u7576\u6642\u7684\u5e73\u5747\u6c23\u6eab\u6bd4\u73fe\u5728\u9ad810\u5ea6\uff0c\u6d77\u5e73\u9762\u9ad860\u7c73\uff0c\u4f60\u78ba\u5b9a\u80fd\u5920\u5b58\u6d3b\u5728\u9019\u7a2e\u6c23\u5019\u55ce\uff1f","title":"5. \u6c23\u5019\u5728\u5730\u7403\u6b77\u53f2\u4e0a\u4e00\u76f4\u90fd\u5728\u8b8a\u5316\uff0c\u6709\u54a9\u503c\u5f97\u95dc\u6ce8\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#6-co2","text":"\u5b8c\u5168\u8352\u8b2c\u3002\u6eab\u5ba4\u6c23\u9ad4\u5438\u6536\u7d05\u5916\u7dda\u4f86\u5132\u71b1\uff0c\u66f4\u591a\u7684\u6eab\u5ba4\u6c23\u9ad4\u53ea\u662f\u4ee3\u8868\u4e86\u5b83\u80fd\u5920\u5438\u66f4\u591a\u71b1\u3002","title":"6. \u7269\u6975\u5fc5\u53cd\uff0c\u66f4\u591a\u7684CO2\u4e0d\u4ee3\u8868\u66f4\u9ad8\u7684\u6c23\u6eab\u3002"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#7","text":"\u6c23\u5019\u8b8a\u5316\u4e0d\u55ae\u6b62\u662f\u5e73\u5747\u6c23\u6eab\uff0c\u4ea6\u6709\u6539\u8b8a\u4e86\u5927\u6c23\u5faa\u74b0\uff0c\u56e0\u6b64\u5e36\u4f86\u4e86\u66f4\u591a\u7684\u6975\u7aef\u6c23\u5019\uff0c\u4f8b\u5982\u5bd2\u6d41\u3001\u71b1\u6d6a\u3001\u66b4\u96e8\u7b49\u7b49\u3002 \u5e73\u5747\u6c23\u6eab\u4e0a\u5347\uff0c\u4ee4\u5927\u6c23\u6c34\u84b8\u6c23\u7684\u6700\u5927\u5bb9\u91cf\u63d0\u9ad8\uff0c\u56e0\u6b64\u66b4\u96e8\u548c\u53f0\u98a8\u4e4b\u985e\u7684\u6c23\u8c61\u6703\u66f4\u5e38\u898b\u3002","title":"7. \u51ac\u5929\u4ecd\u7136\u5f88\u51cd\uff0c\u8aaa\u597d\u7684\u5168\u7403\u6696\u5316\u5462\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#8","text":"\u4e0d\u53ef\u80fd\u3002\u56e0\u70ba\u81ea\u7136\u754c\u7684CO2\u5faa\u74b0\u662f\u6975\u5176\u7de9\u6162\u7684\u904e\u7a0b\uff0c\u5373\u4f7f2020\u5e74\u5f8c\u5168\u4e16\u754c\u96f6\u6392\u653e\uff0c\u4ea6\u9700\u8981\u5e7e\u5343\u5e74\u7684\u6642\u9593\u624d\u56de\u5230\u5de5\u696d\u9769\u547d\u4e4b\u524d\u7684\u6c34\u5e73\u3002 \u4f46\u5982\u679c\u79d1\u6280\u767c\u5c55\u5230\u80fd\u5920\u8ca0\u6392\u653e\u7684\u8a71\uff0c\u6216\u8005\u4e5f\u9700\u8981300\u81f31000\u5e74\u3002","title":"8. \u7531\u9019\u4e00\u523b\u958b\u59cb\u96f6\u6392\u653e\uff0c\u53ef\u80fd\u626d\u8f49\u5c40\u9762\u55ce\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#_2","text":"\u79d1\u5b78\u5bb6\u8b66\u544a\u6240\u8b02\u300c\u53ef\u6301\u7e8c\u767c\u5c55\u300d\u53ea\u662f\u81ea\u6b3a\u6b3a\u4eba\uff0c\u4eba\u985e\u7d55\u4e0d\u80fd\u5920\u518d\u300c\u767c\u5c55\u300d\u4e0b\u53bb \u7d93\u6fdf\u589e\u9577\u6210\u70ba\u4e86\u7d93\u6fdf\u5b78\u7684\u6700\u9ad8\u4fe1\u689d\uff0c\u6b64\u8207\u74b0\u4fdd\u7406\u5ff5\u7d50\u5408\u800c\u6210\u300c\u53ef\u6301\u7e8c\u767c\u5c55\u300d\u3002 \u7136\u800c\u7121\u8ad6\u5982\u4f55\uff0c\u9019\u500b\u76ee\u6a19\u7d42\u7a76\u53ea\u662f\u8352\u8b2c\u7684\uff0c\u56e0\u70ba\u6700\u7d42\u8a08\u7b97\u4e0b\u4f86\u7684\u7e3d\u6392\u653e\u4e26\u4e0d\u6703\u6e1b\u5c11\uff0c\u8207\u6b64\u540c\u6642\u79d1\u6280\u767c\u5c55\u8ffd\u4e0d\u4e0a\u7d93\u6fdf\u589e\u9577\u7684\u901f\u5ea6\uff0c\u6c23\u5019\u5e73\u8861\u5fc5\u4ee5\u5d29\u6f70\u3002 \u771f\u6b63\u7684\u53ef\u6301\u7e8c\uff0c\u5c31\u662f\u7576\u4eba\u985e\u5fb9\u5e95\u653e\u68c4\u300c\u589e\u9577\u300d\u3001\u300c\u767c\u5c55\u300d\u4e4b\u6642\u3002 Wiedmann, T., Lenzen, M., Key\u00dfer, L.T. et al. Scientists\u2019 warning on affluence. Nat Commun 11, 3107 (2020). https://doi.org/10.1038/s41467-020-16941-y","title":"\u4f38\u5ef6\u95b1\u8b80\uff1a"},{"location":"review_book/invitation%20to%20computer%20science/","text":"\u8b80\u66f8\u5831\u544a\uff1a\u96fb\u8166\u79d1\u5b78\u5165\u9580 \u00b6 Invitation to Computer Science https://www.cengage.co.uk/books/9781337561914/ \u9019\u672c\u66f8\u662f\u7f8e\u570b\u5927\u5b78\u7684\u96fb\u8166\u79d1\u5b78\u7684\u5165\u9580\u8ab2\u7a0b\u6559\u79d1\u66f8\uff0c\u7a0b\u5ea6\u8f03\u6dfa\uff0c\u8986\u84cb\u6975\u5ee3\u3002\u7531\u8a08\u7b97\u6a5f\u6b77\u53f2\u958b\u59cb\u8b1b\uff0c\u8b1b\u5230\u6f14\u7b97\u6cd5algorithm\u8a2d\u8a08\u3001\u96fb\u8166\u786c\u4ef6\u67b6\u69cb\u3001\u8edf\u4ef6\u67b6\u69cb\u548c\u958b\u767c\u5468\u671f\u3001\u4e92\u806f\u7db2\u7684\u7d50\u69cb\u3001\u96fb\u8166\u79d1\u5b78\u7684\u61c9\u7528\u3001\u8a08\u7b97\u6a21\u578b\u3001\u5716\u9748\u6a5f\u548c\u96fb\u8166\u6975\u9650\u3001\u4eba\u5de5\u667a\u80fd\u3002\u7531\u6df1\u5165\u6dfa\uff0c\u5927\u5305\u570d\u4e86\u96fb\u8166\u76f8\u95dc\u7684\u5404\u7a2e\u77e5\u8b58\u3002 \u9019\u672c\u53ef\u8b02\u662f\u6559\u79d1\u66f8\u7684\u5178\u7bc4\u3002\u9664\u975e\u4f60\u7570\u5e38\u5730\u60f3\u52d5\u4e00\u52d5\u8166\u7b4b\u6311\u6230\u81ea\u5df1\uff0c\u5426\u5247\u4f60\u53ef\u4ee5\u5b8c\u5168\u5ffd\u7565\u8ab2\u6587\u4e2d\u548c\u8ab2\u6587\u5f8c\u7684\u554f\u984c\u96c6\u800c\u4e0d\u5f71\u97ff\u95b1\u8b80\u9ad4\u9a57\u3002\u7576\u7136\u4e5f\u6c92\u6709\u751a\u9ebc\u72d7\u5c4e\u5783\u573e\u300c\u8ab2\u5802\u5167\u5bb9\u7684\u4e00\u90e8\u4efd\u5728\u7df4\u7fd2\u984c\u7576\u4e2d\u300d\uff0c\u5fc5\u9808\u7684\u77e5\u8b58\u5168\u90fd\u5305\u542b\u5728\u8ab2\u6587\u88cf\u9762\u3002 \u8a08\u7b97\u6a5f\u6b77\u53f2 \u00b6 \u73fe\u4ee3\u96fb\u8166\u767c\u5c55\u53f2\u96e2\u4e0d\u958b\u8ecd\u4e8b\u7528\u9014\u3002\u4f46\u66f4\u65e9\u7684\u662f\u57281900\u5e74\u4ee3\u3002\u7576\u6642\u7f8e\u570b\u7684\u79fb\u6c11\u6f6e\u5c0e\u81f4\u4eba\u53e3\u6025\u901f\u500d\u589e(\u7b46\u8005\u70ba\u5730\u7406\u5b78\u5c08\u696d\uff0c\u6709\u4fee\u904e\u7f8e\u570b\u79fb\u6c11\u53f2)\uff0c\u5728\u6700\u9ad8\u5cf0\u76841900\u20131910\u5e74\u9593\uff0c\u6709800\u842c\u7684\u65b0\u589e\u79fb\u6c11\u4eba\u53e3\u3002\u800c\u5728\u66f4\u95ca\u7684\u6642\u9593\u9ede\u4e0a\uff0c1880\u20131920\u5e74\u9593\uff0c\u7e3d\u5171\u589e\u52a0\u4e862700\u842c\u65b0\u79fb\u6c11\u3002\u4eba\u6578\u4e4b\u591a\uff0c\u4e0d\u50c5\u4ee4\u653f\u5e9c\u5927\u70ba\u982d\u75db\u800c\u6025\u65bc\u4fee\u6539\u79fb\u6c11\u6cd5\u4ee41930\u5e74\u4ee5\u5f8c\u7684\u79fb\u6c11\u4eba\u6578\u5927\u6e1b\uff0c\u540c\u6642\u65b0\u79fb\u6c11\u4e5f\u5e36\u4f86\u4e86\u5f88\u591a\u793e\u6703\u554f\u984c\u3002 \u4f46\u666e\u904d\u6587\u79d1\u4ed4\u5c31\u53ea\u6703\u8457\u58a8\u65bc\u9019\u4e9b\u4eba\u985e\u751a\u9ebc\u7684\u3001\u793e\u6703\u751a\u9ebc\u7684\uff0c\u6587\u79d1\u4ed4\u6240\u5ffd\u8996\u7684\u662f\uff0c\u570b\u5bb6\u4eba\u53e3\u6025\u589e\u6240\u76f4\u63a5\u5c0e\u81f4\u7684\u662f\uff0c\u4ee5\u5f80\u7684\u4eba\u53e3\u7d71\u8a08\u65b9\u6cd5\u8ad6\u5168\u76e4\u74e6\u89e3\u3002\u57fa\u672c\u4e0a\u7576\u4f60\u5b8c\u62101910\u5e74\u7684\u4eba\u53e3\u7d71\u8a08\u7684\u6642\u5019\uff0c\u6708\u66c6\u5df2\u7d93\u8981\u7ffb\u5230\u53bb1918\u5e74\u4e86\u3002\u5982\u662f\u8005\u7d71\u8a08\u5c40\u6700\u6025\u5148\u8981\u8655\u7406\u7684\u662f\u4eba\u53e3\u7d71\u8a08\u7684\u6a5f\u68b0\u5316\u3002\u7f8e\u570b\u806f\u90a6\u7d71\u8a08\u5c40\u90e8\u9577\u767c\u660e\u4e86\u6a5f\u5668\u4f86\u505a\u9019\u4ef6\u4e8b\uff0c\u5e7e\u5e74\u5f8c\u4ed6\u81ea\u7acb\u9580\u6236\uff0c\u9019\u9593\u516c\u53f8\u5c31\u662f\u73fe\u5728\u5bb6\u55bb\u6236\u66c9\u7684IBM\u3002 \u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6230\u524d\u5f8c\uff0c\u6b50\u7f8e\u5404\u570b\u5176\u5be6\u90fd\u5728\u5dee\u4e0d\u591a\u4e00\u6a23\u7684\u6642\u9593\uff0c\u76f8\u7e7c\u7368\u7acb\u5730\u7814\u767c\u96fb\u8166\uff0c\u4e0d\u53ea\u662f\u82f1\u570b\u7528\u96fb\u8166\u4f86\u7834\u89e3\u5fb7\u570b\u7684\u6697\u865f\uff0c\u7f8e\u8ecd\u4e5f\u6709\u5176\u96fb\u8166\u7814\u7a76\u3002 \u5f8c\u4f86\u79d1\u5b78\u5bb6\u958b\u59cb\u8a2d\u8a08\u51fa\u96fb\u8166\u4e4b\u9593\u7684\u6e9d\u901a\u4ea6\u5373\u662f\u5167\u806f\u7db2\u3002\u8d77\u521d\u662f\u7531\u5927\u5b78\u7814\u7a76\u6240\u4e4b\u9593\u7684\u5b78\u8853\u4ea4\u6d41\u4e4b\u7528\uff0c\u662f\u7c92\u5b50\u7269\u7406\u5b78\u5bb6\u5bb6\u7684\u73a9\u610f\uff0c\u5f8c\u4f86\u4e0d\u5c11\u5176\u4ed6\u7814\u7a76\u6240\u548c\u4f01\u696d\u4e4b\u9593\u4e5f\u5efa\u7acb\u8d77\u81ea\u5df1\u7684\u5167\u806f\u7db2\u3002\u5f8c\u4f86\u7f8e\u570b\u570b\u5bb6\u79d1\u5b78\u9662\u63a5\u624b\uff0c\u7d71\u4e00\u4e86\u6797\u6797\u7a2e\u7a2e\u4e0d\u540c\u7684\u7db2\u7d61\u67b6\u69cb\uff0c\u4f7f\u5927\u5bb6\u90fd\u80fd\u4e92\u76f8\u4ea4\u6d41\uff0c\u90a3\u5c31\u662f\u4e92\u806f\u7db2\u3002 \u4e92\u806f\u7db2\u7684\u6838\u5fc3\u662fTCP/IP\uff0cSSL\u7b49\u7684\u5354\u8b70\u3002\u78ba\u4fdd\u4e86\u5927\u5bb6\u8aaa\u7684\u90fd\u662f\u540c\u4e00\u7a2e\u8a9e\u8a00\u3002\u6211\u5011\u61c9\u8a72\u6176\u5e78\u4e92\u806f\u7db2\u7684\u5efa\u8a2d\u7576\u4e2d\u6c92\u6709\u6587\u79d1\u4ed4\u7684\u53c3\u8207\u3002\u4e00\u65e6\u5982\u679c\u6709\u6587\u79d1\u4ed4\u4ecb\u5165\uff0c\u4e92\u806f\u7db2\u5c31\u6703\u8b8a\u6210\u98db\u9d3f\u50b3\u66f8\uff0c\u8aaa\u751a\u9ebc\u6a5f\u68b0\u592a\u51b7\u6f20\u6c92\u6709\u6eab\u5ea6\uff0cIP\u5730\u5740\u7684\u89e3\u6790\u53ea\u5728\u4e4e\u89c0\u9ede\u8207\u89d2\u5ea6\u4e91\u4e91\u7684\u3002 \u5716\u9748\u6a5f\u548c\u96fb\u8166\u6975\u9650 \u00b6 \u6587\u79d1\u8aaa\uff1a\u4e0d\u80fd\u6240\u6709\u6771\u897f\u90fd\u53ef\u4ee5\u79d1\u5b78\u5730\u770b\uff0c\u4e0d\u662f\u6240\u6709\u6771\u897f\u90fd\u53ef\u4ee5\u8a08\u7b97\u5f97\u6e05\u6e05\u695a\u695a\u3002 \u4f46\u6587\u79d1\u4ed4\u771f\u7684\u77e5\u9053\u751a\u9ebc\u662f\u300c\u8a08\u7b97\u300d\u55ce\uff1f\u54f2\u5b78\u4e0a\u5206\u6790\u300c\u8a08\u7b97\u300d\u7684\u601d\u60f3\u6846\u67b6\u662f\u5716\u9748\u6a5f\u3002\u5c31\u662f\u8aaa\uff0c\u6240\u6709\u7684\u8a08\u7b97\u90fd\u4e0d\u5916\u4e4e\u662f(\u6975\u7c97\u7565\u5730)\u8f38\u5165\u8cc7\u6599\u3001\u8655\u7406\u5668\u3001\u8655\u7406\u7d50\u679c\u7684\u8a18\u9304\uff0c\u9019\u4e09\u4ef6\u6771\u897f\u3002\u62ff\u8457\u9019\u4e9b\u6771\u897f\uff0c\u4f60\u53ef\u4ee5\u505a\u51fa\u6240\u6709\u7684\u904b\u7b97\u3002 \u4f46\u540c\u6642\u6709\u4e9b\u6771\u897f\u4e0d\u80fd\u8a08\u7b97(non computable)\uff0c\u90a3\u5c31\u662f\u81ea\u76f8\u77db\u76fe\u7684\u6771\u897f\u3002\u66f8\u4e2d\u8209\u7684\u4f8b\u5b50\u662f\uff1a \u5047\u8a2d\u6709\u4e00\u500b\u8655\u7406\u5668\uff0c\u7576\u9019\u500b\u8655\u7406\u5668\u5075\u6e2c\u5230\u73fe\u5728\u7684\u8a08\u7b97\u662f\u6c38\u7121\u6b62\u5883\u7684\u8a71\uff0c\u5b83\u5c31\u6703\u81ea\u52d5\u505c\u4e0b\uff0c\u76f8\u53cd\u5247\u7e7c\u7e8c\u904b\u884c\u3002 \u5982\u679c\u4f60\u5c07\u9019\u500b\u8655\u7406\u5668\u548c\u5b83\u7684\u529f\u80fd\u8f38\u5165\u5230\u5176\u81ea\u8eab\uff0c\u4f86\u6aa2\u6e2c\u4e00\u4e0b\u5b83\u81ea\u5df1\u662f\u4e0d\u662f\u6c38\u7121\u6b62\u5883\u5730\u8a08\u7b97\uff0c\u77db\u76fe\u5c31\u6703\u56e0\u6b64\u800c\u8d77\u3002 \u5982\u679c\u6211(\u8655\u7406\u5668)\u6703\u6c38\u7121\u6b62\u5883\u5730\u8a08\u4e0b\u53bb\u7684\u8a71\uff0c\u6211\u6703\u81ea\u52d5\u505c\u4e0b(\uff1f\uff1f\uff1f) \u6587\u79d1\u4eba\u770b\u5230\u9019\u4e9b\u8cc7\u8a0a\u662f\uff0c\u5c31\u6703\u6436\u8457\u8aaa\u6240\u4ee5\u4eba\u6587\u95dc\u61f7\u5f88\u91cd\u8981\uff0c\u96fb\u8166\u505a\u4e0d\u5230\u7684\u5c31\u8981\u9760\u4eba\u6587\u4f86\u5f4c\u88dc\u4e91\u4e91\u3002 \u4f46\u4f60\u60f3\u4e00\u60f3\uff0c\u73fe\u5728\u8aaa\u662f\u300c\u6240\u6709\u7684\u8a08\u7b97\u300d\u3002\u7406\u8ad6\u96fb\u8166\u4e5f\u4e0d\u80fd\u89e3\u6c7a\u7684\u4e8b\uff0c\u4f60\u96a8\u4fbf\u8b80\u500b\u6587\u5b78\u5b78\u4f4d\u5c31\u6703\u5ffd\u7136\u89e3\u6c7a\u5f97\u5230\uff1f\u53ea\u6709\u5169\u500b\u53ef\u80fd\u6027\uff1a 1 \u4f60\u4e0d\u662f\u7528\u300c\u8a08\u7b97\u300d\u7684\u65b9\u6cd5\u4f86\u8a08\u7b97\uff0c\u662f\u7528\u9b54\u6cd5 2 \u4f60\u662f\u767d\u75f4 \u6240\u4ee5\u8aaa\u908f\u8f2f\u5f88\u91cd\u8981\uff0c\u4f46\u908f\u8f2f\u662f\u4e0d\u80fd\u5f9e\u5b78\u7fd2\u6587\u79d1\u800c\u7372\u5f97\u3002 \u7576\u7136\u9019\u500b\u5716\u9748\u6a5f\u7684\u505c\u6a5f\u554f\u984c(halt problem)\u53ea\u662f\u4e00\u500b\u6578\u5b78\u8b49\u660e\u3002\u8b49\u660e\u4e86\u4e0d\u662f\u300c\u6240\u6709\u300d\u6771\u897f\u90fd\u53ef\u4ee5\u8a08\u7b97\u51fa\u4f86\u3002\u56e0\u70ba\u6578\u5b78\u5bb6\u80fd\u5920\u8209\u51fa\u4e00\u500b\u53cd\u8b49\uff0c\u5c31\u662f\u4e0a\u9762\u90a3\u90e8\u6703\u81ea\u76f8\u77db\u76fe\u7684\u8655\u7406\u5668\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u7576\u4f60\u7684\u8655\u7406\u5668\u548c\u5b83\u7684\u529f\u80fd\u662f\u540c\u4e0a\u9762\u4e00\u6a23\u7684\u8a71\uff0c\u9019\u500b\u8655\u7406\u5668\u662f\u5ee2\u7684\uff0c\u4e0d\u80fd\u89e3\u6c7a\u554f\u984c\u3002\u53ea\u8981\u4f60\u7684\u8655\u7406\u5668\u8207\u4e0a\u9762\u4f8b\u5b50\u4e0d\u540c\uff0c\u4f60\u5927\u53ef\u4ee5\u5b89\u5fc3\u8a08\u6578\u3002 \u6f14\u7b97\u6cd5 \u00b6 \u96fb\u8166\u79d1\u5b78\u7684\u7cbe\u9ad3\u5728\u65bc\u6f14\u7b97\u6cd5\u3002\u6f14\u7b97\u6cd5\u6c7a\u5b9a\u4e86\u4eba\u985e\u6587\u660e\u7684\u9032\u6b65\u7a7a\u9593\u3002 \u6587\u79d1\u4ed4\u6703\u554f\uff0c\u6211\u5011\u771f\u7684\u9700\u8981\u505a\u4e8b\u9019\u9ebc\u5feb\u55ce\uff1f\u4e0d\u80fd\u653e\u6162\u4e00\u9ede\uff0c\u5e36\u9ede\u6eab\u5ea6\uff0c\u5e36\u9ede\u611f\u60c5\uff0c\u6b23\u8cde\u4e00\u4e0b\u904e\u7a0b\u4e2d\u7684\u7f8e\uff0c\u66f4\u6dfb\u4e00\u9ede\u4eba\u6587\u96c5\u81f4\u3002 \u6211\u6709\u5f88\u591a\u53ef\u4ee5\u8b93\u4f60\u8a08\u5230\u4e0b\u4e00\u6b21\u5b87\u5b99\u5927\u7206\u70b8\u90fd\u672a\u66fe\u8a08\u5b8c\u7684\u8a08\u7b97\u5b78\u96e3\u984c\u3002\u4f60\u6587\u79d1\u4ed4\u8981\u8a66\u4e00\u8a66\u8a08\u4e00\u8a08\u55ce\uff1f \u8a08\u7b97\u4e4b\u4e0a\uff0c\u6548\u7387\u5c31\u662f\u552f\u4e00\u771f\u7406\u3002\u6f14\u7b97\u6cd5\u5c31\u662f\u947d\u7814\u600e\u6a23\u66f4\u5feb\u7684\u5b78\u554f\u3002\u6700\u7c21\u55ae\u7684\u901f\u5ea6\u63d0\u5347\u662fbinary search\u3002\u524d\u63d0\u662f\u4f60\u6709\u4e00\u672c\u4f9d\u7167abc\u6392\u5217\u7684\u96fb\u8a71\u7c3f\u3002\u4f60\u60f3\u77e5\u9053\u9673\u5c0f\u660e(Chan)\u96fb\u8a71\uff0c\u4f60\u4e0d\u6703\u75311\u958b\u59cb\u9010\u9801\u63ed\uff0c\u800c\u662f\u6253\u958b\u4e2d\u9593\uff0c\u4e00\u770b\u4e0d\u662fC\u9801\uff0c\u65bc\u662f\u4f60\u77e5\u9053\u4f60\u53ef\u4ee5\u5b8c\u5168\u4e0d\u9700\u8981\u770b\u4e4b\u5f8c\u7684\u9801\u6578\u3002\u56e0\u70baM\u6bd4C\u5927\uff0cC\u4e0d\u53ef\u80fd\u5728\u66f4\u5f8c\u7684\u9801\u6578\u88cf\u9762\u3002\u5982\u662f\u8005\u4f60\u9700\u8981\u641c\u5c0b\u7684\u7bc4\u570d\u5c31\u7531800\u9801\u8b8a\u6210400\u9801\u3002\u91cd\u8986\u5e7e\u6b21\u76f8\u540c\u6b65\u9a5f: 800->400->200->100->50->25->12->6->3->2->1 \u5f88\u5feb\u4f60\u5c31\u627e\u5230\u9673\u5c0f\u660e\u3002 \u96fb\u8166\u67b6\u69cb \u00b6 \u96fb\u8166\u7684\u4e2d\u5fc3\u662f\u8655\u7406\u5668\uff0c\u9664\u6b64\u4e4b\u5916\u5c31\u662f\u8a18\u61b6\u9ad4\u3002\u4f60\u8981\u6709\u300c\u8cc7\u6599\u300d\u624d\u80fd\u5f97\u8655\u7406\u3002\u5c31\u5982\u5f88\u591a\u6587\u79d1\u4ed4\u6703\u8aaa\u79d1\u5b78\u65b9\u6cd5\u6bd4\u79d1\u5b78\u77e5\u8b58\u91cd\u8981\uff0c\u8aaa\u9019\u4e9b\u6771\u897f\u7684\u4eba\u53ea\u6703\u662f\u5730\u5e73\u8ad6\u8005\u3002\u4e8b\u5be6\u4f60\u5fc5\u9808\u8981\u6709\u76f8\u540c\u5206\u91cf\u7684\u8655\u7406\u80fd\u529b\u548c\u786c\u77e5\u8b58\uff0c\u4f60\u8981\u77e5\u9053\u751a\u9ebc\u662ffact\u3002\u63a8\u8ad6\u548c\u601d\u8003\u65b9\u6cd5\u662f\u4e0d\u80fd\u5e36\u7d66\u4f60fact\u7684\u3002 \u8a18\u61b6\u9ad4\u6709\u901f\u5ea6\u4e4b\u5206\u3002\u65e9\u671f\u7684\u96fb\u8166\u8655\u7406\u5668\u901f\u5ea6\u6162\uff0c\u8655\u7406\u4e0d\u4e86\u4e0d\u591a\u8cc7\u6599\uff0c\u5f88\u591a\u6642\u5019\u662f100%\u4f54\u7528\u7387\u3002\u73fe\u5728\u7684\u8655\u7406\u5668\u901f\u5ea6\u6975\u5feb\uff0c\u8a08\u7b97\u7684\u6a3d\u9838\u5f9e\u8655\u7406\u5668\u8b8a\u6210\u8a18\u61b6\u9ad4\uff0c\u5c31\u662f\u8aaa\u7b49\u4e86\u5f88\u4e45\u4e5f\u672a\u7b49\u5230\u60f3\u8981\u7684\u8cc7\u6599\uff0c\u767d\u767d\u6d6a\u8cbb\u6642\u9593\u3002\u65bc\u662f\u4e4e\u5c31\u51fa\u73fe\u4e86\u66f4\u5feb\u7684\u8a18\u61b6\u9ad4\u53ebcache\uff0c\u518d\u5feb\u7684\u53ebregister\u3002\u4e00\u500b\u6bd4\u4e00\u500b\u5feb\uff0c\u4f46\u4e00\u500b\u6bd4\u4e00\u500b\u7d30\u5c0f\u3002 \u901f\u5ea6 RAM < L3 cache < L2 cache < L1 cache < register \u5bb9\u91cf RAM > L3 cache > L2 cache > L1 cache > register \u8655\u7406\u5668\u9996\u5148\u6703\u770b\u770b\u60f3\u8981\u7684\u8cc7\u6599\u6709\u6c92\u6709\u5728register\uff0c\u6c92\u6709\u7684\u8a71\u5c31\u770b\u6709\u6c92\u6709\u5728cache\uff0c\u518d\u6c92\u6709\u7684\u8a71\u5c31\u770b\u6709\u6c92\u6709\u5728RAM\uff0c\u6709\u7684\u8a71\u5c31\u6703\u5f9eRAM\u8abf\u52d5\u5230register\u3002\u554f\u984c\u662fRAM\u5f88\u6162\uff0c\u62d6\u5ef6\u4e86\u8655\u7406\u901f\u5ea6\u3002\u5982\u679c\u4e00\u958b\u59cb\u5c07\u8981\u7528\u5230\u7684\u8cc7\u6599\u8981\u653e\u5728cache\u7684\u8a71\u6703\u5feb\u5f88\u591a\u3002\u8cb7CPU\u7684\u6642\u5019\u9664\u4e86\u770bcache\u5bb9\u91cf\u7684\u6642\u5019\u4e5f\u8981\u770bcache\u901f\u5ea6\u3002 \u8edf\u4ef6\u67b6\u69cb \u00b6 \u7a0b\u5f0f\u8a9e\u8a00\u4e5f\u5206\u5e7e\u500b\u5c64\u6b21\u3002\u7531\u6700\u5e95\u5c64\u7684\u8aaa\u8d77\uff1a 1 Machine Language 2 Assembly Language 3 High Level Programming Language Machine Language\u5c31\u662f\u96fb\u8166\u8655\u7406\u5668\u771f\u6b63\u80fd\u5920\u770b\u5f97\u61c2\u7684\u6771\u897f\uff0c\u662f\u4e00\u5806010101100110\u3002\u5167\u5bb9\u5c31\u662f\u8aaa\u8981\u5c0d\u751a\u9ebc\u8a18\u61b6\u9ad4\u7684\u8cc7\u6599\u4f5c\u51fa\u751a\u9ebc\u64cd\u4f5c\uff0c\u4f8b\u5982\u662f\u52a0\u6e1b\u4e58\u9664\u3002 \u5c07Assembly Language\u8f49\u8b6f\u6210Machine Language Assembly Language\u5c31\u662f\u4eba\u770b\u5f97\u61c2\u7684Machine Language\u3002\u4f8b\u5982\u300c\u52a0\u300d\u7684\u6307\u4ee4\u4e0d\u662f01001\uff0c\u800c\u662fSUM\u3002\u65e9\u671f\u7684\u96fb\u8166\u7a0b\u5f0f\u7528\u9019\u7a2e\u8a9e\u8a00\u4f86\u7de8\u5beb\u3002 \u5c07High Level Programming Language\u8f49\u8b6f\u6210Assembly Language High Level Programming Language\u7684\u7528\u5bb6\u4e0d\u7528\u518d\u53bb\u601d\u8003\u751a\u9ebc\u8a18\u61b6\u9ad4\u7684\u3002\u53ef\u4ee5\u6709\u66f4\u591a\u7a7a\u9593\u53bb\u601d\u8003\u66f4\u8907\u96dc\u7684\u904b\u7b97\u3002\u4f8b\u5982\u4f60\u5c07\u5169\u500b\u540d\u55ae\u7684\u6578\u5b57\u76f8\u52a0\u7684\u6642\u5019\uff0c\u518d\u4e0d\u9700\u8981\u9010\u500b\u8a18\u61b6\u9ad4\u4f86\u52a0\uff0c\u800c\u53ea\u9700\u8981A\u540d\u55ae+B\u540d\u55ae\u5c31\u53ef\u4ee5\u4e86\u3002\u96fb\u8166\u6703\u5728\u80cc\u5f8c\u5e6b\u4f60\u88dc\u4e0a\u5be6\u969b\u4e0a\u9700\u8981\u7684\u6e05\u6670\u660e\u78ba\u7684\u6307\u4ee4\u3002 \u4f46\u73fe\u5be6\u4e0a\u96fb\u8166\u7684\u786c\u4ef6\u5404\u6709\u4e0d\u540c\uff0c\u4ee4\u5230\u5404\u5ee0\u724c\u4e4b\u9593\u7684Machine Language\u548cAssembly Language\u90fd\u662f\u4e0d\u540c\u3002\u4f60\u5fc5\u9808\u8981\u70ba\u6bcf\u4e00\u90e8\u96fb\u8166\u53bb\u91cd\u65b0\u7de8\u7a0b\u3002High Level Programming Language\u7684\u597d\u8655\u5c31\u662f\u4f60\u4e0d\u7528\u64d4\u5fc3\u9019\u500b\u554f\u984c\uff0c\u540c\u4e00\u500b\u7a0b\u5f0f\u53ef\u4ee5\u7528\u4e0d\u540c\u7684compiler\u4f86\u5c0d\u61c9\u4e0d\u540c\u7684\u786c\u4ef6\uff0c\u907f\u514d\u4e86\u91cd\u65b0\u7de8\u7a0b\u7684\u5927\u5de5\u7a0b\u3002\u4f8b\u5982Java\u548cC#\uff0c\u6a19\u699c\u7684\u5c31\u662f\u9019\u7a2e\u591a\u5e73\u53f0\u7684\u517c\u5bb9\u6027\u3002 \u6587\u79d1\u4ed4\u8981\u7559\u610f\u7684\u662f\uff0c\u96fb\u8166\u7a0b\u5e8f\u7684\u8f49\u8b6f\u5de5\u4f5c\u662f\u5168\u81ea\u52d5\u7684\u3002compiler\u7684\u8a2d\u8a08\u6975\u70ba\u8907\u96dc\uff0c\u9700\u8981\u5224\u65b7\u7a0b\u5f0f\u54e1\u7684\u610f\u5716\u800c\u5beb\u51fa\u6e96\u78ba\u7684Assemble Language\u3002\u4f60\u4e0d\u80fd\u5920\u6709\u534a\u9ede\u542b\u7cca\u3002\u96fb\u8166(\u908f\u8f2f\u771f\u7406not/and/or)\u7684\u4e16\u754c\u7684\u4e0d\u5bb9\u7d0d\u6587\u79d1\u7684\u3002 \u96fb\u8166\u79d1\u5b78\u7684\u61c9\u7528 \u00b6 \u96fb\u8166\u904a\u6232\u662f\u8003\u9a57\u96fb\u8166\u7684\u6027\u80fd\u7d42\u6975\u6307\u6a19\u3002\u56e0\u70ba\u4f60\u5fc5\u9808\u8981\u5728\u6975\u77ed\u7684\u6642\u9593\u4f86\u5b8c\u6210\u6240\u6709\u8a08\u7b97\uff0c\u624d\u80fd\u5c55\u73fe\u7d66\u7528\u5bb6\u6d41\u66a2\u800c\u7cbe\u7f8e\u7684\u756b\u9762\u3002 \u4f8b\u5982\u8aaa1920*1080\u7684\u756b\u9762\u5373200\u842c\u50cf\u7d20\uff0c\u6bcf\u500b\u50cf\u7d20\u90fd\u670910\u500b\u56e0\u7d20\u5f71\u97ff\u5176\u984f\u8272\u3002\u6bcf\u79d2\u9700\u8981\u7522\u751f60\u5f35\u756b\u9762\uff0c\u4f60\u6bcf\u79d2\u5c31\u9700\u8981\u9032\u884c12\u6b21\u5be6\u6642\u904b\u7b97\u3002\u70ba\u751a\u9ebc\u8aaa\u5be6\u6642\uff0c\u56e0\u70ba\u96fb\u8166\u4e0d\u80fd\u9810\u77e5\u4e0b\u4e00\u79d2\u73a9\u5bb6\u6703\u4f5c\u51fa\u751a\u9ebc\u884c\u70ba\uff0c\u56e0\u6b64\u5c31\u53ea\u80fd\u5920\u5728\u73a9\u5bb6\u505a\u51fa\u8209\u52d5\u4e4b\u5f8c\u624d\u80fd\u4f5c\u51fa\u53cd\u61c9\u3002\u96fb\u8166\u57280.016\u79d2\u4e4b\u5167\u5fc5\u9808\u8981\u5b8c\u6210\u5de5\u4f5c\uff0c\u5426\u5247\u5c31\u53ea\u662f\u5783\u573e\u3002 \u6587\u79d1\u5de5\u4f5c\u662f\u4e0d\u9700\u8981\u5230\u9019\u9ebc\u7dca\u6e4a\u7684\u6642\u9593\u63a7\u5236\u3002\u4f8b\u5982\u751a\u9ebc\u526a\u7247\uff0c\u7528\u5e7e\u500b\u9418\u4f86\u7522\u751f\u4e00\u5f35\u5716\uff0c\u8ab0\u6703\u53bb\u7406\u75313\u5c0f\u6642\u548c2\u5c0f\u6642\u7684\u5206\u5225\uff1f\u4f46\u73fe\u5be6\u6211\u5011\u9700\u8981\u66f4\u591a\u7684\u662f\u5be6\u6642\u7cfb\u7d71\u3002\u4f8b\u5982\u822a\u7a7a\u7ba1\u5236\u3001\u5929\u6c23\u4e88\u5831\u3001\u8eca\u6d41\u76e3\u6e2c\u3001\u7db2\u8def\u6578\u64da\u5206\u6790\u3002\u6587\u79d1\u7684\u5de5\u4f5c\u548c\u601d\u60f3\uff0c\u53cd\u800c\u63a5\u8fd1\u96f6\u9700\u8981\u3002 \u4eba\u5de5\u667a\u80fd \u00b6 \u9019\u672c\u66f8\u6703\u5e36\u80fd\u4f60\u6700\u57fa\u672c\u7684Machine Learning\u548cDeep Learning\u77e5\u8b58\u3002\u4f46\u8981\u771f\u6b63\u660e\u767d\u7684\u8a71\uff0c\u9084\u662f\u5148\u53bb\u8b80Linear Algebra\u5427\u3002","title":"\u8b80\u66f8\u5831\u544a\uff1a\u96fb\u8166\u79d1\u5b78\u5165\u9580"},{"location":"review_book/invitation%20to%20computer%20science/#_1","text":"Invitation to Computer Science https://www.cengage.co.uk/books/9781337561914/ \u9019\u672c\u66f8\u662f\u7f8e\u570b\u5927\u5b78\u7684\u96fb\u8166\u79d1\u5b78\u7684\u5165\u9580\u8ab2\u7a0b\u6559\u79d1\u66f8\uff0c\u7a0b\u5ea6\u8f03\u6dfa\uff0c\u8986\u84cb\u6975\u5ee3\u3002\u7531\u8a08\u7b97\u6a5f\u6b77\u53f2\u958b\u59cb\u8b1b\uff0c\u8b1b\u5230\u6f14\u7b97\u6cd5algorithm\u8a2d\u8a08\u3001\u96fb\u8166\u786c\u4ef6\u67b6\u69cb\u3001\u8edf\u4ef6\u67b6\u69cb\u548c\u958b\u767c\u5468\u671f\u3001\u4e92\u806f\u7db2\u7684\u7d50\u69cb\u3001\u96fb\u8166\u79d1\u5b78\u7684\u61c9\u7528\u3001\u8a08\u7b97\u6a21\u578b\u3001\u5716\u9748\u6a5f\u548c\u96fb\u8166\u6975\u9650\u3001\u4eba\u5de5\u667a\u80fd\u3002\u7531\u6df1\u5165\u6dfa\uff0c\u5927\u5305\u570d\u4e86\u96fb\u8166\u76f8\u95dc\u7684\u5404\u7a2e\u77e5\u8b58\u3002 \u9019\u672c\u53ef\u8b02\u662f\u6559\u79d1\u66f8\u7684\u5178\u7bc4\u3002\u9664\u975e\u4f60\u7570\u5e38\u5730\u60f3\u52d5\u4e00\u52d5\u8166\u7b4b\u6311\u6230\u81ea\u5df1\uff0c\u5426\u5247\u4f60\u53ef\u4ee5\u5b8c\u5168\u5ffd\u7565\u8ab2\u6587\u4e2d\u548c\u8ab2\u6587\u5f8c\u7684\u554f\u984c\u96c6\u800c\u4e0d\u5f71\u97ff\u95b1\u8b80\u9ad4\u9a57\u3002\u7576\u7136\u4e5f\u6c92\u6709\u751a\u9ebc\u72d7\u5c4e\u5783\u573e\u300c\u8ab2\u5802\u5167\u5bb9\u7684\u4e00\u90e8\u4efd\u5728\u7df4\u7fd2\u984c\u7576\u4e2d\u300d\uff0c\u5fc5\u9808\u7684\u77e5\u8b58\u5168\u90fd\u5305\u542b\u5728\u8ab2\u6587\u88cf\u9762\u3002","title":"\u8b80\u66f8\u5831\u544a\uff1a\u96fb\u8166\u79d1\u5b78\u5165\u9580"},{"location":"review_book/invitation%20to%20computer%20science/#_2","text":"\u73fe\u4ee3\u96fb\u8166\u767c\u5c55\u53f2\u96e2\u4e0d\u958b\u8ecd\u4e8b\u7528\u9014\u3002\u4f46\u66f4\u65e9\u7684\u662f\u57281900\u5e74\u4ee3\u3002\u7576\u6642\u7f8e\u570b\u7684\u79fb\u6c11\u6f6e\u5c0e\u81f4\u4eba\u53e3\u6025\u901f\u500d\u589e(\u7b46\u8005\u70ba\u5730\u7406\u5b78\u5c08\u696d\uff0c\u6709\u4fee\u904e\u7f8e\u570b\u79fb\u6c11\u53f2)\uff0c\u5728\u6700\u9ad8\u5cf0\u76841900\u20131910\u5e74\u9593\uff0c\u6709800\u842c\u7684\u65b0\u589e\u79fb\u6c11\u4eba\u53e3\u3002\u800c\u5728\u66f4\u95ca\u7684\u6642\u9593\u9ede\u4e0a\uff0c1880\u20131920\u5e74\u9593\uff0c\u7e3d\u5171\u589e\u52a0\u4e862700\u842c\u65b0\u79fb\u6c11\u3002\u4eba\u6578\u4e4b\u591a\uff0c\u4e0d\u50c5\u4ee4\u653f\u5e9c\u5927\u70ba\u982d\u75db\u800c\u6025\u65bc\u4fee\u6539\u79fb\u6c11\u6cd5\u4ee41930\u5e74\u4ee5\u5f8c\u7684\u79fb\u6c11\u4eba\u6578\u5927\u6e1b\uff0c\u540c\u6642\u65b0\u79fb\u6c11\u4e5f\u5e36\u4f86\u4e86\u5f88\u591a\u793e\u6703\u554f\u984c\u3002 \u4f46\u666e\u904d\u6587\u79d1\u4ed4\u5c31\u53ea\u6703\u8457\u58a8\u65bc\u9019\u4e9b\u4eba\u985e\u751a\u9ebc\u7684\u3001\u793e\u6703\u751a\u9ebc\u7684\uff0c\u6587\u79d1\u4ed4\u6240\u5ffd\u8996\u7684\u662f\uff0c\u570b\u5bb6\u4eba\u53e3\u6025\u589e\u6240\u76f4\u63a5\u5c0e\u81f4\u7684\u662f\uff0c\u4ee5\u5f80\u7684\u4eba\u53e3\u7d71\u8a08\u65b9\u6cd5\u8ad6\u5168\u76e4\u74e6\u89e3\u3002\u57fa\u672c\u4e0a\u7576\u4f60\u5b8c\u62101910\u5e74\u7684\u4eba\u53e3\u7d71\u8a08\u7684\u6642\u5019\uff0c\u6708\u66c6\u5df2\u7d93\u8981\u7ffb\u5230\u53bb1918\u5e74\u4e86\u3002\u5982\u662f\u8005\u7d71\u8a08\u5c40\u6700\u6025\u5148\u8981\u8655\u7406\u7684\u662f\u4eba\u53e3\u7d71\u8a08\u7684\u6a5f\u68b0\u5316\u3002\u7f8e\u570b\u806f\u90a6\u7d71\u8a08\u5c40\u90e8\u9577\u767c\u660e\u4e86\u6a5f\u5668\u4f86\u505a\u9019\u4ef6\u4e8b\uff0c\u5e7e\u5e74\u5f8c\u4ed6\u81ea\u7acb\u9580\u6236\uff0c\u9019\u9593\u516c\u53f8\u5c31\u662f\u73fe\u5728\u5bb6\u55bb\u6236\u66c9\u7684IBM\u3002 \u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6230\u524d\u5f8c\uff0c\u6b50\u7f8e\u5404\u570b\u5176\u5be6\u90fd\u5728\u5dee\u4e0d\u591a\u4e00\u6a23\u7684\u6642\u9593\uff0c\u76f8\u7e7c\u7368\u7acb\u5730\u7814\u767c\u96fb\u8166\uff0c\u4e0d\u53ea\u662f\u82f1\u570b\u7528\u96fb\u8166\u4f86\u7834\u89e3\u5fb7\u570b\u7684\u6697\u865f\uff0c\u7f8e\u8ecd\u4e5f\u6709\u5176\u96fb\u8166\u7814\u7a76\u3002 \u5f8c\u4f86\u79d1\u5b78\u5bb6\u958b\u59cb\u8a2d\u8a08\u51fa\u96fb\u8166\u4e4b\u9593\u7684\u6e9d\u901a\u4ea6\u5373\u662f\u5167\u806f\u7db2\u3002\u8d77\u521d\u662f\u7531\u5927\u5b78\u7814\u7a76\u6240\u4e4b\u9593\u7684\u5b78\u8853\u4ea4\u6d41\u4e4b\u7528\uff0c\u662f\u7c92\u5b50\u7269\u7406\u5b78\u5bb6\u5bb6\u7684\u73a9\u610f\uff0c\u5f8c\u4f86\u4e0d\u5c11\u5176\u4ed6\u7814\u7a76\u6240\u548c\u4f01\u696d\u4e4b\u9593\u4e5f\u5efa\u7acb\u8d77\u81ea\u5df1\u7684\u5167\u806f\u7db2\u3002\u5f8c\u4f86\u7f8e\u570b\u570b\u5bb6\u79d1\u5b78\u9662\u63a5\u624b\uff0c\u7d71\u4e00\u4e86\u6797\u6797\u7a2e\u7a2e\u4e0d\u540c\u7684\u7db2\u7d61\u67b6\u69cb\uff0c\u4f7f\u5927\u5bb6\u90fd\u80fd\u4e92\u76f8\u4ea4\u6d41\uff0c\u90a3\u5c31\u662f\u4e92\u806f\u7db2\u3002 \u4e92\u806f\u7db2\u7684\u6838\u5fc3\u662fTCP/IP\uff0cSSL\u7b49\u7684\u5354\u8b70\u3002\u78ba\u4fdd\u4e86\u5927\u5bb6\u8aaa\u7684\u90fd\u662f\u540c\u4e00\u7a2e\u8a9e\u8a00\u3002\u6211\u5011\u61c9\u8a72\u6176\u5e78\u4e92\u806f\u7db2\u7684\u5efa\u8a2d\u7576\u4e2d\u6c92\u6709\u6587\u79d1\u4ed4\u7684\u53c3\u8207\u3002\u4e00\u65e6\u5982\u679c\u6709\u6587\u79d1\u4ed4\u4ecb\u5165\uff0c\u4e92\u806f\u7db2\u5c31\u6703\u8b8a\u6210\u98db\u9d3f\u50b3\u66f8\uff0c\u8aaa\u751a\u9ebc\u6a5f\u68b0\u592a\u51b7\u6f20\u6c92\u6709\u6eab\u5ea6\uff0cIP\u5730\u5740\u7684\u89e3\u6790\u53ea\u5728\u4e4e\u89c0\u9ede\u8207\u89d2\u5ea6\u4e91\u4e91\u7684\u3002","title":"\u8a08\u7b97\u6a5f\u6b77\u53f2"},{"location":"review_book/invitation%20to%20computer%20science/#_3","text":"\u6587\u79d1\u8aaa\uff1a\u4e0d\u80fd\u6240\u6709\u6771\u897f\u90fd\u53ef\u4ee5\u79d1\u5b78\u5730\u770b\uff0c\u4e0d\u662f\u6240\u6709\u6771\u897f\u90fd\u53ef\u4ee5\u8a08\u7b97\u5f97\u6e05\u6e05\u695a\u695a\u3002 \u4f46\u6587\u79d1\u4ed4\u771f\u7684\u77e5\u9053\u751a\u9ebc\u662f\u300c\u8a08\u7b97\u300d\u55ce\uff1f\u54f2\u5b78\u4e0a\u5206\u6790\u300c\u8a08\u7b97\u300d\u7684\u601d\u60f3\u6846\u67b6\u662f\u5716\u9748\u6a5f\u3002\u5c31\u662f\u8aaa\uff0c\u6240\u6709\u7684\u8a08\u7b97\u90fd\u4e0d\u5916\u4e4e\u662f(\u6975\u7c97\u7565\u5730)\u8f38\u5165\u8cc7\u6599\u3001\u8655\u7406\u5668\u3001\u8655\u7406\u7d50\u679c\u7684\u8a18\u9304\uff0c\u9019\u4e09\u4ef6\u6771\u897f\u3002\u62ff\u8457\u9019\u4e9b\u6771\u897f\uff0c\u4f60\u53ef\u4ee5\u505a\u51fa\u6240\u6709\u7684\u904b\u7b97\u3002 \u4f46\u540c\u6642\u6709\u4e9b\u6771\u897f\u4e0d\u80fd\u8a08\u7b97(non computable)\uff0c\u90a3\u5c31\u662f\u81ea\u76f8\u77db\u76fe\u7684\u6771\u897f\u3002\u66f8\u4e2d\u8209\u7684\u4f8b\u5b50\u662f\uff1a \u5047\u8a2d\u6709\u4e00\u500b\u8655\u7406\u5668\uff0c\u7576\u9019\u500b\u8655\u7406\u5668\u5075\u6e2c\u5230\u73fe\u5728\u7684\u8a08\u7b97\u662f\u6c38\u7121\u6b62\u5883\u7684\u8a71\uff0c\u5b83\u5c31\u6703\u81ea\u52d5\u505c\u4e0b\uff0c\u76f8\u53cd\u5247\u7e7c\u7e8c\u904b\u884c\u3002 \u5982\u679c\u4f60\u5c07\u9019\u500b\u8655\u7406\u5668\u548c\u5b83\u7684\u529f\u80fd\u8f38\u5165\u5230\u5176\u81ea\u8eab\uff0c\u4f86\u6aa2\u6e2c\u4e00\u4e0b\u5b83\u81ea\u5df1\u662f\u4e0d\u662f\u6c38\u7121\u6b62\u5883\u5730\u8a08\u7b97\uff0c\u77db\u76fe\u5c31\u6703\u56e0\u6b64\u800c\u8d77\u3002 \u5982\u679c\u6211(\u8655\u7406\u5668)\u6703\u6c38\u7121\u6b62\u5883\u5730\u8a08\u4e0b\u53bb\u7684\u8a71\uff0c\u6211\u6703\u81ea\u52d5\u505c\u4e0b(\uff1f\uff1f\uff1f) \u6587\u79d1\u4eba\u770b\u5230\u9019\u4e9b\u8cc7\u8a0a\u662f\uff0c\u5c31\u6703\u6436\u8457\u8aaa\u6240\u4ee5\u4eba\u6587\u95dc\u61f7\u5f88\u91cd\u8981\uff0c\u96fb\u8166\u505a\u4e0d\u5230\u7684\u5c31\u8981\u9760\u4eba\u6587\u4f86\u5f4c\u88dc\u4e91\u4e91\u3002 \u4f46\u4f60\u60f3\u4e00\u60f3\uff0c\u73fe\u5728\u8aaa\u662f\u300c\u6240\u6709\u7684\u8a08\u7b97\u300d\u3002\u7406\u8ad6\u96fb\u8166\u4e5f\u4e0d\u80fd\u89e3\u6c7a\u7684\u4e8b\uff0c\u4f60\u96a8\u4fbf\u8b80\u500b\u6587\u5b78\u5b78\u4f4d\u5c31\u6703\u5ffd\u7136\u89e3\u6c7a\u5f97\u5230\uff1f\u53ea\u6709\u5169\u500b\u53ef\u80fd\u6027\uff1a 1 \u4f60\u4e0d\u662f\u7528\u300c\u8a08\u7b97\u300d\u7684\u65b9\u6cd5\u4f86\u8a08\u7b97\uff0c\u662f\u7528\u9b54\u6cd5 2 \u4f60\u662f\u767d\u75f4 \u6240\u4ee5\u8aaa\u908f\u8f2f\u5f88\u91cd\u8981\uff0c\u4f46\u908f\u8f2f\u662f\u4e0d\u80fd\u5f9e\u5b78\u7fd2\u6587\u79d1\u800c\u7372\u5f97\u3002 \u7576\u7136\u9019\u500b\u5716\u9748\u6a5f\u7684\u505c\u6a5f\u554f\u984c(halt problem)\u53ea\u662f\u4e00\u500b\u6578\u5b78\u8b49\u660e\u3002\u8b49\u660e\u4e86\u4e0d\u662f\u300c\u6240\u6709\u300d\u6771\u897f\u90fd\u53ef\u4ee5\u8a08\u7b97\u51fa\u4f86\u3002\u56e0\u70ba\u6578\u5b78\u5bb6\u80fd\u5920\u8209\u51fa\u4e00\u500b\u53cd\u8b49\uff0c\u5c31\u662f\u4e0a\u9762\u90a3\u90e8\u6703\u81ea\u76f8\u77db\u76fe\u7684\u8655\u7406\u5668\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u7576\u4f60\u7684\u8655\u7406\u5668\u548c\u5b83\u7684\u529f\u80fd\u662f\u540c\u4e0a\u9762\u4e00\u6a23\u7684\u8a71\uff0c\u9019\u500b\u8655\u7406\u5668\u662f\u5ee2\u7684\uff0c\u4e0d\u80fd\u89e3\u6c7a\u554f\u984c\u3002\u53ea\u8981\u4f60\u7684\u8655\u7406\u5668\u8207\u4e0a\u9762\u4f8b\u5b50\u4e0d\u540c\uff0c\u4f60\u5927\u53ef\u4ee5\u5b89\u5fc3\u8a08\u6578\u3002","title":"\u5716\u9748\u6a5f\u548c\u96fb\u8166\u6975\u9650"},{"location":"review_book/invitation%20to%20computer%20science/#_4","text":"\u96fb\u8166\u79d1\u5b78\u7684\u7cbe\u9ad3\u5728\u65bc\u6f14\u7b97\u6cd5\u3002\u6f14\u7b97\u6cd5\u6c7a\u5b9a\u4e86\u4eba\u985e\u6587\u660e\u7684\u9032\u6b65\u7a7a\u9593\u3002 \u6587\u79d1\u4ed4\u6703\u554f\uff0c\u6211\u5011\u771f\u7684\u9700\u8981\u505a\u4e8b\u9019\u9ebc\u5feb\u55ce\uff1f\u4e0d\u80fd\u653e\u6162\u4e00\u9ede\uff0c\u5e36\u9ede\u6eab\u5ea6\uff0c\u5e36\u9ede\u611f\u60c5\uff0c\u6b23\u8cde\u4e00\u4e0b\u904e\u7a0b\u4e2d\u7684\u7f8e\uff0c\u66f4\u6dfb\u4e00\u9ede\u4eba\u6587\u96c5\u81f4\u3002 \u6211\u6709\u5f88\u591a\u53ef\u4ee5\u8b93\u4f60\u8a08\u5230\u4e0b\u4e00\u6b21\u5b87\u5b99\u5927\u7206\u70b8\u90fd\u672a\u66fe\u8a08\u5b8c\u7684\u8a08\u7b97\u5b78\u96e3\u984c\u3002\u4f60\u6587\u79d1\u4ed4\u8981\u8a66\u4e00\u8a66\u8a08\u4e00\u8a08\u55ce\uff1f \u8a08\u7b97\u4e4b\u4e0a\uff0c\u6548\u7387\u5c31\u662f\u552f\u4e00\u771f\u7406\u3002\u6f14\u7b97\u6cd5\u5c31\u662f\u947d\u7814\u600e\u6a23\u66f4\u5feb\u7684\u5b78\u554f\u3002\u6700\u7c21\u55ae\u7684\u901f\u5ea6\u63d0\u5347\u662fbinary search\u3002\u524d\u63d0\u662f\u4f60\u6709\u4e00\u672c\u4f9d\u7167abc\u6392\u5217\u7684\u96fb\u8a71\u7c3f\u3002\u4f60\u60f3\u77e5\u9053\u9673\u5c0f\u660e(Chan)\u96fb\u8a71\uff0c\u4f60\u4e0d\u6703\u75311\u958b\u59cb\u9010\u9801\u63ed\uff0c\u800c\u662f\u6253\u958b\u4e2d\u9593\uff0c\u4e00\u770b\u4e0d\u662fC\u9801\uff0c\u65bc\u662f\u4f60\u77e5\u9053\u4f60\u53ef\u4ee5\u5b8c\u5168\u4e0d\u9700\u8981\u770b\u4e4b\u5f8c\u7684\u9801\u6578\u3002\u56e0\u70baM\u6bd4C\u5927\uff0cC\u4e0d\u53ef\u80fd\u5728\u66f4\u5f8c\u7684\u9801\u6578\u88cf\u9762\u3002\u5982\u662f\u8005\u4f60\u9700\u8981\u641c\u5c0b\u7684\u7bc4\u570d\u5c31\u7531800\u9801\u8b8a\u6210400\u9801\u3002\u91cd\u8986\u5e7e\u6b21\u76f8\u540c\u6b65\u9a5f: 800->400->200->100->50->25->12->6->3->2->1 \u5f88\u5feb\u4f60\u5c31\u627e\u5230\u9673\u5c0f\u660e\u3002","title":"\u6f14\u7b97\u6cd5"},{"location":"review_book/invitation%20to%20computer%20science/#_5","text":"\u96fb\u8166\u7684\u4e2d\u5fc3\u662f\u8655\u7406\u5668\uff0c\u9664\u6b64\u4e4b\u5916\u5c31\u662f\u8a18\u61b6\u9ad4\u3002\u4f60\u8981\u6709\u300c\u8cc7\u6599\u300d\u624d\u80fd\u5f97\u8655\u7406\u3002\u5c31\u5982\u5f88\u591a\u6587\u79d1\u4ed4\u6703\u8aaa\u79d1\u5b78\u65b9\u6cd5\u6bd4\u79d1\u5b78\u77e5\u8b58\u91cd\u8981\uff0c\u8aaa\u9019\u4e9b\u6771\u897f\u7684\u4eba\u53ea\u6703\u662f\u5730\u5e73\u8ad6\u8005\u3002\u4e8b\u5be6\u4f60\u5fc5\u9808\u8981\u6709\u76f8\u540c\u5206\u91cf\u7684\u8655\u7406\u80fd\u529b\u548c\u786c\u77e5\u8b58\uff0c\u4f60\u8981\u77e5\u9053\u751a\u9ebc\u662ffact\u3002\u63a8\u8ad6\u548c\u601d\u8003\u65b9\u6cd5\u662f\u4e0d\u80fd\u5e36\u7d66\u4f60fact\u7684\u3002 \u8a18\u61b6\u9ad4\u6709\u901f\u5ea6\u4e4b\u5206\u3002\u65e9\u671f\u7684\u96fb\u8166\u8655\u7406\u5668\u901f\u5ea6\u6162\uff0c\u8655\u7406\u4e0d\u4e86\u4e0d\u591a\u8cc7\u6599\uff0c\u5f88\u591a\u6642\u5019\u662f100%\u4f54\u7528\u7387\u3002\u73fe\u5728\u7684\u8655\u7406\u5668\u901f\u5ea6\u6975\u5feb\uff0c\u8a08\u7b97\u7684\u6a3d\u9838\u5f9e\u8655\u7406\u5668\u8b8a\u6210\u8a18\u61b6\u9ad4\uff0c\u5c31\u662f\u8aaa\u7b49\u4e86\u5f88\u4e45\u4e5f\u672a\u7b49\u5230\u60f3\u8981\u7684\u8cc7\u6599\uff0c\u767d\u767d\u6d6a\u8cbb\u6642\u9593\u3002\u65bc\u662f\u4e4e\u5c31\u51fa\u73fe\u4e86\u66f4\u5feb\u7684\u8a18\u61b6\u9ad4\u53ebcache\uff0c\u518d\u5feb\u7684\u53ebregister\u3002\u4e00\u500b\u6bd4\u4e00\u500b\u5feb\uff0c\u4f46\u4e00\u500b\u6bd4\u4e00\u500b\u7d30\u5c0f\u3002 \u901f\u5ea6 RAM < L3 cache < L2 cache < L1 cache < register \u5bb9\u91cf RAM > L3 cache > L2 cache > L1 cache > register \u8655\u7406\u5668\u9996\u5148\u6703\u770b\u770b\u60f3\u8981\u7684\u8cc7\u6599\u6709\u6c92\u6709\u5728register\uff0c\u6c92\u6709\u7684\u8a71\u5c31\u770b\u6709\u6c92\u6709\u5728cache\uff0c\u518d\u6c92\u6709\u7684\u8a71\u5c31\u770b\u6709\u6c92\u6709\u5728RAM\uff0c\u6709\u7684\u8a71\u5c31\u6703\u5f9eRAM\u8abf\u52d5\u5230register\u3002\u554f\u984c\u662fRAM\u5f88\u6162\uff0c\u62d6\u5ef6\u4e86\u8655\u7406\u901f\u5ea6\u3002\u5982\u679c\u4e00\u958b\u59cb\u5c07\u8981\u7528\u5230\u7684\u8cc7\u6599\u8981\u653e\u5728cache\u7684\u8a71\u6703\u5feb\u5f88\u591a\u3002\u8cb7CPU\u7684\u6642\u5019\u9664\u4e86\u770bcache\u5bb9\u91cf\u7684\u6642\u5019\u4e5f\u8981\u770bcache\u901f\u5ea6\u3002","title":"\u96fb\u8166\u67b6\u69cb"},{"location":"review_book/invitation%20to%20computer%20science/#_6","text":"\u7a0b\u5f0f\u8a9e\u8a00\u4e5f\u5206\u5e7e\u500b\u5c64\u6b21\u3002\u7531\u6700\u5e95\u5c64\u7684\u8aaa\u8d77\uff1a 1 Machine Language 2 Assembly Language 3 High Level Programming Language Machine Language\u5c31\u662f\u96fb\u8166\u8655\u7406\u5668\u771f\u6b63\u80fd\u5920\u770b\u5f97\u61c2\u7684\u6771\u897f\uff0c\u662f\u4e00\u5806010101100110\u3002\u5167\u5bb9\u5c31\u662f\u8aaa\u8981\u5c0d\u751a\u9ebc\u8a18\u61b6\u9ad4\u7684\u8cc7\u6599\u4f5c\u51fa\u751a\u9ebc\u64cd\u4f5c\uff0c\u4f8b\u5982\u662f\u52a0\u6e1b\u4e58\u9664\u3002 \u5c07Assembly Language\u8f49\u8b6f\u6210Machine Language Assembly Language\u5c31\u662f\u4eba\u770b\u5f97\u61c2\u7684Machine Language\u3002\u4f8b\u5982\u300c\u52a0\u300d\u7684\u6307\u4ee4\u4e0d\u662f01001\uff0c\u800c\u662fSUM\u3002\u65e9\u671f\u7684\u96fb\u8166\u7a0b\u5f0f\u7528\u9019\u7a2e\u8a9e\u8a00\u4f86\u7de8\u5beb\u3002 \u5c07High Level Programming Language\u8f49\u8b6f\u6210Assembly Language High Level Programming Language\u7684\u7528\u5bb6\u4e0d\u7528\u518d\u53bb\u601d\u8003\u751a\u9ebc\u8a18\u61b6\u9ad4\u7684\u3002\u53ef\u4ee5\u6709\u66f4\u591a\u7a7a\u9593\u53bb\u601d\u8003\u66f4\u8907\u96dc\u7684\u904b\u7b97\u3002\u4f8b\u5982\u4f60\u5c07\u5169\u500b\u540d\u55ae\u7684\u6578\u5b57\u76f8\u52a0\u7684\u6642\u5019\uff0c\u518d\u4e0d\u9700\u8981\u9010\u500b\u8a18\u61b6\u9ad4\u4f86\u52a0\uff0c\u800c\u53ea\u9700\u8981A\u540d\u55ae+B\u540d\u55ae\u5c31\u53ef\u4ee5\u4e86\u3002\u96fb\u8166\u6703\u5728\u80cc\u5f8c\u5e6b\u4f60\u88dc\u4e0a\u5be6\u969b\u4e0a\u9700\u8981\u7684\u6e05\u6670\u660e\u78ba\u7684\u6307\u4ee4\u3002 \u4f46\u73fe\u5be6\u4e0a\u96fb\u8166\u7684\u786c\u4ef6\u5404\u6709\u4e0d\u540c\uff0c\u4ee4\u5230\u5404\u5ee0\u724c\u4e4b\u9593\u7684Machine Language\u548cAssembly Language\u90fd\u662f\u4e0d\u540c\u3002\u4f60\u5fc5\u9808\u8981\u70ba\u6bcf\u4e00\u90e8\u96fb\u8166\u53bb\u91cd\u65b0\u7de8\u7a0b\u3002High Level Programming Language\u7684\u597d\u8655\u5c31\u662f\u4f60\u4e0d\u7528\u64d4\u5fc3\u9019\u500b\u554f\u984c\uff0c\u540c\u4e00\u500b\u7a0b\u5f0f\u53ef\u4ee5\u7528\u4e0d\u540c\u7684compiler\u4f86\u5c0d\u61c9\u4e0d\u540c\u7684\u786c\u4ef6\uff0c\u907f\u514d\u4e86\u91cd\u65b0\u7de8\u7a0b\u7684\u5927\u5de5\u7a0b\u3002\u4f8b\u5982Java\u548cC#\uff0c\u6a19\u699c\u7684\u5c31\u662f\u9019\u7a2e\u591a\u5e73\u53f0\u7684\u517c\u5bb9\u6027\u3002 \u6587\u79d1\u4ed4\u8981\u7559\u610f\u7684\u662f\uff0c\u96fb\u8166\u7a0b\u5e8f\u7684\u8f49\u8b6f\u5de5\u4f5c\u662f\u5168\u81ea\u52d5\u7684\u3002compiler\u7684\u8a2d\u8a08\u6975\u70ba\u8907\u96dc\uff0c\u9700\u8981\u5224\u65b7\u7a0b\u5f0f\u54e1\u7684\u610f\u5716\u800c\u5beb\u51fa\u6e96\u78ba\u7684Assemble Language\u3002\u4f60\u4e0d\u80fd\u5920\u6709\u534a\u9ede\u542b\u7cca\u3002\u96fb\u8166(\u908f\u8f2f\u771f\u7406not/and/or)\u7684\u4e16\u754c\u7684\u4e0d\u5bb9\u7d0d\u6587\u79d1\u7684\u3002","title":"\u8edf\u4ef6\u67b6\u69cb"},{"location":"review_book/invitation%20to%20computer%20science/#_7","text":"\u96fb\u8166\u904a\u6232\u662f\u8003\u9a57\u96fb\u8166\u7684\u6027\u80fd\u7d42\u6975\u6307\u6a19\u3002\u56e0\u70ba\u4f60\u5fc5\u9808\u8981\u5728\u6975\u77ed\u7684\u6642\u9593\u4f86\u5b8c\u6210\u6240\u6709\u8a08\u7b97\uff0c\u624d\u80fd\u5c55\u73fe\u7d66\u7528\u5bb6\u6d41\u66a2\u800c\u7cbe\u7f8e\u7684\u756b\u9762\u3002 \u4f8b\u5982\u8aaa1920*1080\u7684\u756b\u9762\u5373200\u842c\u50cf\u7d20\uff0c\u6bcf\u500b\u50cf\u7d20\u90fd\u670910\u500b\u56e0\u7d20\u5f71\u97ff\u5176\u984f\u8272\u3002\u6bcf\u79d2\u9700\u8981\u7522\u751f60\u5f35\u756b\u9762\uff0c\u4f60\u6bcf\u79d2\u5c31\u9700\u8981\u9032\u884c12\u6b21\u5be6\u6642\u904b\u7b97\u3002\u70ba\u751a\u9ebc\u8aaa\u5be6\u6642\uff0c\u56e0\u70ba\u96fb\u8166\u4e0d\u80fd\u9810\u77e5\u4e0b\u4e00\u79d2\u73a9\u5bb6\u6703\u4f5c\u51fa\u751a\u9ebc\u884c\u70ba\uff0c\u56e0\u6b64\u5c31\u53ea\u80fd\u5920\u5728\u73a9\u5bb6\u505a\u51fa\u8209\u52d5\u4e4b\u5f8c\u624d\u80fd\u4f5c\u51fa\u53cd\u61c9\u3002\u96fb\u8166\u57280.016\u79d2\u4e4b\u5167\u5fc5\u9808\u8981\u5b8c\u6210\u5de5\u4f5c\uff0c\u5426\u5247\u5c31\u53ea\u662f\u5783\u573e\u3002 \u6587\u79d1\u5de5\u4f5c\u662f\u4e0d\u9700\u8981\u5230\u9019\u9ebc\u7dca\u6e4a\u7684\u6642\u9593\u63a7\u5236\u3002\u4f8b\u5982\u751a\u9ebc\u526a\u7247\uff0c\u7528\u5e7e\u500b\u9418\u4f86\u7522\u751f\u4e00\u5f35\u5716\uff0c\u8ab0\u6703\u53bb\u7406\u75313\u5c0f\u6642\u548c2\u5c0f\u6642\u7684\u5206\u5225\uff1f\u4f46\u73fe\u5be6\u6211\u5011\u9700\u8981\u66f4\u591a\u7684\u662f\u5be6\u6642\u7cfb\u7d71\u3002\u4f8b\u5982\u822a\u7a7a\u7ba1\u5236\u3001\u5929\u6c23\u4e88\u5831\u3001\u8eca\u6d41\u76e3\u6e2c\u3001\u7db2\u8def\u6578\u64da\u5206\u6790\u3002\u6587\u79d1\u7684\u5de5\u4f5c\u548c\u601d\u60f3\uff0c\u53cd\u800c\u63a5\u8fd1\u96f6\u9700\u8981\u3002","title":"\u96fb\u8166\u79d1\u5b78\u7684\u61c9\u7528"},{"location":"review_book/invitation%20to%20computer%20science/#_8","text":"\u9019\u672c\u66f8\u6703\u5e36\u80fd\u4f60\u6700\u57fa\u672c\u7684Machine Learning\u548cDeep Learning\u77e5\u8b58\u3002\u4f46\u8981\u771f\u6b63\u660e\u767d\u7684\u8a71\uff0c\u9084\u662f\u5148\u53bb\u8b80Linear Algebra\u5427\u3002","title":"\u4eba\u5de5\u667a\u80fd"},{"location":"toward_science/","text":"Be A Scientist \u00b6 Pauli Operator, Commutator, Bloch sphere, Binary Operation, and Cyclic Group \u00b6 So What Exactly is happenig in Matrix Multiplication \u00b6 \u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f \u00b6 Qubit Matrix Chain Multiplication in O(n) \u00b6 Cyclic Property of Imaginary Number.md \u00b6 Special and General Commutativity of Pauli Operator \u00b6 Better Encoding for Pauli Matrix \u00b6","title":"Toward Science"},{"location":"toward_science/#be-a-scientist","text":"","title":"Be A Scientist"},{"location":"toward_science/#pauli-operator-commutator-bloch-sphere-binary-operation-and-cyclic-group","text":"","title":"Pauli Operator, Commutator, Bloch sphere,  Binary Operation, and Cyclic\u00a0Group"},{"location":"toward_science/#so-what-exactly-is-happenig-in-matrix-multiplication","text":"","title":"So What Exactly is happenig in Matrix Multiplication"},{"location":"toward_science/#_1","text":"","title":"\u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f"},{"location":"toward_science/#qubit-matrix-chain-multiplication-in-on","text":"","title":"Qubit Matrix Chain Multiplication in O(n)"},{"location":"toward_science/#cyclic-property-of-imaginary-numbermd","text":"","title":"Cyclic Property of Imaginary Number.md"},{"location":"toward_science/#special-and-general-commutativity-of-pauli-operator","text":"","title":"Special and General Commutativity of Pauli Operator"},{"location":"toward_science/#better-encoding-for-pauli-matrix","text":"","title":"Better Encoding for Pauli Matrix"},{"location":"toward_science/Better%20Encoding%20for%20Pauli%20Matrix/","text":"Better Encoding for Pauli Matrix \u00b6 Pauli Matrix is a set of 2x2 matrix as the followings: Text Only 1 2 3 4 5 6 7 8 9 10 11 I = [ 1, 0] [ 0, 1] X = [ 0, 1] [ 1, 0] Y = [ 0,-i] [ i, 1] Z = [ 1, 0] [ 0,-1] We use they to do Quantum Computing. They all obey rules of Linear Algebra. If you multiply them together, we will find that this set of of operator is closesd while coefficient is ignored: Text Only 1 2 3 4 5 6 7 8 9 XY = Z YX = Z XZ = Y ZX = Y YZ = X ZY = X XX = I YY = I ZZ = I Is there a faster way to do this kind of multiplication? Since XY = Z, Z can be composed from X and Y. Let's encode X as 01 and Y as 10, so Z is 11. What operation make (01, 10) -> 11 ? There is one, XOR (exclusive or). Text Only 1 2 3 4 5 XOR 1 1 -> 0 1 0 -> 1 0 1 -> 1 0 0 -> 0 So, Text Only 1 2 3 4 5 6 7 8 9 X MUL Y ------ Z 01 XOR 10 ------ 11 And you can test other pairs. XOR is consistent with multiplication of all Pauli Operators. Hence there exist the isomorphism bewteen the binary set {00, 01, 10, 11} with XOR and {I, X, Y, Z} with MUL. 00 01 10 11 \u00b6 So Pauli Matrix can be encoded as binary numbers for convenience. As you can see from the following table, [I,X,Y,Z] can be encoded as [00,01,10,11] which is [0,1,2,3] . Pauli Binary Octal I 00 0 X 01 1 Y 10 2 Z 11 3 ------- -------- -------- MUL XOR With the notion of Cyclic property of Pauli Matrix (ignoring coefficient), namely: Text Only 1 2 3 ----> clockwise as + X 01 Z Y 11 10 Pauli Binary Octal Clock Coef XY=Z 01^10=11 1 2=3 + +i YZ=X 10^11=01 2 3=1 + +i ZX=Y 11^01=10 3 1=2 + +i ------- ---------- ---------- -------- -------- XZ=Y 01^11=10 1 3=2 - -i ZY=X 11^10=01 3 2=1 - -i YX=Z 10^01=11 2 1=3 - -i There is one way to calculate the coefficient. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 Let it be Left and Right L % 3 == R - 1 A = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 1 ], [ 2 , 1 ], [ 3 , 2 ], [ 1 , 3 ]] for L , R in A : print ( L % 3 == R - 1 ) Text Only 1 2 3 4 5 6 True True True False False False Or check the multiplication matrix. Text Only 1 2 3 4 5 I X Y Z=R L=I 0 0 0 0 X 0 0 + - Y 0 - 0 + Z 0 + - 0 You can see this encoding is very convient for multiplication of Pauli Matrix. However, this is not the case if we have to consider multiplying a state vactor to it. In particular, when we multiply Pauli Matrix to say |0011> , we want to know which is bitflip and which is phaseflip. Pauli Binary Octal Bitflip Phaseflip I 00 0 0 0 X 01 1 1 0 Y 10 2 1 1 Z 11 3 0 1 Now how can we obtain Bitflip-ness? By XOR? For example X=01 -> 0 XOR 1 -> 1. Then what about Phaseflip-ness? Z//2 -> 1. Still this is not the simpliest solution. 00 01 11 10 \u00b6 So why not change the encoding? The strangest thing is that, it doesn't matter whether Y as 10 or Y as 11, isomoriphism in multiplication still holds. Pauli Binary Octal Bitflip Phaseflip I 00 0 0 0 X 01 1 1 0 Y 11 3 1 1 Z 10 2 0 1 You can see that Bitflip-ness can be obtained from Pauli&01. And Phaseflip-ness can be obtained from Pauli&10. This is a lot easier. But what about multiplications? Text Only 1 2 3 ----> clockwise as + X 01 Z Y 10 11 From the above triangle, you see that the new encoding is just reversed the clockwiseness. Pauli Binary Octal Clock Coef XY=Z 01^11=10 1 2=2 + +i YZ=X 11^10=01 2 3=1 + +i ZX=Y 10^01=11 3 1=3 + +i ------- ---------- ---------- -------- -------- XZ=Y 01^10=11 1 3=3 - -i ZY=X 10^11=01 3 2=1 - -i YX=Z 11^01=10 2 1=2 - -i Previously we use L%3 == R-1 to determine coefficient, now we just reverse the equality and use L%3 != R-1 . Python 1 2 3 4 5 6 7 8 9 A = [[ 1 , 3 ], [ 3 , 2 ], [ 2 , 1 ], [ 1 , 2 ], [ 2 , 3 ], [ 3 , 1 ]] for L , R in A : print ( L % 3 != R - 1 ) Text Only 1 2 3 4 5 6 True True True False False False So basically nothing has changed, zero harm, but now we have ever simplier instruction to check for whether the Pauli Matrix is Bitflip or Phaseflip.","title":"Better Encoding for Pauli Matrix"},{"location":"toward_science/Better%20Encoding%20for%20Pauli%20Matrix/#better-encoding-for-pauli-matrix","text":"Pauli Matrix is a set of 2x2 matrix as the followings: Text Only 1 2 3 4 5 6 7 8 9 10 11 I = [ 1, 0] [ 0, 1] X = [ 0, 1] [ 1, 0] Y = [ 0,-i] [ i, 1] Z = [ 1, 0] [ 0,-1] We use they to do Quantum Computing. They all obey rules of Linear Algebra. If you multiply them together, we will find that this set of of operator is closesd while coefficient is ignored: Text Only 1 2 3 4 5 6 7 8 9 XY = Z YX = Z XZ = Y ZX = Y YZ = X ZY = X XX = I YY = I ZZ = I Is there a faster way to do this kind of multiplication? Since XY = Z, Z can be composed from X and Y. Let's encode X as 01 and Y as 10, so Z is 11. What operation make (01, 10) -> 11 ? There is one, XOR (exclusive or). Text Only 1 2 3 4 5 XOR 1 1 -> 0 1 0 -> 1 0 1 -> 1 0 0 -> 0 So, Text Only 1 2 3 4 5 6 7 8 9 X MUL Y ------ Z 01 XOR 10 ------ 11 And you can test other pairs. XOR is consistent with multiplication of all Pauli Operators. Hence there exist the isomorphism bewteen the binary set {00, 01, 10, 11} with XOR and {I, X, Y, Z} with MUL.","title":"Better Encoding for Pauli Matrix"},{"location":"toward_science/Better%20Encoding%20for%20Pauli%20Matrix/#00-01-10-11","text":"So Pauli Matrix can be encoded as binary numbers for convenience. As you can see from the following table, [I,X,Y,Z] can be encoded as [00,01,10,11] which is [0,1,2,3] . Pauli Binary Octal I 00 0 X 01 1 Y 10 2 Z 11 3 ------- -------- -------- MUL XOR With the notion of Cyclic property of Pauli Matrix (ignoring coefficient), namely: Text Only 1 2 3 ----> clockwise as + X 01 Z Y 11 10 Pauli Binary Octal Clock Coef XY=Z 01^10=11 1 2=3 + +i YZ=X 10^11=01 2 3=1 + +i ZX=Y 11^01=10 3 1=2 + +i ------- ---------- ---------- -------- -------- XZ=Y 01^11=10 1 3=2 - -i ZY=X 11^10=01 3 2=1 - -i YX=Z 10^01=11 2 1=3 - -i There is one way to calculate the coefficient. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 Let it be Left and Right L % 3 == R - 1 A = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 1 ], [ 2 , 1 ], [ 3 , 2 ], [ 1 , 3 ]] for L , R in A : print ( L % 3 == R - 1 ) Text Only 1 2 3 4 5 6 True True True False False False Or check the multiplication matrix. Text Only 1 2 3 4 5 I X Y Z=R L=I 0 0 0 0 X 0 0 + - Y 0 - 0 + Z 0 + - 0 You can see this encoding is very convient for multiplication of Pauli Matrix. However, this is not the case if we have to consider multiplying a state vactor to it. In particular, when we multiply Pauli Matrix to say |0011> , we want to know which is bitflip and which is phaseflip. Pauli Binary Octal Bitflip Phaseflip I 00 0 0 0 X 01 1 1 0 Y 10 2 1 1 Z 11 3 0 1 Now how can we obtain Bitflip-ness? By XOR? For example X=01 -> 0 XOR 1 -> 1. Then what about Phaseflip-ness? Z//2 -> 1. Still this is not the simpliest solution.","title":"00 01 10 11"},{"location":"toward_science/Better%20Encoding%20for%20Pauli%20Matrix/#00-01-11-10","text":"So why not change the encoding? The strangest thing is that, it doesn't matter whether Y as 10 or Y as 11, isomoriphism in multiplication still holds. Pauli Binary Octal Bitflip Phaseflip I 00 0 0 0 X 01 1 1 0 Y 11 3 1 1 Z 10 2 0 1 You can see that Bitflip-ness can be obtained from Pauli&01. And Phaseflip-ness can be obtained from Pauli&10. This is a lot easier. But what about multiplications? Text Only 1 2 3 ----> clockwise as + X 01 Z Y 10 11 From the above triangle, you see that the new encoding is just reversed the clockwiseness. Pauli Binary Octal Clock Coef XY=Z 01^11=10 1 2=2 + +i YZ=X 11^10=01 2 3=1 + +i ZX=Y 10^01=11 3 1=3 + +i ------- ---------- ---------- -------- -------- XZ=Y 01^10=11 1 3=3 - -i ZY=X 10^11=01 3 2=1 - -i YX=Z 11^01=10 2 1=2 - -i Previously we use L%3 == R-1 to determine coefficient, now we just reverse the equality and use L%3 != R-1 . Python 1 2 3 4 5 6 7 8 9 A = [[ 1 , 3 ], [ 3 , 2 ], [ 2 , 1 ], [ 1 , 2 ], [ 2 , 3 ], [ 3 , 1 ]] for L , R in A : print ( L % 3 != R - 1 ) Text Only 1 2 3 4 5 6 True True True False False False So basically nothing has changed, zero harm, but now we have ever simplier instruction to check for whether the Pauli Matrix is Bitflip or Phaseflip.","title":"00 01 11 10"},{"location":"toward_science/Cyclic%20Property%20of%20Imaginary%20Number/","text":"Cyclic Property of Imaginary Number and Negative Imaginary Number \u00b6 Imaginary number i have its cycle property. It repeat a pattern for every 4 multiplication cycles. Text Only 1 2 3 4 5 6 i^0 = +1 i^1 = +i i^2 = -1 i^3 = -i i^4 = +1 i^5 = +i Now the problem is, what if it starts from negative i. Text Only 1 2 3 4 5 6 (-i)^0 = +1 (-i)^1 = -i (-i)^2 = -1 (-i)^3 = +i (-i)^4 = +1 (-i)^5 = -i Now that is interesting. Comparing the result to positive i, result of negative is reversing some of the signs. But what is the pattern? Think spacially. Not literally. Here is a clock, made by all possible product from the mulitiplication of imaginary number i. And you start from the top. Text Only 1 2 3 4 5 6 *start +1 / \\ -i +i \\ / -1 Go clockwise, you end up landing on the position of +i. Go anti-clockwise, you end up landing on the position of -i. Text Only 1 2 3 4 5 6 *start +1 / \\ -i +i *step1 \\ / -1 Whether you go clockwise or anti-clockwise, the action of \"go\" is in fact multiplying the current state by +i or -i. Text Only 1 2 clockwise = multiplying current state by +i anti-clockwise = multiplying current state by -i You go clockwise, then go anti-clockwise. You land on the same position. The action of clockwise and anti-clockwise cancel out each other. Text Only 1 2 3 4 5 6 7 8 9 *step2 *start +1 / \\ -i +i *step1 \\ / -1 +i * -i = 1 (identity) So why the degenerats writing math textbook can never tell you how to do chain multiplation of both +i and -i mixing up together is that they don't even understand the structure. What if +i * -i * +i * +i * -i * +i * +i * -i * -i ? You just need to count. 5 clockwise and 4 anticlowise = +5 -4 = 1 = 1 step toward clockwise = +i What if the result exceed 4? Since imaginary number repeat at a cycle of 4, you do a modula 4 to it. 999999 step toward clockwise = 999999 mod 4 step toward clockwise = 3 step toward clockwise -999999 step toward clockwise = -999999 mod 4 step toward clockwise = 1 step toward clockwise Done.","title":"Cyclic Property of Imaginary Number and Negative Imaginary Number"},{"location":"toward_science/Cyclic%20Property%20of%20Imaginary%20Number/#cyclic-property-of-imaginary-number-and-negative-imaginary-number","text":"Imaginary number i have its cycle property. It repeat a pattern for every 4 multiplication cycles. Text Only 1 2 3 4 5 6 i^0 = +1 i^1 = +i i^2 = -1 i^3 = -i i^4 = +1 i^5 = +i Now the problem is, what if it starts from negative i. Text Only 1 2 3 4 5 6 (-i)^0 = +1 (-i)^1 = -i (-i)^2 = -1 (-i)^3 = +i (-i)^4 = +1 (-i)^5 = -i Now that is interesting. Comparing the result to positive i, result of negative is reversing some of the signs. But what is the pattern? Think spacially. Not literally. Here is a clock, made by all possible product from the mulitiplication of imaginary number i. And you start from the top. Text Only 1 2 3 4 5 6 *start +1 / \\ -i +i \\ / -1 Go clockwise, you end up landing on the position of +i. Go anti-clockwise, you end up landing on the position of -i. Text Only 1 2 3 4 5 6 *start +1 / \\ -i +i *step1 \\ / -1 Whether you go clockwise or anti-clockwise, the action of \"go\" is in fact multiplying the current state by +i or -i. Text Only 1 2 clockwise = multiplying current state by +i anti-clockwise = multiplying current state by -i You go clockwise, then go anti-clockwise. You land on the same position. The action of clockwise and anti-clockwise cancel out each other. Text Only 1 2 3 4 5 6 7 8 9 *step2 *start +1 / \\ -i +i *step1 \\ / -1 +i * -i = 1 (identity) So why the degenerats writing math textbook can never tell you how to do chain multiplation of both +i and -i mixing up together is that they don't even understand the structure. What if +i * -i * +i * +i * -i * +i * +i * -i * -i ? You just need to count. 5 clockwise and 4 anticlowise = +5 -4 = 1 = 1 step toward clockwise = +i What if the result exceed 4? Since imaginary number repeat at a cycle of 4, you do a modula 4 to it. 999999 step toward clockwise = 999999 mod 4 step toward clockwise = 3 step toward clockwise -999999 step toward clockwise = -999999 mod 4 step toward clockwise = 1 step toward clockwise Done.","title":"Cyclic Property of Imaginary Number and Negative Imaginary Number"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/","text":"Pauli Operator, Commutator, Bloch sphere, Binary Operation, and Cyclic Group \u00b6 Sometimes a thing called \"Commutator\" is being used in Quantum Computing. In some particular algorithm that solve certain equation, Commutator is used extensively. However the problem is, how can we implement this function fast. The current implementation expecially in the quantum simulation package called OpenFermion is super slow, and I think maybe I can do a better job. What is commute What is Binary Operation Commutator in 20 word Pauli Operator What is Bloch Sphere Pauli Operator form a Cyclic Group How to Make Fast Commutator What is commute \u00b6 \"Commute\" is a algebraic property in mathematics. Let say that you have some operation. Say \"go to toilet\" and \"wash hand\". And when you execute those operation, in different order, the outcome and meaning is completely different. Text Only 1 2 go to toilet then wash hand wash hand then go to toilet However the best option should be Text Only 1 wash hand then go to toilet then wash hand Then we say \"go to toilet\" and \"wash hand\" is NOT COMMUTE. We cannot change the their order arbitrarily. So this is \"not commute\". Then what is \"commute\"? Think of \"walking front\" and \"walking left\". No matter what order you walk, you must go to the same after position. Then we say walking front\" and \"walking left\" is COMMUTE. When two operation is COMMUTE, they are INDEPENDENT operation with respect to each other. Doing one operation do not affect anything in another operation. Like moving up and down will not have any affection on the horizontal position of that thing. So a commutator is a function that we use to check whether two operation is commute with each other or not. It is a binary operation. What is Binary Operation \u00b6 \"Plus\" and \"Muliplication\" is binary operation. They are used to make a relationship of two object. Text Only 1 2 3 1 + 1 = 2 2 + 2 = 4 3 \u00d7 3 = 9 There is a machine called \"PLUS\" and you can only input two value into it. And then after that it produce a new value. Text Only 1 PLUS(1,1) => 2 This machine/function can take only two number. Likewise, commutator is binary operation. Commutator in 20 word \u00b6 Text Only 1 2 3 Let A, B be two operation. Check AB - BA ?= 0 Explain: if A and B commute, then AB should have the same value as BA. And because of that, when you subtract them, you are subtracting the same value. So the result must be zero. State it inversely. If AB subtract BA is not equal to zero, A and B is not commute to each other. Pauli Operator \u00b6 Pauli Operator a set of operation in quantum computing. They are denoted as Text Only 1 I, X, Y, Z In their matrix form Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 I := [ 1 0 ] [ 0 1 ] X := [ 0 1 ] [ 1 0 ] Y := [ 0 -i ] [ i 0 ] Z := [ 1 0 ] [ 0 -1 ] The \"i\" in Y is the \"i\" of imaginary number. Why is this name. Because they represented the rotation axis of Bloch Sphere. Each Pauli Operator mean that you rotate the Bloch Sphere in the same axis of its name. Text Only 1 2 3 4 I = identity = do not rotate X rotate 180 degree in X axis Y rotate 180 degree in Y axis Z rotate 180 degree in Z axis What is Bloch Sphere \u00b6 Bloch Sphere is used in vistualizing a quantum state. It is a ball, or a sphere, or a globe. But in fact this thing is totally useless in everyday quantum computing. But I think it might help you understanding more about how the proterty of \"commute\" related to Pauli Operator. So a sphere has three axis namely X Y Z. To introduce those axis. I would not tell you to take out you hand and say \"right hand rule\" or something like that because some folks may not have right hand. So instead I will use your head. Think of you head. There is a arrow sticking through your right and left ears. That is the X axis. Another arrow sticking through your nose and back of your head. That is Y axis. And the last arrow go through your neck and top of you head. That is Z axis. So you try rotating X axis. Rotate you head with respect to ear axis. Doing so, you point your head to the groud. And you find that your nose will not be facing the front any more. Your nose is facing the back now. And of course your head is pointing at different direction. Therefore you know that rotating X axis is not independent from Y and Z axis. Likewise, try rotate the Z axis. Namely, facing front, then turn your body 180 degree and now you are facing the back. And you know that you cannot do this without changing the direction of your nose and ears. Again, Z axis is not independent from X and Y axis. Therefore the action of rotating X Y Z axis is complely NOT COMMUTE. Same for the Pauli Operator. Text Only 1 2 3 XY != YX YZ != ZY ZX != XZ But one thing is independent. Let say you and your friend is standing side by side. No matter how your friend's head rotate, that do not affect you. Your head and your friend's head is completely independent from each other. This is the principle of Pauli Operator's tensor product. It is internally independent. Text Only 1 (Z1 Z2) x (X1) == (Z1 X2) x (Z2) == (ZX1 Z2) See that Z2 is unchanged. Because X1 only act on index 1. Although X1 is NON COMMUTE with Z1, it is COMMUTE with Z2. Pauli Operator form a Cyclic Group \u00b6 You do not need to know what mathematically a \"Group\" is. The only thing you need to know is this \"Cyclic Group\". So the problem is, yup Pauli Operator is NON COMMUTATIVE. But how can we predict the outcome of it? Here I write all the combination out. Let see you can spot out the pattern. Text Only 1 2 3 4 5 6 XY == iZ YX == -iZ YZ == iX ZY == -iX ZX == iY XZ == -iY For the I, because it stand for Identity and do nothing, IX = X and XI = X, etc, so I omit it. And you can see whatever you do, the result must be something within {X, Y, Z}. That \"i\" is imaginary number. Usually we ignore it because i is also independent with all Pauli Operator. So the rule is, think of it as a circle of triangle. Counting XYZ clockwise and anticlockwise. Text Only 1 2 X Z Y X -> Y is clockwise, which is positive, and you got the next element Z. Hence iZ Y -> X is anticlockwise, so you must have negative, and then the next element Z. Hence -iZ. Same law apply to all others. Or you can do this. List out all possible combination in a string. Text Only 1 X Y Z X Y Z X Y Z Say, ZY, so you look for it and find the matching pattern Text Only 1 X Y Z X [Y <- Z] X Y Z And follow the direction of the arrow, the next element is X. Thus ZY = -iX because the arrow is pointing at left. This property is said to be the Cyclic Group. But what about XX, or YY, or ZZ? This is kind of simple. If the same thing happened twice, nothing happened after all. i.e Text Only 1 2 3 4 II == I XX == I YY == I ZZ == I Why is that. Because just as what I mention earlier, Text Only 1 X rotate 180 degree in X axis So what happen if you do operation X twice? Text Only 1 rotate 180 degree, and rotate 180 degree in X axis That is the same as Text Only 1 rotate 360 degree in X axis = Do not rotate at all You can verify all these in the matrix form if you know how to do matrix multiplication. Or with some help of computer program, you should be able to get the same result. How to Make Fast Commutator \u00b6 So these knowledge lay the foundation for implementing Commutator in a faster way. To avoid getting too theoretical, I will first show you how to work on real world example. Here is a matrix generated from H2 molecule. Don't worry if this is your first time to do chemical calculation. It is just a bunch of number and stuffs. I don't even know what they mean exactly. Knowing how to deal with Pauli Operator is just enough for the task. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 coefficient Pauli Operator -0.106 [I0 I1 I2 ] +0.045 [X0 Z1 X2 ] +0.045 [X0 Z1 X2 Z3] +0.045 [Y0 Z1 Y2 ] +0.045 [Y0 Z1 Y2 Z3] +0.173 [Z0 ] +0.173 [Z0 Z1 ] +0.166 [Z0 Z1 Z2 ] +0.166 [Z0 Z1 Z2 Z3] +0.120 [Z0 Z2 ] +0.120 [Z0 Z2 Z3] +0.168 [ Z1 ] -0.221 [ Z1 Z2 Z3] +0.174 [ Z1 Z3] -0.221 [ Z2 ] The task is, we have to check that if this is commute with the thing below. Text Only 1 2 coefficient Pauli Operator +1.0 [Z0 Z2] Let A be the first upper one, and B be the below one. We need to compute AB - BA ?= 0 . As we can see, A is a sum of a bunch of Pauli Operator. For this kind of thing, we can use distribution law. Text Only 1 W * ( E + R ) == WE + WR # distribution law Therefor instead of doing the whole big thing at once, we can just do a single slice of it at a time. Like taking the first term out of A and check whether AB = BA. Text Only 1 2 3 4 5 6 A0 = -0.106 [I0 I1 I2] B = +1.0 [Z0 Z2] A0*B ?= B*A0 (-0.106 [I0 I1 I2] )(+1.0 [Z0 Z2] ) ?= (+1.0 [Z0 Z2] )(-0.106 [I0 I1 I2] ) We can just treat the coefficient as a coefficient, and Pauli Operator as a variable. We can split the task into two seperate part. Like 3y - 3y = 0, all we need to look at is Text Only 1 2 3 4 1. whether the coefficient is the same value. 2. whether the Pauli Operator is the exact same thing. (-0.106 * +1.0) [I0 I1 I2][Z0 Z2] ?= (+1.0 * -0.106) [Z0 Z2][I0 I1 I2] For the coefficient, since they are all number, they obey all law from algebra. Namely, commutative law and associative law of multiplication. Text Only 1 2 3 4 Let a,b,c be arbitrary number. a*b = b*a # commutative law a*b*c = a*(b*c) # associative law Therefore it do not matter you multiple two number left of right. Any order can produce the same value. Let say Ac is coefficient of A and Bc is of B, Text Only 1 2 3 4 5 6 Ac*Bc == Bc*Ac hence, Ac*Bc (AB) ?= Bc*Ac (BA) Ac*Bc (AB) ?= Ac*Bc (BA) # Ac*Bc = Bc*Ac (AB) ?= (BA) # cancel out Ac*Bc Absolutely we can ignore the coefficient, however, the only thing in coefficient that we have to worry about is the i produced after two non commute Pauli Operator multiplied together i.e. XY = iZ etc. Text Only 1 2 3 4 5 6 e.g. K = X, L = Y KL ?= LK XY ?= YX iZ ?= -iZ iZ != -iZ So although both side got the same Pauli Z, the sign of i disagree. If you got more than one set of Pauli Operator multiplied, you have to count for how many i are produced and keep track of the sign. Text Only 1 2 3 4 5 6 7 e.g. XY0 XY1 ?= YZ0 YZ1 iZ0 iZ1 ?= -iZ0 -iZ1 ii Z0 Z1 ?= --ii Z0 Z1 -1 Z0 Z1 ?= -1 Z0 Z1 -1 Z0 Z1 == -1 Z0 Z1 Almost the same configuration but this time commute. To conclue on issue among coefficient, only the i and their sign you should pay attention to. Other do not worth the effort because they are 100% sure to be the exact same value. So, lets focus on the Pauli Operator. Text Only 1 2 3 4 5 6 7 8 9 A0 = [I0 I1 I2] B = [Z0 Z2] A0*B ?= B*A0 For A0*B [I0 I1 I2][Z0 Z2] = [IZ0 I1 IZ2] You can see index 1 is not contained in B, so instead of doing the full length multiplication, we can just extract those index both A0 and B share. So the problem size is smaller. Text Only 1 [I0 I1 I2][Z0 Z2] = [I0 I2][Z0 Z2] = [IZ0 IZ2] Those index both A0 and B share are the main target. Still we need to see what is outside of main target. Here we can use the property of Pauli Operator that different index COMMUTE. So we don't need to care where to put them. Front of back, do not matter. Text Only 1 2 [IZ0 IZ2] -> {IZ0 IZ2}[I1] or [I1]{IZ0 IZ2} {}for target As I mention earlier, I stand for Identity thus it do nothing, therefore Text Only 1 {IZ0 IZ2} = {Z0 Z2} And since A0 contains only I, it is automatically known as commute. 100% sure. You don't even need to compute it. Text Only 1 because IZ = ZI, if only I is invlove, it must commute. Let see what if it is non commute. Text Only 1 2 3 4 A1 = +0.045 [X0 Z1 X2] B = +1.0 [Z0 Z2] A1*B ?= B*A1 Again, only need to check the targeted part. Text Only 1 2 3 4 5 6 7 8 9 A1 = +0.045 {X0 X2} B = +1.0 {Z0 Z2} A1*B ?= B*A1 XZ0 XZ2 ?= ZX0 ZX2 -iY0 -iY2 ?= iY0 iY2 --ii Y0 Y2 ?= ii Y0 Y2 Y0 Y2 == Y0 Y2 Appending the non targeted part, Text Only 1 Y0 Y2 Z1 == Y0 Y2 Z1 In fact you don't even need to check for the non targeted part to see whether all term match. The real power of Cyclic Group property of Pauli Operator is that it ensured that all tensor product of Pauli Operator is unique. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 We can seperate terms in such manner {target}[non target] The thing brother me is that target part will change accouding to what it is multiplied to. Like A3 = {target3}[non target3] A4 = {target4}[non target4] B = {targetB} A3*B != B*A3 by coefficient but if {target4 * targetB} == {target3} adding its coefficient to A3*B may lead to A3*B == B*A3 Will there be such situation? Turn out there is no such situation. Let say Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 A3 = {X}[non target3] A4 = {Y}[non target4] B = {Z} First of all, A3==A4 if and only if target3==target4, given they have exactly same [non target] term. So target3 must not be target4. Second, property from Cyclic Group ensure that A3*B != A4*B. XY = YX = Z YZ = ZY = X Third, since multiplying Pauli Operator is a binary operation, this make Cyclic Group 100% true. So by this uniqueness, we can do all comparison separately.","title":"Pauli Operator, Commutator, Bloch sphere,  Binary Operation, and Cyclic\u00a0Group"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/#pauli-operator-commutator-bloch-sphere-binary-operation-and-cyclic-group","text":"Sometimes a thing called \"Commutator\" is being used in Quantum Computing. In some particular algorithm that solve certain equation, Commutator is used extensively. However the problem is, how can we implement this function fast. The current implementation expecially in the quantum simulation package called OpenFermion is super slow, and I think maybe I can do a better job. What is commute What is Binary Operation Commutator in 20 word Pauli Operator What is Bloch Sphere Pauli Operator form a Cyclic Group How to Make Fast Commutator","title":"Pauli Operator, Commutator, Bloch sphere,  Binary Operation, and Cyclic\u00a0Group"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/#what-is-commute","text":"\"Commute\" is a algebraic property in mathematics. Let say that you have some operation. Say \"go to toilet\" and \"wash hand\". And when you execute those operation, in different order, the outcome and meaning is completely different. Text Only 1 2 go to toilet then wash hand wash hand then go to toilet However the best option should be Text Only 1 wash hand then go to toilet then wash hand Then we say \"go to toilet\" and \"wash hand\" is NOT COMMUTE. We cannot change the their order arbitrarily. So this is \"not commute\". Then what is \"commute\"? Think of \"walking front\" and \"walking left\". No matter what order you walk, you must go to the same after position. Then we say walking front\" and \"walking left\" is COMMUTE. When two operation is COMMUTE, they are INDEPENDENT operation with respect to each other. Doing one operation do not affect anything in another operation. Like moving up and down will not have any affection on the horizontal position of that thing. So a commutator is a function that we use to check whether two operation is commute with each other or not. It is a binary operation.","title":"What is\u00a0commute"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/#what-is-binary-operation","text":"\"Plus\" and \"Muliplication\" is binary operation. They are used to make a relationship of two object. Text Only 1 2 3 1 + 1 = 2 2 + 2 = 4 3 \u00d7 3 = 9 There is a machine called \"PLUS\" and you can only input two value into it. And then after that it produce a new value. Text Only 1 PLUS(1,1) => 2 This machine/function can take only two number. Likewise, commutator is binary operation.","title":"What is Binary Operation"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/#commutator-in-20-word","text":"Text Only 1 2 3 Let A, B be two operation. Check AB - BA ?= 0 Explain: if A and B commute, then AB should have the same value as BA. And because of that, when you subtract them, you are subtracting the same value. So the result must be zero. State it inversely. If AB subtract BA is not equal to zero, A and B is not commute to each other.","title":"Commutator in 20\u00a0word"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/#pauli-operator","text":"Pauli Operator a set of operation in quantum computing. They are denoted as Text Only 1 I, X, Y, Z In their matrix form Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 I := [ 1 0 ] [ 0 1 ] X := [ 0 1 ] [ 1 0 ] Y := [ 0 -i ] [ i 0 ] Z := [ 1 0 ] [ 0 -1 ] The \"i\" in Y is the \"i\" of imaginary number. Why is this name. Because they represented the rotation axis of Bloch Sphere. Each Pauli Operator mean that you rotate the Bloch Sphere in the same axis of its name. Text Only 1 2 3 4 I = identity = do not rotate X rotate 180 degree in X axis Y rotate 180 degree in Y axis Z rotate 180 degree in Z axis","title":"Pauli\u00a0Operator"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/#what-is-bloch-sphere","text":"Bloch Sphere is used in vistualizing a quantum state. It is a ball, or a sphere, or a globe. But in fact this thing is totally useless in everyday quantum computing. But I think it might help you understanding more about how the proterty of \"commute\" related to Pauli Operator. So a sphere has three axis namely X Y Z. To introduce those axis. I would not tell you to take out you hand and say \"right hand rule\" or something like that because some folks may not have right hand. So instead I will use your head. Think of you head. There is a arrow sticking through your right and left ears. That is the X axis. Another arrow sticking through your nose and back of your head. That is Y axis. And the last arrow go through your neck and top of you head. That is Z axis. So you try rotating X axis. Rotate you head with respect to ear axis. Doing so, you point your head to the groud. And you find that your nose will not be facing the front any more. Your nose is facing the back now. And of course your head is pointing at different direction. Therefore you know that rotating X axis is not independent from Y and Z axis. Likewise, try rotate the Z axis. Namely, facing front, then turn your body 180 degree and now you are facing the back. And you know that you cannot do this without changing the direction of your nose and ears. Again, Z axis is not independent from X and Y axis. Therefore the action of rotating X Y Z axis is complely NOT COMMUTE. Same for the Pauli Operator. Text Only 1 2 3 XY != YX YZ != ZY ZX != XZ But one thing is independent. Let say you and your friend is standing side by side. No matter how your friend's head rotate, that do not affect you. Your head and your friend's head is completely independent from each other. This is the principle of Pauli Operator's tensor product. It is internally independent. Text Only 1 (Z1 Z2) x (X1) == (Z1 X2) x (Z2) == (ZX1 Z2) See that Z2 is unchanged. Because X1 only act on index 1. Although X1 is NON COMMUTE with Z1, it is COMMUTE with Z2.","title":"What is Bloch\u00a0Sphere"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/#pauli-operator-form-a-cyclic-group","text":"You do not need to know what mathematically a \"Group\" is. The only thing you need to know is this \"Cyclic Group\". So the problem is, yup Pauli Operator is NON COMMUTATIVE. But how can we predict the outcome of it? Here I write all the combination out. Let see you can spot out the pattern. Text Only 1 2 3 4 5 6 XY == iZ YX == -iZ YZ == iX ZY == -iX ZX == iY XZ == -iY For the I, because it stand for Identity and do nothing, IX = X and XI = X, etc, so I omit it. And you can see whatever you do, the result must be something within {X, Y, Z}. That \"i\" is imaginary number. Usually we ignore it because i is also independent with all Pauli Operator. So the rule is, think of it as a circle of triangle. Counting XYZ clockwise and anticlockwise. Text Only 1 2 X Z Y X -> Y is clockwise, which is positive, and you got the next element Z. Hence iZ Y -> X is anticlockwise, so you must have negative, and then the next element Z. Hence -iZ. Same law apply to all others. Or you can do this. List out all possible combination in a string. Text Only 1 X Y Z X Y Z X Y Z Say, ZY, so you look for it and find the matching pattern Text Only 1 X Y Z X [Y <- Z] X Y Z And follow the direction of the arrow, the next element is X. Thus ZY = -iX because the arrow is pointing at left. This property is said to be the Cyclic Group. But what about XX, or YY, or ZZ? This is kind of simple. If the same thing happened twice, nothing happened after all. i.e Text Only 1 2 3 4 II == I XX == I YY == I ZZ == I Why is that. Because just as what I mention earlier, Text Only 1 X rotate 180 degree in X axis So what happen if you do operation X twice? Text Only 1 rotate 180 degree, and rotate 180 degree in X axis That is the same as Text Only 1 rotate 360 degree in X axis = Do not rotate at all You can verify all these in the matrix form if you know how to do matrix multiplication. Or with some help of computer program, you should be able to get the same result.","title":"Pauli Operator form a Cyclic\u00a0Group"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group/#how-to-make-fast-commutator","text":"So these knowledge lay the foundation for implementing Commutator in a faster way. To avoid getting too theoretical, I will first show you how to work on real world example. Here is a matrix generated from H2 molecule. Don't worry if this is your first time to do chemical calculation. It is just a bunch of number and stuffs. I don't even know what they mean exactly. Knowing how to deal with Pauli Operator is just enough for the task. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 coefficient Pauli Operator -0.106 [I0 I1 I2 ] +0.045 [X0 Z1 X2 ] +0.045 [X0 Z1 X2 Z3] +0.045 [Y0 Z1 Y2 ] +0.045 [Y0 Z1 Y2 Z3] +0.173 [Z0 ] +0.173 [Z0 Z1 ] +0.166 [Z0 Z1 Z2 ] +0.166 [Z0 Z1 Z2 Z3] +0.120 [Z0 Z2 ] +0.120 [Z0 Z2 Z3] +0.168 [ Z1 ] -0.221 [ Z1 Z2 Z3] +0.174 [ Z1 Z3] -0.221 [ Z2 ] The task is, we have to check that if this is commute with the thing below. Text Only 1 2 coefficient Pauli Operator +1.0 [Z0 Z2] Let A be the first upper one, and B be the below one. We need to compute AB - BA ?= 0 . As we can see, A is a sum of a bunch of Pauli Operator. For this kind of thing, we can use distribution law. Text Only 1 W * ( E + R ) == WE + WR # distribution law Therefor instead of doing the whole big thing at once, we can just do a single slice of it at a time. Like taking the first term out of A and check whether AB = BA. Text Only 1 2 3 4 5 6 A0 = -0.106 [I0 I1 I2] B = +1.0 [Z0 Z2] A0*B ?= B*A0 (-0.106 [I0 I1 I2] )(+1.0 [Z0 Z2] ) ?= (+1.0 [Z0 Z2] )(-0.106 [I0 I1 I2] ) We can just treat the coefficient as a coefficient, and Pauli Operator as a variable. We can split the task into two seperate part. Like 3y - 3y = 0, all we need to look at is Text Only 1 2 3 4 1. whether the coefficient is the same value. 2. whether the Pauli Operator is the exact same thing. (-0.106 * +1.0) [I0 I1 I2][Z0 Z2] ?= (+1.0 * -0.106) [Z0 Z2][I0 I1 I2] For the coefficient, since they are all number, they obey all law from algebra. Namely, commutative law and associative law of multiplication. Text Only 1 2 3 4 Let a,b,c be arbitrary number. a*b = b*a # commutative law a*b*c = a*(b*c) # associative law Therefore it do not matter you multiple two number left of right. Any order can produce the same value. Let say Ac is coefficient of A and Bc is of B, Text Only 1 2 3 4 5 6 Ac*Bc == Bc*Ac hence, Ac*Bc (AB) ?= Bc*Ac (BA) Ac*Bc (AB) ?= Ac*Bc (BA) # Ac*Bc = Bc*Ac (AB) ?= (BA) # cancel out Ac*Bc Absolutely we can ignore the coefficient, however, the only thing in coefficient that we have to worry about is the i produced after two non commute Pauli Operator multiplied together i.e. XY = iZ etc. Text Only 1 2 3 4 5 6 e.g. K = X, L = Y KL ?= LK XY ?= YX iZ ?= -iZ iZ != -iZ So although both side got the same Pauli Z, the sign of i disagree. If you got more than one set of Pauli Operator multiplied, you have to count for how many i are produced and keep track of the sign. Text Only 1 2 3 4 5 6 7 e.g. XY0 XY1 ?= YZ0 YZ1 iZ0 iZ1 ?= -iZ0 -iZ1 ii Z0 Z1 ?= --ii Z0 Z1 -1 Z0 Z1 ?= -1 Z0 Z1 -1 Z0 Z1 == -1 Z0 Z1 Almost the same configuration but this time commute. To conclue on issue among coefficient, only the i and their sign you should pay attention to. Other do not worth the effort because they are 100% sure to be the exact same value. So, lets focus on the Pauli Operator. Text Only 1 2 3 4 5 6 7 8 9 A0 = [I0 I1 I2] B = [Z0 Z2] A0*B ?= B*A0 For A0*B [I0 I1 I2][Z0 Z2] = [IZ0 I1 IZ2] You can see index 1 is not contained in B, so instead of doing the full length multiplication, we can just extract those index both A0 and B share. So the problem size is smaller. Text Only 1 [I0 I1 I2][Z0 Z2] = [I0 I2][Z0 Z2] = [IZ0 IZ2] Those index both A0 and B share are the main target. Still we need to see what is outside of main target. Here we can use the property of Pauli Operator that different index COMMUTE. So we don't need to care where to put them. Front of back, do not matter. Text Only 1 2 [IZ0 IZ2] -> {IZ0 IZ2}[I1] or [I1]{IZ0 IZ2} {}for target As I mention earlier, I stand for Identity thus it do nothing, therefore Text Only 1 {IZ0 IZ2} = {Z0 Z2} And since A0 contains only I, it is automatically known as commute. 100% sure. You don't even need to compute it. Text Only 1 because IZ = ZI, if only I is invlove, it must commute. Let see what if it is non commute. Text Only 1 2 3 4 A1 = +0.045 [X0 Z1 X2] B = +1.0 [Z0 Z2] A1*B ?= B*A1 Again, only need to check the targeted part. Text Only 1 2 3 4 5 6 7 8 9 A1 = +0.045 {X0 X2} B = +1.0 {Z0 Z2} A1*B ?= B*A1 XZ0 XZ2 ?= ZX0 ZX2 -iY0 -iY2 ?= iY0 iY2 --ii Y0 Y2 ?= ii Y0 Y2 Y0 Y2 == Y0 Y2 Appending the non targeted part, Text Only 1 Y0 Y2 Z1 == Y0 Y2 Z1 In fact you don't even need to check for the non targeted part to see whether all term match. The real power of Cyclic Group property of Pauli Operator is that it ensured that all tensor product of Pauli Operator is unique. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 We can seperate terms in such manner {target}[non target] The thing brother me is that target part will change accouding to what it is multiplied to. Like A3 = {target3}[non target3] A4 = {target4}[non target4] B = {targetB} A3*B != B*A3 by coefficient but if {target4 * targetB} == {target3} adding its coefficient to A3*B may lead to A3*B == B*A3 Will there be such situation? Turn out there is no such situation. Let say Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 A3 = {X}[non target3] A4 = {Y}[non target4] B = {Z} First of all, A3==A4 if and only if target3==target4, given they have exactly same [non target] term. So target3 must not be target4. Second, property from Cyclic Group ensure that A3*B != A4*B. XY = YX = Z YZ = ZY = X Third, since multiplying Pauli Operator is a binary operation, this make Cyclic Group 100% true. So by this uniqueness, we can do all comparison separately.","title":"How to Make Fast Commutator"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/","text":"Qubit Matrix Chain Multiplication in O(n) \u00b6 Benchmark Basics Current status Naive coding What I have done in SymPauli Relational data structure and super parallelism Chain multiplication Scalablility But comes with great penalty Conclusion Benchmark \u00b6 SymPauli \u00b6 https://github.com/hirasawakinko/SymPauli Basics \u00b6 Any Matrix can be expressed in sum of Pauli Operator. Pauli Operator a set of operation in quantum computing. They are denoted as Text Only 1 I, X, Y, Z In their matrix form Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 I := [ 1 0 ] [ 0 1 ] X := [ 0 1 ] [ 1 0 ] Y := [ 0 -i ] [ i 0 ] Z := [ 1 0 ] [ 0 -1 ] The \"i\" in Y is the \"i\" of imaginary number. Let say there is a matrix A, you are able to carry Pauli decomposition to it. Text Only 1 2 3 4 5 Pauli decomposition: matrix A = summation(i)[ coefficient i * pauli{I, X, Y, Z} ] for example 4I + 2Y + 7X - 4Z + 3Y ... Then you can carry out tensor product to make larger matrix. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 I tensor X = [ 1 0 ] tensor X [ 0 1 ] = [ X 0 ] [ 0 X ] = [ 0 1 0 0 ] [ 1 0 0 0 ] [ 0 0 0 1 ] [ 0 0 1 0 ] And the rules of multiplications are: Text Only 1 2 3 4 5 6 7 8 I* == + * *I == + * XY == iZ YX == -iZ YZ == iX ZY == -iX ZX == iY XZ == -iY You may try multipying those by hand, to confirm that they are valid. And obviously these symbolic rules are valid, you can avoid matrix multiplication, and merely do the string manipulation. Text Only 1 2 3 4 IX -> X XY -> Z YZ -> X ... For example: Text Only 1 2 3 4 5 matrix A = 4I + 2Y + 7X - 4Z + 3Y matrix A * Pauli X = (4I + 2Y + 7X - 4Z + 3Y) * X = (4A + 2Z + 7I - 4Y + 3Z) I omitted all those coefficient changes. Not because you don't have to, it is just because coefficient is not the main concern in this research. Current status \u00b6 There are many Python library can do such symbolic quantum computation, however, not fast enough. Algorithm they use are naive, causing masive redundent runtime. For example OpenFermion. Some are not even usnig symbolic computation. Those are just expend string input into a matrix, and then carryout matrix vector multiplication. For example Qiskit, Qulacs. Which makes them absurbly slow in some of the most simple tasks. For example this. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 (*) represent tensor product matrixow we multiply it by matrixow long you think this would take? I can do this under a second single-handedly, but them? Probably take more than 1 year to output the answer. For tensor product, you multiply stuffs bitwise-ly. As I*X -> X , the result is just matrix B itself. Cool? Naive coding \u00b6 So, what about OpenFermion's naive coding? Well, they almost got it but not quite. Say you are multipying two matrix A and B: Text Only 1 2 3 4 5 6 matrix A | matrix B = I Y | = X Z + Y X | + Y Y + X Y | + X Y + Z X | + Y Z | Just as what you will do to (x + 3)(x + 2) , you do the same thing to these matrix. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 first lable them... matrix A | matrix B = I Y | = X Z (b1) + Y X | + Y Y (b2) + X Y | + X Y (b3) + Z X | + Y Z | matrix A * matrix B = matrix A * b1 + matrix A * b2 + matrix A * b3 ... So you would carry the bitwise multiplication like this: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 X Z (b1) Y Y (b2) X Y (b3) matrix A matrix A matrix A = I Y = I Y = I Y + Y X + + Y X + + Y X + X Y + X Y + X Y + Z X + Z X + Z X + Y Z + Y Z + Y Z Y Y (b2) X Y (b3) matrix A matrix A = I Y = I Y = something + + Y X + + Y X + X Y + X Y + Z X + Z X + Y Z + Y Z X Y (b3) matrix A = I Y = something + + Y X + X Y + Z X + Y Z At each step, you broadcase one row of matrix B to all rows of matrix A. Text Only 1 2 3 4 5 6 matrix A = I Y * X Z (b1) + Y X * X Z (b1) + X Y * X Z (b1) + Z X * X Z (b1) + Y Z * X Z (b1) This approach seems legit, but absolutely we can do better and faster. What I have done in SymPauli \u00b6 As you can see in the precious section, we have to call out matrix A multiple times in order to carryout complete process of matrix multiplication. From this, we know that matrix A is basically not going to change anyway. Also the not-so-obvious one is that, Pauli Operator has its cyclic group property. It means that we can totally predict the outcome. When you merged like terms i.e. 2y + 3y +7x = 5y + 7x , there is only unique Pauli tensors left in the pool. Let say you have I X Y Z , still ignoring coefficient. Text Only 1 2 (I X Y Z) * X = (X I Z Y) (I +X +Y +Z) is the simpliest form of itself, you cannot simplify it anymore. After multiplying something, the outcome is still in its simpliest form. And you should notice that multiplication in here literally means permutation. Text Only 1 2 3 4 5 (I X Y Z) * Y = (Y Z I X) (I X Y Z) * Z = (Z Y X I) Focus back on the matrix A * b1 : Text Only 1 2 3 4 5 6 7 X Z (b1) matrix A = I Y + Y X + X Y + Z X + Y Z Further focus on the left Pauli Operators: Text Only 1 2 3 4 5 6 7 X (b1) matrix A = I + Y + X + Z + Y By the previous rule, we know the answer already. Text Only 1 2 3 4 5 6 7 8 9 10 (I X Y Z) * X = (X I Z Y) X (b1) matrix A = I -> X + Y -> Z + X -> I + Z -> Y + Y -> Z Here you see some duplication. i.e. we already know that X*Z -> Y , so why are we still checking it row by row? This is just a waste of time. Here it comes the relational data structure. Relational data structure and super parallelism \u00b6 This is one part of matrix A. And we are going to perform unified permutation operator to them all. Text Only 1 2 3 4 5 6 matrix A = I * X + Y * X + X * X + Z * X + Y * X Here I purpose a relational data structure to execute a super parallelism algorithm. You have a fontend and a backend for this data structure. And you map every value of the fontend to the backend, so that its value refers to what it is at the back. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 front and back fontend backend I 0 = I Y 1 = X X 2 = Y Z 3 = Z Y mapping front to back fontend backend 0 0 = I 2 1 = X 1 2 = Y 3 3 = Z 2 When you do multiplication, we do it to the backend, not frontend. After that, you read out values of frontend from the backend. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 multiplying X fontend backend 0 0 = I 2 1 = X * X 1 2 = Y 3 3 = Z 2 multiplied X fontend backend 0 0 = X 2 1 = I 1 2 = Z 3 3 = Y 2 reading result fontend backend X < 0 0 = X Z < 2 1 = I I < 1 2 = Z Y < 3 3 = Y Z < 2 After reading out, you can reset matrix A to its init state solely by reseting the backend. Text Only 1 2 3 4 5 6 7 reset backend fontend backend I < 0 0 = I Y < 2 1 = X X < 1 2 = Y Z < 3 3 = Z Y < 2 So it is back to original matrix A. So you can do the next multiplication (also because it requires the original one), namely: Text Only 1 2 3 4 5 6 7 Y Y (b2) matrix A = I Y + Y X + X Y + Z X + Y Z Chain multiplication \u00b6 Last step in the last section we reset the backend. However it is not required if you are going to do a chain multiplication i.e. A * b * c * d * e * ... , {b c d e} are in small letter and they are one-row thing (not linear combination). Text Only 1 2 3 4 5 6 fontend backend I 0 = I Y 1 = X * b * c * d * e * ... X 2 = Y Z 3 = Z Y By not reseting the backend after every turn of multiplication, you are able to carry out the chain action that use precious state as the starting point of next action. So you can maintain the initial mapping and read the result with that initial mapping. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 initial mapping fontend backend 0 0 = I 2 1 = X * b * c * d * e * ... 1 2 = Y 3 3 = Z 2 after all multiplications fontend backend 0 0 = ? 2 1 = ? 1 2 = ? 3 3 = ? 2 you can read the result by the very same initial mapping fontend backend ? < 0 0 = ? ? < 2 1 = ? ? < 1 2 = ? ? < 3 3 = ? ? < 2 Scalablility \u00b6 This relational data structure and algorithm is parallel native. Even not under parallel programming, still be able to gain a masive speed up. Due to the fact that all data manipulation is done solely to the backend, and the backend is as small as a constant, i.e. size of backend array = 4 Pauli Operator * N qubits , complexity of O(n). With this size, you can easily pack that into CPU cache and do everything in unprecedented speed. This is the initial state of a 6 qubits backend, and you have one row of your matrix is (I I I I I I) : Text Only 1 2 3 4 5 6 7 8 qubits 0 1 2 3 4 5 0 = I 0 0 0 0 0 0 1 = X 1 1 1 1 1 1 2 = Y 2 2 2 2 2 2 3 = Z 3 3 3 3 3 3 my row : (I I I I I I) -> (0 0 0 0 0 0) For example multiplied by (X Y Z Y Z X) : Text Only 1 2 3 4 5 6 qubits 0 1 2 3 4 5 0 = I 1 2 3 2 3 1 1 = X 0 3 2 3 2 0 2 = Y 3 0 1 0 1 3 3 = Z 2 1 0 1 0 2 You just have to look at the same position of the table, to find out what it becomes now. Text Only 1 my row : (I I I I I I) -> (1 2 3 2 3 1) -> (X Y Z Y Z X) Same table applies to all rows. Multiply once, read many. Because Pauli Operator is Cyclic, Just like you rotate a analogue clock (those come with hours minutes pins), the internal relative position of 10 o'clock and 4 o'clock and others are not gonna to change. Second is that everything is summation, and the ordering of summation does not matter due to addition commutativity. So you can split the whole thing into subprocess and sum them up lately. Further is that tensor product of Pauli operator is carried out bitwise-ly, so that you can further split it into smaller subtasks. Also the small size of the backend makes the communicational cost very low. But comes with great penalty \u00b6 Read and write performance of this data structure is fatal. Since you have to first map the information of frontend to the backend, and after that you have to do the reverse. This kind of translation cost is super expensive, for matrix that is 30000 rows of Pauli tensor * 40 qubits , it is about 0.1X to 0.01X of the R/W performance. However, for the chain multiplication situation, R/W is only performed at first and the last, multiplying chain of 30000 rows of Pauli tensor * 40 qubits to the matrix of same size but in a linear combunation, this data structure is giving out 30000X to 40000X performance. Until now, I have been ignoring the coefficients, mainly focused on Pauli Operators. All comparison stated above is: Text Only 1 2 3 conventional with coefficient VS new without coefficient So yeah it is just BS benchmark and nothing you can take seriously. But that is because there is no room for improvement when we include coefficients into the calculation. At most 10X speend up at the same scale using Python, And I am already using Numpy for the heavy leafting coefficient work. So you can see that no coefficients, 40000X. Yes coefficients, 10X. Damn coefficients sucks. Conclusion \u00b6 I independently invented a new algorithm using relational data structure and phantomly revolutionized the contentional approach by 40000X under the same scale, but this is just when I ignore all computation work for the coefficients. With coefficients, 10X is the maximun I can get. So, long live the symbolic computation, god damn it numeric computation.","title":"Qubit Matrix Chain Multiplication in O(n)"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#qubit-matrix-chain-multiplication-in-on","text":"Benchmark Basics Current status Naive coding What I have done in SymPauli Relational data structure and super parallelism Chain multiplication Scalablility But comes with great penalty Conclusion","title":"Qubit Matrix Chain Multiplication in O(n)"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#benchmark","text":"","title":"Benchmark"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#sympauli","text":"https://github.com/hirasawakinko/SymPauli","title":"SymPauli"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#basics","text":"Any Matrix can be expressed in sum of Pauli Operator. Pauli Operator a set of operation in quantum computing. They are denoted as Text Only 1 I, X, Y, Z In their matrix form Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 I := [ 1 0 ] [ 0 1 ] X := [ 0 1 ] [ 1 0 ] Y := [ 0 -i ] [ i 0 ] Z := [ 1 0 ] [ 0 -1 ] The \"i\" in Y is the \"i\" of imaginary number. Let say there is a matrix A, you are able to carry Pauli decomposition to it. Text Only 1 2 3 4 5 Pauli decomposition: matrix A = summation(i)[ coefficient i * pauli{I, X, Y, Z} ] for example 4I + 2Y + 7X - 4Z + 3Y ... Then you can carry out tensor product to make larger matrix. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 I tensor X = [ 1 0 ] tensor X [ 0 1 ] = [ X 0 ] [ 0 X ] = [ 0 1 0 0 ] [ 1 0 0 0 ] [ 0 0 0 1 ] [ 0 0 1 0 ] And the rules of multiplications are: Text Only 1 2 3 4 5 6 7 8 I* == + * *I == + * XY == iZ YX == -iZ YZ == iX ZY == -iX ZX == iY XZ == -iY You may try multipying those by hand, to confirm that they are valid. And obviously these symbolic rules are valid, you can avoid matrix multiplication, and merely do the string manipulation. Text Only 1 2 3 4 IX -> X XY -> Z YZ -> X ... For example: Text Only 1 2 3 4 5 matrix A = 4I + 2Y + 7X - 4Z + 3Y matrix A * Pauli X = (4I + 2Y + 7X - 4Z + 3Y) * X = (4A + 2Z + 7I - 4Y + 3Z) I omitted all those coefficient changes. Not because you don't have to, it is just because coefficient is not the main concern in this research.","title":"Basics"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#current-status","text":"There are many Python library can do such symbolic quantum computation, however, not fast enough. Algorithm they use are naive, causing masive redundent runtime. For example OpenFermion. Some are not even usnig symbolic computation. Those are just expend string input into a matrix, and then carryout matrix vector multiplication. For example Qiskit, Qulacs. Which makes them absurbly slow in some of the most simple tasks. For example this. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 (*) represent tensor product matrixow we multiply it by matrixow long you think this would take? I can do this under a second single-handedly, but them? Probably take more than 1 year to output the answer. For tensor product, you multiply stuffs bitwise-ly. As I*X -> X , the result is just matrix B itself. Cool?","title":"Current status"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#naive-coding","text":"So, what about OpenFermion's naive coding? Well, they almost got it but not quite. Say you are multipying two matrix A and B: Text Only 1 2 3 4 5 6 matrix A | matrix B = I Y | = X Z + Y X | + Y Y + X Y | + X Y + Z X | + Y Z | Just as what you will do to (x + 3)(x + 2) , you do the same thing to these matrix. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 first lable them... matrix A | matrix B = I Y | = X Z (b1) + Y X | + Y Y (b2) + X Y | + X Y (b3) + Z X | + Y Z | matrix A * matrix B = matrix A * b1 + matrix A * b2 + matrix A * b3 ... So you would carry the bitwise multiplication like this: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 X Z (b1) Y Y (b2) X Y (b3) matrix A matrix A matrix A = I Y = I Y = I Y + Y X + + Y X + + Y X + X Y + X Y + X Y + Z X + Z X + Z X + Y Z + Y Z + Y Z Y Y (b2) X Y (b3) matrix A matrix A = I Y = I Y = something + + Y X + + Y X + X Y + X Y + Z X + Z X + Y Z + Y Z X Y (b3) matrix A = I Y = something + + Y X + X Y + Z X + Y Z At each step, you broadcase one row of matrix B to all rows of matrix A. Text Only 1 2 3 4 5 6 matrix A = I Y * X Z (b1) + Y X * X Z (b1) + X Y * X Z (b1) + Z X * X Z (b1) + Y Z * X Z (b1) This approach seems legit, but absolutely we can do better and faster.","title":"Naive coding"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#what-i-have-done-in-sympauli","text":"As you can see in the precious section, we have to call out matrix A multiple times in order to carryout complete process of matrix multiplication. From this, we know that matrix A is basically not going to change anyway. Also the not-so-obvious one is that, Pauli Operator has its cyclic group property. It means that we can totally predict the outcome. When you merged like terms i.e. 2y + 3y +7x = 5y + 7x , there is only unique Pauli tensors left in the pool. Let say you have I X Y Z , still ignoring coefficient. Text Only 1 2 (I X Y Z) * X = (X I Z Y) (I +X +Y +Z) is the simpliest form of itself, you cannot simplify it anymore. After multiplying something, the outcome is still in its simpliest form. And you should notice that multiplication in here literally means permutation. Text Only 1 2 3 4 5 (I X Y Z) * Y = (Y Z I X) (I X Y Z) * Z = (Z Y X I) Focus back on the matrix A * b1 : Text Only 1 2 3 4 5 6 7 X Z (b1) matrix A = I Y + Y X + X Y + Z X + Y Z Further focus on the left Pauli Operators: Text Only 1 2 3 4 5 6 7 X (b1) matrix A = I + Y + X + Z + Y By the previous rule, we know the answer already. Text Only 1 2 3 4 5 6 7 8 9 10 (I X Y Z) * X = (X I Z Y) X (b1) matrix A = I -> X + Y -> Z + X -> I + Z -> Y + Y -> Z Here you see some duplication. i.e. we already know that X*Z -> Y , so why are we still checking it row by row? This is just a waste of time. Here it comes the relational data structure.","title":"What I have done in SymPauli"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#relational-data-structure-and-super-parallelism","text":"This is one part of matrix A. And we are going to perform unified permutation operator to them all. Text Only 1 2 3 4 5 6 matrix A = I * X + Y * X + X * X + Z * X + Y * X Here I purpose a relational data structure to execute a super parallelism algorithm. You have a fontend and a backend for this data structure. And you map every value of the fontend to the backend, so that its value refers to what it is at the back. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 front and back fontend backend I 0 = I Y 1 = X X 2 = Y Z 3 = Z Y mapping front to back fontend backend 0 0 = I 2 1 = X 1 2 = Y 3 3 = Z 2 When you do multiplication, we do it to the backend, not frontend. After that, you read out values of frontend from the backend. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 multiplying X fontend backend 0 0 = I 2 1 = X * X 1 2 = Y 3 3 = Z 2 multiplied X fontend backend 0 0 = X 2 1 = I 1 2 = Z 3 3 = Y 2 reading result fontend backend X < 0 0 = X Z < 2 1 = I I < 1 2 = Z Y < 3 3 = Y Z < 2 After reading out, you can reset matrix A to its init state solely by reseting the backend. Text Only 1 2 3 4 5 6 7 reset backend fontend backend I < 0 0 = I Y < 2 1 = X X < 1 2 = Y Z < 3 3 = Z Y < 2 So it is back to original matrix A. So you can do the next multiplication (also because it requires the original one), namely: Text Only 1 2 3 4 5 6 7 Y Y (b2) matrix A = I Y + Y X + X Y + Z X + Y Z","title":"Relational data structure and super parallelism"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#chain-multiplication","text":"Last step in the last section we reset the backend. However it is not required if you are going to do a chain multiplication i.e. A * b * c * d * e * ... , {b c d e} are in small letter and they are one-row thing (not linear combination). Text Only 1 2 3 4 5 6 fontend backend I 0 = I Y 1 = X * b * c * d * e * ... X 2 = Y Z 3 = Z Y By not reseting the backend after every turn of multiplication, you are able to carry out the chain action that use precious state as the starting point of next action. So you can maintain the initial mapping and read the result with that initial mapping. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 initial mapping fontend backend 0 0 = I 2 1 = X * b * c * d * e * ... 1 2 = Y 3 3 = Z 2 after all multiplications fontend backend 0 0 = ? 2 1 = ? 1 2 = ? 3 3 = ? 2 you can read the result by the very same initial mapping fontend backend ? < 0 0 = ? ? < 2 1 = ? ? < 1 2 = ? ? < 3 3 = ? ? < 2","title":"Chain multiplication"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#scalablility","text":"This relational data structure and algorithm is parallel native. Even not under parallel programming, still be able to gain a masive speed up. Due to the fact that all data manipulation is done solely to the backend, and the backend is as small as a constant, i.e. size of backend array = 4 Pauli Operator * N qubits , complexity of O(n). With this size, you can easily pack that into CPU cache and do everything in unprecedented speed. This is the initial state of a 6 qubits backend, and you have one row of your matrix is (I I I I I I) : Text Only 1 2 3 4 5 6 7 8 qubits 0 1 2 3 4 5 0 = I 0 0 0 0 0 0 1 = X 1 1 1 1 1 1 2 = Y 2 2 2 2 2 2 3 = Z 3 3 3 3 3 3 my row : (I I I I I I) -> (0 0 0 0 0 0) For example multiplied by (X Y Z Y Z X) : Text Only 1 2 3 4 5 6 qubits 0 1 2 3 4 5 0 = I 1 2 3 2 3 1 1 = X 0 3 2 3 2 0 2 = Y 3 0 1 0 1 3 3 = Z 2 1 0 1 0 2 You just have to look at the same position of the table, to find out what it becomes now. Text Only 1 my row : (I I I I I I) -> (1 2 3 2 3 1) -> (X Y Z Y Z X) Same table applies to all rows. Multiply once, read many. Because Pauli Operator is Cyclic, Just like you rotate a analogue clock (those come with hours minutes pins), the internal relative position of 10 o'clock and 4 o'clock and others are not gonna to change. Second is that everything is summation, and the ordering of summation does not matter due to addition commutativity. So you can split the whole thing into subprocess and sum them up lately. Further is that tensor product of Pauli operator is carried out bitwise-ly, so that you can further split it into smaller subtasks. Also the small size of the backend makes the communicational cost very low.","title":"Scalablility"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#but-comes-with-great-penalty","text":"Read and write performance of this data structure is fatal. Since you have to first map the information of frontend to the backend, and after that you have to do the reverse. This kind of translation cost is super expensive, for matrix that is 30000 rows of Pauli tensor * 40 qubits , it is about 0.1X to 0.01X of the R/W performance. However, for the chain multiplication situation, R/W is only performed at first and the last, multiplying chain of 30000 rows of Pauli tensor * 40 qubits to the matrix of same size but in a linear combunation, this data structure is giving out 30000X to 40000X performance. Until now, I have been ignoring the coefficients, mainly focused on Pauli Operators. All comparison stated above is: Text Only 1 2 3 conventional with coefficient VS new without coefficient So yeah it is just BS benchmark and nothing you can take seriously. But that is because there is no room for improvement when we include coefficients into the calculation. At most 10X speend up at the same scale using Python, And I am already using Numpy for the heavy leafting coefficient work. So you can see that no coefficients, 40000X. Yes coefficients, 10X. Damn coefficients sucks.","title":"But comes with great penalty"},{"location":"toward_science/Qubit%20Matrix%20Chain%20Multiplication%20in%20O%28n%29/#conclusion","text":"I independently invented a new algorithm using relational data structure and phantomly revolutionized the contentional approach by 40000X under the same scale, but this is just when I ignore all computation work for the coefficients. With coefficients, 10X is the maximun I can get. So, long live the symbolic computation, god damn it numeric computation.","title":"Conclusion"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/","text":"So What Exactly is happenig in Matrix Multiplication? \u00b6 Assuming Motivation of Matrix * Vector Non square matrix? Matrix * Matrix How are these related to deep learning? Matrix Multiplication in Linear Algebra is probably the most spooky and mysterious mathematical function in the world. You can look it up in any textbooks, they suck, none of them really talk about how it works, why it works in that way, and why not the other ways. Turn out no one seems understand what exactly is happening in Matrix Multiplication? I heard you say \"no, you are wrong, I am one of the authors of that pile of books and I am sure I know my stuff\". Oh yeah? Prove my that. Oh you have already proved that. You wrote a book. And the content doesn't reflect that you understand Matrix at all. So here is me, after reading several of those insufferable textbooks, giving up understanding what really is a Matrix and its Multiplication. Then this idea comes up with my mind when I was reading a book about deep learning few days ago... Assuming \u00b6 I assume reader of this article has basic ideas about Vector, Matrix, Inner Product. Also I assume that reader do not understand the way that why Matrix multiply stuffs in that way. Text Only 1 2 3 [ 1 2 3 ] * [ x i t ] = [ 1x+2y+3z blah blah ] [ 4 5 6 ] [ y j u ] [ blah blah blah ] [ 7 8 9 ] [ z k v ] [ blah blah blah ] I assume that you are asking: ^What the ** does this means???? Motivation of Matrix * Vector \u00b6 Let say there exist some factors, represented as a vector Text Only 1 2 3 v = [v1] [v2] [v3] v is a vector, so I make it into a conventional column vector. v consist of 3 components of v1 v2 v3. And there are actions being token upon those values of v1 v2 v3. For example they represent wages of labers. The boss devided to increase everybody's wages by 100%. How are you going to computer that using vector? Text Only 1 2 3 4 5 6 7 new_v = 2 * [v1] [v2] [v3] = [2 v1] [2 v2] [2 v3] This is how you would do it. Multiple every component of the vector by a common scalar quantity. This sounds easy, but what about this. The boss now decided to increase everyone's wages by the total sum of 10% of their colleagues' wages. Now you cannot simply multiply a scalar quantity and call it a day. You need to look at other people's wages in order to determine the amount of increment. Rephase in the language of mathematical function: Before: Text Only 1 2 3 4 eq.1) new_v1 = 2 * v1 define this as function f as func_f . f is a function of variable v1. After: Text Only 1 2 3 4 eq.2) new_v1 = v1 + 0.1*v2 + 0.1*v3 define this as function g as func_g . g is a function of variables {v1, v2, v3} . Now that you see eq.2 got more variables on the right side of the equation, also indicate that it is a multi-variable function. new_v1 do not only rely on the value of old_v1, only rely on old value from v2 and v3. This sounds like non-STEM people talking about society issues. \"XX phenomenon is due to many factors thus it is complicated, so that we need more research into that blah blah blah\". Of couse you need more research. But speaking of research, we have already had the right tool for anlysing this kind of multi-factor multi-cause phenomenon. This tool is called Linear Algebra. So how can Linear Algebra solve this kind of multi-factor problem? You do a Matrix Multiplication. First consider just the case of v1. Namely, the process of old_v1 transfer to new_v1. Text Only 1 2 3 4 5 new_v1 = [1 0.1 0.1] * [v1] [v2] [v3] = 1*v1 + 0.1*v2 + 0.1*v3 So this is a vector * vector situation. Or formally you may call it a \"inner product\" or a \"scalar product\". Looking at the right side of the equation, there is a row vector on the left and column vector on the right, you multiply them component-wise, and that add them together. The result will be a scaler quantity, not vector. This is how you produce the new value of v1. Through the inner product, now you are mixing up the values of all components. new_v1 have some portion of v2 and some portion of v3 in it. So this is a multi-factor stuff! And there is hidden parameter underneath this inner product. That is, components of all vectors are position-aware. You must not alter any of the position arbitrarily. Let say swaping 1 and 0.1 in the row vector for fun, and you will get the wrong answer. Text Only 1 2 3 4 5 new_v1' = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 It is because the position matters. The position means something even it is not written out. In particular, in the column vector, from top to the bottom, it contains the information of colleague no.1 to 3 respectively. And in the row vector, from left to right, it contains the information the coefficient you wanted to multiply toward colleague no.1 to 3's wages respectively. Text Only 1 2 3 [coef for v1, coef for v2, coef for v3] * [v1=wage of colleague 1] [v2=wage of colleague 2] [v3=wage of colleague 3] You can subsitute any real value you like, as long as you obey the idea of what meaning does that position represents. So this is the case for new_v1. What about new_v2 and new_v3? Text Only 1 2 3 4 5 6 7 8 9 10 11 new_v2 = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 new_v3 = [0.1 0.1 1] * [v1] [v2] [v3] = 0.1*v1 + 0.1*v2 + 1*v3 You can see that they are structually the same accross v1 v2 v3. They are all inner product. Now, we are producting the new wage one-by-one, which seems inefficient. Is there a way to do all for once? Yes. That is the Matrix * Vector. Before going into Matrix * Vector, there is a key idea that must be recap. That is, components in the column vector is position-aware and you can not change that afterwards. Namely: Text Only 1 2 3 [v1=wage of colleague 1] [v2=wage of colleague 2] [v3=wage of colleague 3] Thus after computing their new wages, the position excusively for one person is still reserved for that same person. Text Only 1 2 3 [old_v1] -> [new_v1] [old_v2] -> [new_v2] [old_v3] -> [new_v3] Column vector is still column vector, and that position is still representing the particular person's wage. In one word, the column vector must maintain the exact same structure after Matrix * Vector. To be clear: This is what we have already know. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 new_v1 = [1 0.1 0.1] * [v1] [v2] [v3] = 1*v1 + 0.1*v2 + 0.1*v3 = new_v1 new_v2 = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 = new_v2 new_v3 = [0.1 0.1 1] * [v1] [v2] [v3] = 0.1*v1 + 0.1*v2 + 1*v3 = new_v2 And they should be in this structure. Text Only 1 2 3 [new_v1] [new_v2] [new_v3] You may have already see this coming. You just combine them structurely. Text Only 1 2 3 [ 1 0.1 0.1] * [v1] = [new_v1] [0.1 1 0.1] [v2] [new_v2] [0.1 0.1 1 ] [v3] [new_v3] To make it visually making more sense, I should write it in this way. Text Only 1 2 3 4 5 6 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs new_v1 > [ 1 0.1 0.1] = [new_v1] this row outputs new_v2 > [0.1 1 0.1] [new_v2] this row outputs new_v3 > [0.1 0.1 1 ] [new_v3] This answers two questions at the same time. Why is that multiplying a matrix need to do row-column, row-column kind of stuff (as what conventional textbooks told you to do) ? It is to maintain the structure of the input vector. Meanwhile, still has to make sure the output is a linear combination of the old ones ( namely new_v1 = a*v1 + b*v2 + c*v3 ) . So that you are able to deal with the \"many things are inter-related to each other\" hard problem. Non square matrix? \u00b6 But there also exist non square matrix in the world, as the only matrix presented in the previous section is merely a square matrix. How can I make sense to any of those non square matrix? Recap the last picture in the previous section. Text Only 1 2 3 4 5 6 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs new_v1 > [ 1 0.1 0.1] = [new_v1] this row outputs new_v2 > [0.1 1 0.1] [new_v2] this row outputs new_v3 > [0.1 0.1 1 ] [new_v3] Previously, we are considering the positional meaning of the output vector is the same as the input vector. They still representing wages of someone. What if now it does not anymore. Say, now these 3 colleagues's wages are affecting other stuffs. For example they will spend their money on their weekend, and there are many local stores in the shopping mall. Somehow you get to know how exactly they are going to spend on those stores. Thus you can have this new matrix multiplication. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs shop1_sales > [ 1 0 3 ] = [shop1_sales] this row outputs shop2_sales > [ 0 2 0 ] [shop2_sales] this row outputs shop3_sales > [ 3 0 4 ] [shop3_sales] this row outputs shop4_sales > [ 2 1 2 ] [shop4_sales] this row outputs shop5_sales > [ 1 5 0 ] [shop5_sales] [ 1 0 3 ] * [v1] = [shop1_sales] [ 0 2 0 ] [v2] [shop2_sales] [ 3 0 4 ] [v3] [shop3_sales] [ 2 1 2 ] [shop4_sales] [ 1 5 0 ] [shop5_sales] By such non square Matrix Multiplication, not only you have changed the size of the vector outcome, you also changed what those components in the vector are standing for. And these changes are intended and information of what stands for what is embeded in the Matrix you choose to multiply. Does this make sense? Matrix * Matrix \u00b6 So, as the boss increase their wages, they can spend more to buy things. And they are not going to change their shopping behavior at all. And you want to see what is the different between now and then. You can do this, Matrix * Matrix . Text Only 1 2 3 4 5 [ 1 0 3 ] * [v1 new_v1] = [shop1_sales new_shop1_sales] [ 0 2 0 ] [v2 new_v2] [shop2_sales new_shop2_sales] [ 3 0 4 ] [v3 new_v1] [shop3_sales new_shop3_sales] [ 2 1 2 ] [shop4_sales new_shop4_sales] [ 1 5 0 ] [shop5_sales new_shop5_sales] Or this can be, somehow there is another team of colleagues consist of 3 people (w1 w2 w3), also they shop on the same shopping mall in the weekend and the way they spend their money is totally the same as those 3 people back there. Text Only 1 2 3 4 5 [ 1 0 3 ] * [v1 w1] = [shop1_sales_by_v new_shop1_sales_by_w] [ 0 2 0 ] [v2 w2] [shop2_sales_by_v new_shop2_sales_by_w] [ 3 0 4 ] [v3 w3] [shop3_sales_by_v new_shop3_sales_by_w] [ 2 1 2 ] [shop4_sales_by_v new_shop4_sales_by_w] [ 1 5 0 ] [shop5_sales_by_v new_shop5_sales_by_w] How are these related to deep learning? \u00b6 As I explained in this article, using matrix multiplication help you solve that \"many things are inter-related to each other\" problem, this is why machine learning use Linear Algebra as its backbone. For example there is a picture. You are going to write a program to determin what is in the picture. There may be a person in the picture, or maybe a dog, or a cat, or a flower. But this task is not easy at all per the programming point of view. There may be hair-like stuff in the picture but that doesn't automatically lead to the conclusion that there is a dog inside the picture. A dog is more that hairs. Maybe paws + hairs + big eyes + more can satisfy most of the features of a dog. But writing such program to capture all the features of a dog is overwhelmingly complex. What should you do? Matrix multiplication. Text Only 1 2 3 4 5 6 7 8 9 Matrix * [pixel1] = [feature1] [pixel2] [feature2] [pixel3] [feature3] . [feature4] . [feature5] . [feature6] . . . After gone through all the previous sections you should be able to see how this works. Otherwise just inform me that my explaination sucks. I will try improve it and edit it if you request. So ultimately you want to extract whether there is this feature or that feature from the original picture. You multiply the vector consitute of information of the original picture by the specific matrix. So that for example the feature1, will be a linear combination of all the pixels. Text Only 1 feature1 = a*pixel1 + b*pixel2 + c*pixel3 + ... For instance, if feature49 requires that pixel1, 3, 26 are filled with color at the same time, and everything else are leave blank: Text Only 1 feature49 = +a*pixel1 -b*picel2 +c*pixel3 -d*pixel4 -... + z*pixel26 Every pixel that is not in {1,3,26} contribute nagetively to the value of feature49. Only when pixels in {1,3,26} are filled with colors and not the others satisfy the existence of feature49, otherwise the picture do not have feature49. So you extracted the basic features from picture. There is more you can do. What about combination of basic features. For example a more complex feature that requires feature1 and feature2 's co-existence. Like recognizing hairs and paws. The next step is to recogize that \"having hairs and having paws at the same time\" is important than either one of those. So there is another matrix multiplication for this. Text Only 1 2 3 4 5 6 7 8 9 10 11 Matrix2 * [feature1] = [complex_feature1] [feature2] [complex_feature2] [feature3] [complex_feature3] [feature4] [complex_feature4] [feature5] [complex_feature5] [feature6] [complex_feature6] . [complex_feature7] . [complex_feature8] . . . . And you can do this again and again and agin... finally you have a row vactor that decides which super complex feature indicates that it is highly likely to have a dog inside a picture. Text Only 1 2 3 4 5 6 7 8 9 Row Vector * [super_complex_feature1] = (a scalar. zero or one. yes or no.) [super_complex_feature2] [super_complex_feature3] [super_complex_feature4] [super_complex_feature5] [super_complex_feature6] . . . Now deep learning make sense too, after understanding what is happening in Matrix Multiplication. And also it is not hard to understand that solving problems through Linear Algebra can handle way more complex problems then any methods by non-STEM scholars. You sure can have absurbly larger matrix to represent every single distinct feature of everything to study how they are inter-related to each other. But what I have seen in the non-STEM field? Ploting a 3 dimensional graph is maxium. All they can imagine is up to 3 features. Hairs and paws and big-eyes and 4-legs for a dog? That counts to 4 and it is way to complicated for human to understand. \"You can never understand a dog through numbers\" is what they will say. But I disagree.","title":"So What Exactly is happenig in Matrix Multiplication?"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#so-what-exactly-is-happenig-in-matrix-multiplication","text":"Assuming Motivation of Matrix * Vector Non square matrix? Matrix * Matrix How are these related to deep learning? Matrix Multiplication in Linear Algebra is probably the most spooky and mysterious mathematical function in the world. You can look it up in any textbooks, they suck, none of them really talk about how it works, why it works in that way, and why not the other ways. Turn out no one seems understand what exactly is happening in Matrix Multiplication? I heard you say \"no, you are wrong, I am one of the authors of that pile of books and I am sure I know my stuff\". Oh yeah? Prove my that. Oh you have already proved that. You wrote a book. And the content doesn't reflect that you understand Matrix at all. So here is me, after reading several of those insufferable textbooks, giving up understanding what really is a Matrix and its Multiplication. Then this idea comes up with my mind when I was reading a book about deep learning few days ago...","title":"So What Exactly is happenig in Matrix Multiplication?"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#assuming","text":"I assume reader of this article has basic ideas about Vector, Matrix, Inner Product. Also I assume that reader do not understand the way that why Matrix multiply stuffs in that way. Text Only 1 2 3 [ 1 2 3 ] * [ x i t ] = [ 1x+2y+3z blah blah ] [ 4 5 6 ] [ y j u ] [ blah blah blah ] [ 7 8 9 ] [ z k v ] [ blah blah blah ] I assume that you are asking: ^What the ** does this means????","title":"Assuming"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#motivation-of-matrix-vector","text":"Let say there exist some factors, represented as a vector Text Only 1 2 3 v = [v1] [v2] [v3] v is a vector, so I make it into a conventional column vector. v consist of 3 components of v1 v2 v3. And there are actions being token upon those values of v1 v2 v3. For example they represent wages of labers. The boss devided to increase everybody's wages by 100%. How are you going to computer that using vector? Text Only 1 2 3 4 5 6 7 new_v = 2 * [v1] [v2] [v3] = [2 v1] [2 v2] [2 v3] This is how you would do it. Multiple every component of the vector by a common scalar quantity. This sounds easy, but what about this. The boss now decided to increase everyone's wages by the total sum of 10% of their colleagues' wages. Now you cannot simply multiply a scalar quantity and call it a day. You need to look at other people's wages in order to determine the amount of increment. Rephase in the language of mathematical function: Before: Text Only 1 2 3 4 eq.1) new_v1 = 2 * v1 define this as function f as func_f . f is a function of variable v1. After: Text Only 1 2 3 4 eq.2) new_v1 = v1 + 0.1*v2 + 0.1*v3 define this as function g as func_g . g is a function of variables {v1, v2, v3} . Now that you see eq.2 got more variables on the right side of the equation, also indicate that it is a multi-variable function. new_v1 do not only rely on the value of old_v1, only rely on old value from v2 and v3. This sounds like non-STEM people talking about society issues. \"XX phenomenon is due to many factors thus it is complicated, so that we need more research into that blah blah blah\". Of couse you need more research. But speaking of research, we have already had the right tool for anlysing this kind of multi-factor multi-cause phenomenon. This tool is called Linear Algebra. So how can Linear Algebra solve this kind of multi-factor problem? You do a Matrix Multiplication. First consider just the case of v1. Namely, the process of old_v1 transfer to new_v1. Text Only 1 2 3 4 5 new_v1 = [1 0.1 0.1] * [v1] [v2] [v3] = 1*v1 + 0.1*v2 + 0.1*v3 So this is a vector * vector situation. Or formally you may call it a \"inner product\" or a \"scalar product\". Looking at the right side of the equation, there is a row vector on the left and column vector on the right, you multiply them component-wise, and that add them together. The result will be a scaler quantity, not vector. This is how you produce the new value of v1. Through the inner product, now you are mixing up the values of all components. new_v1 have some portion of v2 and some portion of v3 in it. So this is a multi-factor stuff! And there is hidden parameter underneath this inner product. That is, components of all vectors are position-aware. You must not alter any of the position arbitrarily. Let say swaping 1 and 0.1 in the row vector for fun, and you will get the wrong answer. Text Only 1 2 3 4 5 new_v1' = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 It is because the position matters. The position means something even it is not written out. In particular, in the column vector, from top to the bottom, it contains the information of colleague no.1 to 3 respectively. And in the row vector, from left to right, it contains the information the coefficient you wanted to multiply toward colleague no.1 to 3's wages respectively. Text Only 1 2 3 [coef for v1, coef for v2, coef for v3] * [v1=wage of colleague 1] [v2=wage of colleague 2] [v3=wage of colleague 3] You can subsitute any real value you like, as long as you obey the idea of what meaning does that position represents. So this is the case for new_v1. What about new_v2 and new_v3? Text Only 1 2 3 4 5 6 7 8 9 10 11 new_v2 = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 new_v3 = [0.1 0.1 1] * [v1] [v2] [v3] = 0.1*v1 + 0.1*v2 + 1*v3 You can see that they are structually the same accross v1 v2 v3. They are all inner product. Now, we are producting the new wage one-by-one, which seems inefficient. Is there a way to do all for once? Yes. That is the Matrix * Vector. Before going into Matrix * Vector, there is a key idea that must be recap. That is, components in the column vector is position-aware and you can not change that afterwards. Namely: Text Only 1 2 3 [v1=wage of colleague 1] [v2=wage of colleague 2] [v3=wage of colleague 3] Thus after computing their new wages, the position excusively for one person is still reserved for that same person. Text Only 1 2 3 [old_v1] -> [new_v1] [old_v2] -> [new_v2] [old_v3] -> [new_v3] Column vector is still column vector, and that position is still representing the particular person's wage. In one word, the column vector must maintain the exact same structure after Matrix * Vector. To be clear: This is what we have already know. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 new_v1 = [1 0.1 0.1] * [v1] [v2] [v3] = 1*v1 + 0.1*v2 + 0.1*v3 = new_v1 new_v2 = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 = new_v2 new_v3 = [0.1 0.1 1] * [v1] [v2] [v3] = 0.1*v1 + 0.1*v2 + 1*v3 = new_v2 And they should be in this structure. Text Only 1 2 3 [new_v1] [new_v2] [new_v3] You may have already see this coming. You just combine them structurely. Text Only 1 2 3 [ 1 0.1 0.1] * [v1] = [new_v1] [0.1 1 0.1] [v2] [new_v2] [0.1 0.1 1 ] [v3] [new_v3] To make it visually making more sense, I should write it in this way. Text Only 1 2 3 4 5 6 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs new_v1 > [ 1 0.1 0.1] = [new_v1] this row outputs new_v2 > [0.1 1 0.1] [new_v2] this row outputs new_v3 > [0.1 0.1 1 ] [new_v3] This answers two questions at the same time. Why is that multiplying a matrix need to do row-column, row-column kind of stuff (as what conventional textbooks told you to do) ? It is to maintain the structure of the input vector. Meanwhile, still has to make sure the output is a linear combination of the old ones ( namely new_v1 = a*v1 + b*v2 + c*v3 ) . So that you are able to deal with the \"many things are inter-related to each other\" hard problem.","title":"Motivation of Matrix * Vector"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#non-square-matrix","text":"But there also exist non square matrix in the world, as the only matrix presented in the previous section is merely a square matrix. How can I make sense to any of those non square matrix? Recap the last picture in the previous section. Text Only 1 2 3 4 5 6 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs new_v1 > [ 1 0.1 0.1] = [new_v1] this row outputs new_v2 > [0.1 1 0.1] [new_v2] this row outputs new_v3 > [0.1 0.1 1 ] [new_v3] Previously, we are considering the positional meaning of the output vector is the same as the input vector. They still representing wages of someone. What if now it does not anymore. Say, now these 3 colleagues's wages are affecting other stuffs. For example they will spend their money on their weekend, and there are many local stores in the shopping mall. Somehow you get to know how exactly they are going to spend on those stores. Thus you can have this new matrix multiplication. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs shop1_sales > [ 1 0 3 ] = [shop1_sales] this row outputs shop2_sales > [ 0 2 0 ] [shop2_sales] this row outputs shop3_sales > [ 3 0 4 ] [shop3_sales] this row outputs shop4_sales > [ 2 1 2 ] [shop4_sales] this row outputs shop5_sales > [ 1 5 0 ] [shop5_sales] [ 1 0 3 ] * [v1] = [shop1_sales] [ 0 2 0 ] [v2] [shop2_sales] [ 3 0 4 ] [v3] [shop3_sales] [ 2 1 2 ] [shop4_sales] [ 1 5 0 ] [shop5_sales] By such non square Matrix Multiplication, not only you have changed the size of the vector outcome, you also changed what those components in the vector are standing for. And these changes are intended and information of what stands for what is embeded in the Matrix you choose to multiply. Does this make sense?","title":"Non square matrix?"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#matrix-matrix","text":"So, as the boss increase their wages, they can spend more to buy things. And they are not going to change their shopping behavior at all. And you want to see what is the different between now and then. You can do this, Matrix * Matrix . Text Only 1 2 3 4 5 [ 1 0 3 ] * [v1 new_v1] = [shop1_sales new_shop1_sales] [ 0 2 0 ] [v2 new_v2] [shop2_sales new_shop2_sales] [ 3 0 4 ] [v3 new_v1] [shop3_sales new_shop3_sales] [ 2 1 2 ] [shop4_sales new_shop4_sales] [ 1 5 0 ] [shop5_sales new_shop5_sales] Or this can be, somehow there is another team of colleagues consist of 3 people (w1 w2 w3), also they shop on the same shopping mall in the weekend and the way they spend their money is totally the same as those 3 people back there. Text Only 1 2 3 4 5 [ 1 0 3 ] * [v1 w1] = [shop1_sales_by_v new_shop1_sales_by_w] [ 0 2 0 ] [v2 w2] [shop2_sales_by_v new_shop2_sales_by_w] [ 3 0 4 ] [v3 w3] [shop3_sales_by_v new_shop3_sales_by_w] [ 2 1 2 ] [shop4_sales_by_v new_shop4_sales_by_w] [ 1 5 0 ] [shop5_sales_by_v new_shop5_sales_by_w]","title":"Matrix * Matrix"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#how-are-these-related-to-deep-learning","text":"As I explained in this article, using matrix multiplication help you solve that \"many things are inter-related to each other\" problem, this is why machine learning use Linear Algebra as its backbone. For example there is a picture. You are going to write a program to determin what is in the picture. There may be a person in the picture, or maybe a dog, or a cat, or a flower. But this task is not easy at all per the programming point of view. There may be hair-like stuff in the picture but that doesn't automatically lead to the conclusion that there is a dog inside the picture. A dog is more that hairs. Maybe paws + hairs + big eyes + more can satisfy most of the features of a dog. But writing such program to capture all the features of a dog is overwhelmingly complex. What should you do? Matrix multiplication. Text Only 1 2 3 4 5 6 7 8 9 Matrix * [pixel1] = [feature1] [pixel2] [feature2] [pixel3] [feature3] . [feature4] . [feature5] . [feature6] . . . After gone through all the previous sections you should be able to see how this works. Otherwise just inform me that my explaination sucks. I will try improve it and edit it if you request. So ultimately you want to extract whether there is this feature or that feature from the original picture. You multiply the vector consitute of information of the original picture by the specific matrix. So that for example the feature1, will be a linear combination of all the pixels. Text Only 1 feature1 = a*pixel1 + b*pixel2 + c*pixel3 + ... For instance, if feature49 requires that pixel1, 3, 26 are filled with color at the same time, and everything else are leave blank: Text Only 1 feature49 = +a*pixel1 -b*picel2 +c*pixel3 -d*pixel4 -... + z*pixel26 Every pixel that is not in {1,3,26} contribute nagetively to the value of feature49. Only when pixels in {1,3,26} are filled with colors and not the others satisfy the existence of feature49, otherwise the picture do not have feature49. So you extracted the basic features from picture. There is more you can do. What about combination of basic features. For example a more complex feature that requires feature1 and feature2 's co-existence. Like recognizing hairs and paws. The next step is to recogize that \"having hairs and having paws at the same time\" is important than either one of those. So there is another matrix multiplication for this. Text Only 1 2 3 4 5 6 7 8 9 10 11 Matrix2 * [feature1] = [complex_feature1] [feature2] [complex_feature2] [feature3] [complex_feature3] [feature4] [complex_feature4] [feature5] [complex_feature5] [feature6] [complex_feature6] . [complex_feature7] . [complex_feature8] . . . . And you can do this again and again and agin... finally you have a row vactor that decides which super complex feature indicates that it is highly likely to have a dog inside a picture. Text Only 1 2 3 4 5 6 7 8 9 Row Vector * [super_complex_feature1] = (a scalar. zero or one. yes or no.) [super_complex_feature2] [super_complex_feature3] [super_complex_feature4] [super_complex_feature5] [super_complex_feature6] . . . Now deep learning make sense too, after understanding what is happening in Matrix Multiplication. And also it is not hard to understand that solving problems through Linear Algebra can handle way more complex problems then any methods by non-STEM scholars. You sure can have absurbly larger matrix to represent every single distinct feature of everything to study how they are inter-related to each other. But what I have seen in the non-STEM field? Ploting a 3 dimensional graph is maxium. All they can imagine is up to 3 features. Hairs and paws and big-eyes and 4-legs for a dog? That counts to 4 and it is way to complicated for human to understand. \"You can never understand a dog through numbers\" is what they will say. But I disagree.","title":"How are these related to deep learning?"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/","text":"Special and General Commutativity of Pauli Operator \u00b6 Commutator = AB-BA. People have been wasting time on their shit code to do this arithematic straightly. Here I propose the new algorithm. Premise \u00b6 Premise: Pauli Operator \u00b6 Pauli Operator is a set of 2x2 matrix denoted by symbols of {I, X, Y, Z}. They are matrix, so they obey every law of linear algebra. They are the core part of Quantum Computing. Text Only 1 2 3 4 5 6 7 8 9 10 11 I = [ 1 0] [ 0 1] X = [ 0 1] [ 1 0] Y = [ 0 -j] [ j 0] Z = [ 1 0] [ 0 -1] Premise: Dictionary for Pauli Operator multiplication \u00b6 First of all, we need a dictionary to check what is what, when two Pauli multiplied together, what will be the result. And since matrix multiplication is binary operation, the dictionary key consist of two consecutive Pauli Operator symbols. I choose the approach that seperate Pauli Operator and its coefficient to reduce total count of loops in the program. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Seperating Pauli Operator and its coefficient lookup_xyz = { 'XY' : 'Z' , 'YX' : 'Z' , 'XZ' : 'Y' , 'ZX' : 'Y' , 'YZ' : 'X' , 'ZY' : 'X' } lookup_cof = { 'XY' : 1 j , 'YX' : - 1 j , 'XZ' : - 1 j , 'ZX' : 1 j , 'YZ' : 1 j , 'ZY' : - 1 j } But if you choose the compounded approach, you would need to call out element[0], element[1] which is a waste of time. Python 1 2 3 4 5 6 7 # Compounded Pauli Operator and its coefficient lookup = { 'XY' : ( 'Z' , 1 j ), 'YX' : ( 'Z' , - 1 j ), 'XZ' : ( 'Y' , - 1 j ), 'ZX' : ( 'Y' , 1 j ), 'YZ' : ( 'X' , 1 j ), 'ZY' : ( 'X' , - 1 j ) } Premise: Terms in linear combination must be unique \u00b6 By the way, this is all established in the premise of well defined dataset. Namely, all terms inside the linear combination are unique. For example let say we have a linear combination of two Z1 (see below). It will automatically merge them into one. Text Only 1 2 QubitOperator('''1 [Z1] + 1 [Z1]''') = 2 [Z1] I want the merged version. Otherwise my algorithm do not work. Premise: comm(A, B) as the symbol of commutator \u00b6 The convention for mathematical symbol of commutator is [A, B]. Which stand for the arithematic operation of (AB - BA). I must not use this anywhere in my article because this symbolically collides with Python code and bring unnecessary confusion textually. Instead, I use comm(A, B) to represent the comumutator operation. Singular Commutativity \u00b6 Single means only one term in the linear combination. Let's first deal with the most specific one, i.e. comm(single, single). Say we have two Pauli Operator a and b. We need to check if they are commute to each other. Text Only 1 2 3 4 5 6 7 8 9 10 a) +1.0 Y0 X1 X2 Y3 b) +1.0 Z1 X3 want: comm(a, b) comm(a, b) = comm( +1.0 Y0 X1 X2 Y3 , +1.0 Z1 X3) # remember AB-BA = (+1.0 Y0 X1 X2 Y3)(+1.0 Z1 X3) - (+1.0 Z1 X3)(+1.0 Y0 X1 X2 Y3) How can we solve this? How to multiply Pauli Operator? Multiplication of Pauli Operator \u00b6 First thing to know is that either a and b is tensor product of Pauli Operators with coefficient. Text Only 1 2 3 [coefficient] [tensor product of Pauli Operators] a) +1.0 Y0 X1 X2 Y3 b) +1.0 Z1 X3 The neat thing about tensor product is that the outcome is in fact index sensitive. Which means that you cannot seperate the XYZ and the index of it. Text Only 1 2 3 [Pauli XYZ] [index] Z1 = Z 1 X3 = X 3 Pauli Operator can only multiply to the same index. Text Only 1 2 Z1 X3 == Z1 X3 # nothing happen since index differ Z1 X1 == ZX1 = (Y1, 1j) # Outcome is Y1 with coefficient 1j, according to the dictionary And the coefficient can be any usually number. You can do this multiplication vertically (or should say vistually) Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 comm(a, b) = comm( +1.0 Y0 X1 X2 Y3 , +1.0 Z1 X3) = (+1.0 Y0 X1 X2 Y3) - (+1.0 Z1 X3) (+1.0 Z1 X3) (+1.0 Y0 X1 X2 Y3) = (+1.0 Y0 XZ1 X2 YX3) - (+1.0 Y0 ZX1 X2 XY3) = (+1.0 Y0 -1jY1 X2 -1jZ3 ) - (+1.0 Y0 1jY1 X2 1jZ3) # Refer to the dictionary to get new value = (+1.0*-1j*-1j Y0 Y1 X2 Z3 ) - (+1.0*1j*1j Y0 Y1 X2 Z3) # Factor out coefficient = (-1.0 Y0 Y1 X2 Z3 ) - (-1.0 Y0 Y1 X2 Z3) # Multiply coefficient = 0 Y0 Y1 X2 Z3 = 0 So a and b is indeed commute. Focusing and ignoring \u00b6 Already we can see some room for improvement. Text Only 1 2 3 4 5 6 7 8 9 comm(a, b) = comm( +1.0 Y0 X1 X2 Y3 , +1.0 Z1 X3) = (+1.0 Y0 X1 X2 Y3) - (+1.0 Z1 X3) (+1.0 Z1 X3) (+1.0 Y0 X1 X2 Y3) = (+1.0 Y0 XZ1 X2 YX3) - (+1.0 Y0 ZX1 X2 XY3) # Nothing is multiplied to index 0 and 2 ... = (-1.0 Y0 Y1 X2 Z3 ) - (-1.0 Y0 Y1 X2 Z3) # index 0 and 2 remain unchanged In fact we can solely focus on those Pauli XYZ on common indices. Text Only 1 2 3 [focus] [outfo] [focus] [outfo] = (+1.0 X1 Y3 Y0 X2 ) - (+1.0 Z1 X3 ) (+1.0 Z1 X3 ) (+1.0 X1 Y3 Y0 X2 ) Since tensor product is index sensitive, not position sensitive, it doesn't matter how we sort or ordering it. Those outfo Pauli XYZ can in fact be ignored since we are 100% sure that they are the same thing. And we are looking at things that are potentially will be changed after arithematic i.e. [focus] part. I will prove this in the section of Uniqueness of Pauli XYZ . And we can countinue the remaining computation. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 [focus] [focus] = (+1.0 X1 Y3 ) - (+1.0 Z1 X3 ) # [outfo] is ignored (+1.0 Z1 X3 ) (+1.0 X1 Y3 ) = (+1.0 -1jY1 -1jZ3 ) - (+1.0 1jY1 1jZ3) # Refer to the dictionary to get new value = (+1.0*-1j*-1j Y1 Z3 ) - (+1.0*1j*1j Y1 Z3) # Factor out coefficient = (-1.0 Y1 Z3 ) - (-1.0 Y1 Z3) # Multiply coefficient = 0 Y1 Z3 = 0 # Same result Predicting Pauli Operator \u00b6 You may notice that ordering do not affect the multiplication outcome for Pauli XYZ. Text Only 1 2 3 XY == YX == Z ZZ == ZZ == I YI == IY == Y Hence we can bascially assume that the multiplication outcome for Pauli XYZ is always the same. 100% sure. Not even bother to check. So we can ignore one more thing: Text Only 1 2 3 4 5 6 7 For example in such situation (+1.0 XZ1 YX3) - (+1.0 ZX1 XY3) In index 1 and index 3, we don't ask if the Pauli XYZ outcome of left part of the minus sign is the same accross the right part. They must automatically the same. Predicting coefficient \u00b6 Here we multiply coefficient of both sides of the minus sign one by one. This could be computational intense when we have a lot to do. Is there a way to know the final result directly? Yes there is one. Just look at the dictionary and you can see that the ordering only make result differ by the sign. Text Only 1 2 'XZ': ('Y', -1j) 'ZX': ('Y', 1j) I describe this property as a cyclic group. Imagine that it is like the below arrangement. XYZ arranged on the edge of a circle. X at 12 o'clock, Y at 4 o'clock, Z at 8 o'clock. If you count them counter clockwise. Text Only 1 2 3 4 5 6 7 8 9 X => Y then you got 1jZ. Y => Z then you got 1jX. Z => X then you got 1jY. Positive sign for clockwise. X Z Y XYZXYZXYZXYZXYZ # clockwise If you count them counter anticlockwise. Y=>X then you got -1jZ. Z=>Y then you got -1jX. X=>Z then you got -1jY. Negative sign for anticlockwise. Text Only 1 ZYXZYXZYXZYXZYX # anti-clockwise or counter-clockwisw Say we have a long tensor product to deal with. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 comm( +1.0 X0 Y1 Y2 Z3 X4 Z5 Z6 X7 Y8 Z9 , +1.0 Z0 X1 Y2 Y3 Z4 Y5 X6 Y7 Z8 Y9 ) = +1.0 X0 Y1 Y2 Z3 X4 Z5 Z6 X7 Y8 Z9 - +1.0 Z0 X1 Y2 Y3 Z4 Y5 X6 Y7 Z8 Y9 +1.0 Z0 X1 Y2 Y3 Z4 Y5 X6 Y7 Z8 Y9 +1.0 X0 Y1 Y2 Z3 X4 Z5 Z6 X7 Y8 Z9 = +1.0 XZ YX YY ZY XZ ZY ZX XY YZ ZY - +1.0 ZX XY YY YZ ZX YZ XZ YX ZY YZ # Ommited indices = +1.0 XZ YX ZY XZ ZY ZX XY YZ ZY - +1.0 ZX XY YZ ZX YZ XZ YX ZY YZ # (YY = I) so nothing have changed = +1.0 1 1 1 1 1 0 0 0 1 - +1.0 0 0 0 0 0 1 1 1 0 # Encode for clockwiseness. 0 for clockwise, 1 for anti-clockwise # By stacking two sides we can see that the clockwiseness is opposite of each other +1.0 1 1 1 1 1 0 0 0 1 +1.0 0 0 0 0 0 1 1 1 0 The clockwiseness is having opposite relationship. Hence here come another thing that we can ignore. We can solely keep track of the clockwiseness of the left part of the minus sign. Text Only 1 2 # We solely have to look at this clockwiseness infomation +1.0 1 1 1 1 1 0 0 0 1 Clockwise imply coefficient of 1j. Anticlockwise imply coefficient of -1j. Here we can count how many Clockwise, how many Anticlockwise, to see the total number of each 1j and -1j. Text Only 1 2 3 4 5 6 +1.0 XZ YX ZY XZ ZY ZX XY YZ ZY +1.0 1 1 1 1 1 0 0 0 1 # 0 for clockwise, 1 for anti-clockwise [count] [which means] Clockwise: 3 ( 1j) ** 3 Anticlockwise: 6 (-1j) ** 6 We can view -1j as (-1)*(1j) to seperate them. Therefore there are in total: Text Only 1 2 3 4 5 6 ## For the left term of the minus sign ## [count] [value come from] -1 6 count of Clockwise 1j 3+6 count of Clockwise + Anticlockwise = (-1)**(Anticlockwise) * (1j)**(Clockwise + Anticlockwise) For the right term of the minus sign, you just need to swap the count of Clockwise and Anticlockwise. Text Only 1 2 3 4 5 6 7 8 BE CAREFUL! The count of clockwiseness is with respect to the left term! ## For the right term of the minus sign ## [count] [value come from] -1 3 count of Anticlockwise 1j 3+6 count of Clockwise + Anticlockwise = (-1)**(Clockwise) * (1j)**(Clockwise + Anticlockwise) So the whole thing is Text Only 1 2 3 4 5 6 7 left term - right term = (-1)**(Anticlockwise) * (1j)**(Clockwise + Anticlockwise) - (-1)**(Clockwise) * (1j)**(Clockwise + Anticlockwise) = (1j)**(Anticlockwise + Clockwise) * [(-1)**(Clockwise) - (-1)**(Anticlockwise)] # Factorization Since (1j) (Clockwise + Anticlockwise) can not be zero even when (Clockwise+Anticlockwise)==0 , we can ignore this part, and also (Clockwise+Anticlockwise) will never be negative. So this (1j) (Clockwise + Anticlockwise) part is not determining whether the end result of AB-BA is zero or not. The part that we need to look at is [(-1) (Clockwise) - (-1) (Anticlockwise)] . Text Only 1 2 # Only this part matters (-1)**(Anticlockwise) - (-1)**(Clockwise) Exponential of -1 have only two result. Either +1 or -1. Dependening of the power. Thus keep track of the parity is enought. Text Only 1 2 +1 == (-1)**( odd number) -1 == (-1)**(even number) In totalt 4 situations: Text Only 1 2 3 4 +1 - (+1) = 0 +1 - (-1) = 2 -1 - (+1) = 2 -1 - (-1) = 0 Also we can see that if the result is non-zero, it must be a coefficient of 2. Cases when result is zero is that one side has the opposite sign of another side. So so only need to perform parity check, and this can determine whether (AB - BA) is zero or not. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 Parity Check = Anticlockwise%2 ^ Clockwise%2 # Binary XOR so if Anticlockwise%2 != Clockwise%2, there must left with a remainder => not equals to zero => non commute side note for Binary XOR 0^0 == 0 0^1 == 1 1^0 == 1 1^1 == 0 thus we can use this to check for parity. Code \u00b6 commutator_singular 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def commutator_singular ( a , b ): # Only clockwiseness dictionary is needed lookup = { 'XY' : 0 , 'YX' : 1 , 'XZ' : 1 , 'ZX' : 0 , 'YZ' : 0 , 'ZY' : 1 } if a == b : # Self commute return True a_key , b_key = dict ( a . keys ()), dict ( b . keys ()) # We don't need coefficient # Extract common indices intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : clw = aclw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] if anticlock : aclw ^= 1 # Parity check else : clw ^= 1 # Parity check if aclw ^ clw : # Parity check return False return True Special Commutativity \u00b6 Now we have the knowledge of how to do comm(single, single), let see how to do the more generalized one i.e. comm(multiple, single) . Let's denote this as comm(AA, B) for there is now more stuff inside the left slot. Linearity of commutator and broadcasting \u00b6 Let see what actually is comm(AA, B). Commutator is a linear function which means that you can 'broadcast' the function. Just like how you would multiply c(x + y) => (cx + cy), you broadcast the c to everyone inside parentheses. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 comm( (H+J+K) , B ) = comm(H, B) + comm(J, B) + comm(K, B) comm(AA, B) = comm( -1.0 , +1.0 Z1 X3 ) +1.0 X0 Y1 Y2 X3 +1.0 Y0 X1 X2 Y3 -1.0 X0 X1 Y2 Y3 -1.0 Y0 Y1 X2 X3 +1.0 Z0 +1.0 Z0 Z1 +1.0 Z0 Z2 +1.0 Z0 Z3 +1.0 Z1 +1.0 Z1 Z2 +1.0 Z1 Z3 -1.0 Z2 +1.0 Z2 Z3 -1.0 Z3 So you broadcast B := 1.0 [Z1 X3] to all terms in AA. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 = comm( -1.0 , +1.0 Z1 X3 ) +comm( +1.0 X0 Y1 Y2 X3 , +1.0 Z1 X3 ) +comm( +1.0 Y0 X1 X2 Y3 , +1.0 Z1 X3 ) +comm( -1.0 X0 X1 Y2 Y3 , +1.0 Z1 X3 ) +comm( -1.0 Y0 Y1 X2 X3 , +1.0 Z1 X3 ) +comm( +1.0 Z0 , +1.0 Z1 X3 ) +comm( +1.0 Z0 Z1 , +1.0 Z1 X3 ) +comm( +1.0 Z0 Z2 , +1.0 Z1 X3 ) +comm( +1.0 Z0 Z3 , +1.0 Z1 X3 ) +comm( +1.0 Z1 , +1.0 Z1 X3 ) +comm( +1.0 Z1 Z2 , +1.0 Z1 X3 ) +comm( +1.0 Z1 Z3 , +1.0 Z1 X3 ) +comm( -1.0 Z2 , +1.0 Z1 X3 ) +comm( +1.0 Z2 Z3 , +1.0 Z1 X3 ) +comm( -1.0 Z3 , +1.0 Z1 X3 ) Now we can deal with each of these seperately instead of thinking how to deal with all terms simultaneously. I call each term of AA as 'a', likewise each term of B as 'b'. Obviously there is only 1 'b' in this case, so 'b' stand for 1.0 [Z1 X3]. Look at the first term, Text Only 1 0) comm( -1.0 , +1.0 Z1 X3 ) There is no Pauli XYZ inside A. Why? It is actually a convention in most of the symbolic computation library that always ommiting the Pauli I Operator. Because you will always get the same thing when multiplying Pauli I to any Pauli XYZ. Hence, comm(a0, b) is no doubt commute. Text Only 1 a0b - ba0 == 0 # by the fact that a0 is Pauli I But for any terms that contain things other than Pauli I, you need to check wether it is commute. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1) comm( +1.0 X0 Y1 Y2 X3 , +1.0 Z1 X3 ) = comm( +1.0 X0 Y1 Y2 X3, +1.0 Z1 X3) = comm( +1.0 Y1 X3 , +1.0 Z1 X3 ) # focus on common index = YZ XX - ZY XX # lets use the clockwiseness techinque from previous section ## we can solely keep track of the first (left) clockwiseness Anticlockwise%2 ^ Clockwise%2 = 1 ^ 0 = 1 = non commute One counter example is enough, so comm(AA, B) return False immediately. Uniqueness of Pauli XYZ \u00b6 The most important notion about Pauli XYZ is that it form a cyclic group and thus maintain uniqueness. This uniqueness ensure that we can boradcase like above paragraph and reject commutativity immediately after one counter example found. Otherwise we must check for all pattern to see whether they are commute or not. What if there did not exist uniquess? Let say we got comm(AA, B). And currently comparing AA[i] and B[0]. Text Only 1 comm( AA[i] , B[0] ) When they commute, they cancel out. But when they NOT commute, the remainder stay. What will then happen? Remember that we are comparing AA and B. We scan from AA[0] to AA[n]. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 If comm(AA[1], BB[0]) != 0 Since we multiplied AA[1] by BB[0], this should form a new term that we don't know yet comm(AA[1], B[0]) => something else let say 1 * R_1 Then we meet other commute pair Let say comm(AA[2], B[0]) == 0 But this is just meaning that comm(AA[2], B[0]) => something else let say 1 * R_2 What if there is another R_2 ? What if R_1 is actually R_2 ? So we cannot cancel out the Pauli Tensor from comm(AA[2], B[0]), although comm(AA[2], B[0]) == 0 If this kind of thing can be happened, then we must check for all terms to make sure the final remainder is zero, then finally we can say AA and B is commute But we don't need to do that. Let me prove it. Since Pauli XYZ is a cyclic group. Text Only 1 2 X Z Y Let say you got Y, multiplying X to results Z. You can do the same thing on the above triangle. Try draw a line from Y, passing X, you must reach Z. Then you have a set of Pauli XYZ. Just think of many of those triangles all happening at once. Text Only 1 2 3 4 5 6 7 B [focus] B0 ... AA [focus] [outfo] AA0 ... ... AA1 ... ... AA2 ... ... Recall the section of Premise: terms in linear combination must be unique . Each Pauli XYZ inside AA is a unique permutation of Pauli Tensor. For the outfo part, just assume that they are all having the same exactly one permutation. Even that, the focus part must all differ from each other within same set i.e. within AA. Let say AA consist of 3 rows and they differ from each other in only one Pauli XYZ. And B[0] is Z Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 B [focus] 0 Z AA [focus] [outfo] 0 X ... 1 Y ... 2 Z ... = AAB [focus] [outfo] 0 XZ ... 1 YZ ... 2 ZZ ... = AAB [focus] [outfo] 0 Y ... 1 X ... 2 I ... Terms in AA are still differ from each other after multiplication. Because they are all multiplied by the same thing. Their relative distance after being multiplied still remain unchanged. Think of that XYZ triangle analogy. You got 3 of them now. And then you rotate them simultaneously by same unit. Their relative status do not change after all. Like you multiply 3 to [1. 2. 3], they change to [3, 6, 9] and they still differ internally before and after. Hence uniqueness of Pauli XYZ is ensured and we can safely do the broadcasting and cancel out comm(AA[i], B[0]) = 0 terms. Code \u00b6 commutator_special 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def commutator_special ( AA , B ): # Only clockwiseness dictionary is needed lookup = { 'XY' : 0 , 'YX' : 1 , 'XZ' : 1 , 'ZX' : 0 , 'YZ' : 0 , 'ZY' : 1 } # Hash the whole AA dict for faster checking AA_Hashs = { hash (( key , val )): ( dict ( key ), val ) for key , val in AA . items () } for b_key , b_cof in B . keys : # This loop has only one element b_key = dict ( b_key ) if hash ( b_key ) in AA_Hashs : # Self commute return True # Only dict.values is enough. We don't need hash((key,val)) below for a_key , a_cof in AA . values (): # Extract common indices intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : clw = aclw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] if anticlock : aclw ^= 1 # Parity check else : clw ^= 1 # Parity check if aclw ^ clw : # Parity check return False return True General Commutativity \u00b6 We have already seen comm(one, one) and comm(many, one), how about comm(many, many) denoted as comm(AA, BB) ? Is that difficult? Yes it is not an easy job to think about it. But don't worry, because I solved it for you already. Cartesian Product \u00b6 To do comm(AA, BB), we need to broadcase everything in BB to everything in AA. And this is simplily the case of Cartesian Product. You can write some simple code to see what it is. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 from itertools import product AA = [ 0 , 1 , 2 , 3 ] BB = [ 0 , 1 , 2 , 3 ] for a , b in product ( AA , BB ): print ( a , b ) # 0 0 # 0 1 # 0 2 # 0 3 # 1 0 # 1 1 # ... So if we are to check whether AA and BB commute, we have to check for all combination in the worst case. This can be super computational intense if you do this straight. And some guy do carry the whole calculation of AABB - BBAA, namely, carry out the multiplication of AABB and BBAA seperately then subtract them. This is just a waste of time since we have already discovered everything from the symmetry of Pauli XYZ and being able to ignore so many maniplulations and still obtain the result. Just note that you can see that from the Cartesian Product, 01 and 10, or things like this can be happened. The mirror image of the same thing. The number is originally denoted as the index of AA and BB. But what if, what if those {0,1,2,3,...} stands for some unique Pauli XYZ sequence? We can see that this may indicate a exact concern among the symmetry. Degerenate uniqueness \u00b6 Last section I proved the uniquness of Pauli XYZ within a linear combination. This however, do not work in the general case which is comm(many, many) i.e. comm(AA, BB). Things are unique inside AA. Things also unique inside BB. But the point is the same thing can be possessed by AA and BB at the same time. Text Only 1 2 3 4 5 6 7 8 9 10 11 [AA] [BB] 0 ... ... 1 ... ... 2 Z0 X1 X2 ... 3 ... ... 4 ... Z0 X1 X2 5 ... Z0 Z1 6 ... ... 7 Z0 Z1 ... 8 ... ... 9 ... ... Let recall the Cartestian Product. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 a b 0 0 0 1 0 2 0 3 1 0 1 1 ... fist we need to compute comm(0, 0) # self commute + comm(0, 1) + comm(0, 2) + comm(0, 3) + comm(1, 0) + comm(1, 1) # self commute + comm(1, 2) + comm(1, 3) + ... we can already cancel some of them by the law of self commute comm(0, 1) # ? + comm(0, 2) + comm(0, 3) + comm(1, 0) # ? + comm(1, 2) + comm(1, 3) ... then we see some interesting pairs comm(0, 1) + comm(1, 0) what is their relationship? So, a pair of couple 0 and 1. Just differed by the ordering. But what are they actually? Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 since comm(a, b) = ab - ba0 comm(0, 1) = 01 - 10 comm(1, 0) = 10 - 01 = -(01 - 10) # Oops sum it ! comm(0, 1) + comm(1, 0) = (01 - 10) + -(01 - 10) = 0 # This commute, but if and only if the coefficient of left0 and right0 is the exactly same thing if not, it will be like 0.5*(01 - 10) + -0.3*(01 - 10) = 0.2*(01 - 10) => NON commute So they added up. This is not happened in the previous section in Special Commutativity. In fact this kind of order-reverted commutativity is well known. From this result, we can see that if the exactly same pair is pocessesed by both AA and BB, then we automatically know this pair commute. Text Only 1 2 if a in BB and b in BB: # commute! continue # Not even bother to check the clockwiseness like finding the overlaping part of two set Text Only 1 2 3 4 5 6 /---------\\ /-------\\/ \\ / /\\ | | |!!| | \\ \\/ / \\_______/ \\_________/ But for others, not sure. You have to check for their clockwiseness. And since the uniqueness is degenerated in general case, we cannot return False just because one pair is non commute. For example Text Only 1 2 3 4 5 6 7 8 9 10 comm( [Z0 X1 Y2 X3] , [Y1 X2 Y3] ) = 2j [Z0 Z1 Z2 Z3] comm( [Y0 Z1 Z2 Z3] , [X0] ) = -2j [Z0 Z1 Z2 Z3] Both pair do not commute internally, but the outcome is exactly same and coeficients add up to zero, then annihilate Code \u00b6 commutator_general 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def commutator_general ( AA , BB ): # Only clockwiseness dictionary is needed lookup = { 'XY' : 0 , 'YX' : 1 , 'XZ' : 1 , 'ZX' : 0 , 'YZ' : 0 , 'ZY' : 1 } # Hash for faster checking # Prepare both because we are to check for set relation AA_Hashs = { hash (( key , val )):( dict ( key ), val ) for key , val in AA . items () } BB_Hashs = { hash (( key , val )):( dict ( key ), val ) for key , val in AA . items () } # Prepare a set for faster checking common_terms = set ( A_hashs . keys ()) . intersection ( B_hashs . keys ()) for a_hash , ( a_key , a_cof ) in AA . keys : # This loop has many element a_key = dict ( a_key ) if a_hash in common_terms : for b_hash , ( b_key , b_cof ) in BB . items (): if b_hash in common_terms : # Skip for this intersection pairs continue # Extract common indices intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : clw = aclw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] if anticlock : aclw ^= 1 # Parity check else : clw ^= 1 # Parity check if clw ^ aclw : # Parity check ########################################### # We need to evaluate the result here! # # Since we uniqueness is not exist in # # general case !!! # ########################################### else : # Seperate code to eliminate unnecessary $if b_hash in common_terms$ checking ######### Same code from above ########### for b_key , b_cof in BB . values (): # Only values is enough. We don't need hash(key) below intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : clw = aclw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] if anticlock : aclw ^= 1 # Parity check else : clw ^= 1 # Parity check if clw ^ aclw : # Parity check ########################################### # We need to evaluate the result here! # # Since we uniqueness is not exist in # # general case !!! # ########################################### ########################################### # Now check if the end result is zero # ########################################### Normal Commutator \u00b6 So, I said from the begining that commutator is a function which Text Only 1 commutator = AB - BA If thing do not commute, AB - BA != 0, there is remainder. Sometimes people want the remainder more than commutativity. And I got you. So, we have been avoid calculating the coefficient of NON commute outcome. Because, from the textbook or from the first section, people knew that there is only two result from NON commute prduct. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 Clockwise => 1j Anticlockwise => -1j XY - YX = Clockwise - Anticlockwise = 1j - (-1j) = 2j ZY - YZ = Anticlockwise - Clockwise = -1j - 1j = -2j This is simple, because we only do this on one single Pauli XYZ, that is why they only post this on textbook. What happen if we got a Tensor Product of Pauli XYZ? Text Only 1 2 Clockwise * Clockwise * Anticlockwise * Anticlockwise ... => ? Anticlockwise * Anticlockwise * Clockwise * Clockwise ... => -? Of course you can do it straight. I won't stop you. Text Only 1 => 1j * 1j * -1j * -1j * 1j * ... Seems endless multiplication. Recalling from the first setion, we got this equation. Maybe this can help us. Text Only 1 2 3 4 ca and cb stand for coefficient of a and b coefficient when non commute = (ca * cb) * [(-1)**(Anticlockwise) * (1j)**(Clockwise + Anticlockwise) - (-1)**(Clockwise) * (1j)**(Clockwise + Anticlockwise)] Too long. Just call Clockwise 'clw' and Anticlockwise 'aclw'. Text Only 1 (ca * cb) * [(-1)**(aclw) * (1j)**(clw + aclw) - (-1)**(clw) * (1j)**(clw + aclw)] The problem is the big thing behind (ca * cb) . Its value depends on count of clw and aclw. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 (-1)**(aclw) * (1j)**(clw + aclw) - (-1)**(clw) * (1j)**(clw + aclw) = (1j)**(clw + aclw) * [(-1)**(aclw) - (-1)**(clw)] => eq.0 Commute means that coefficient equals zero. this can happen if and only if the right part equal zero 0 = (1j)**(clw + aclw) * [(-1)**(aclw) - (-1)**(clw)] => [(-1)**(aclw) - (-1)**(clw)] == zero This is just adding and subtracting, it can be zero But what is exponential of -1 ? (-1)**0 = 1 (-1)**1 = -1 (-1)**2 = 1 (-1)**3 = -1 (-1)**4 = 1 ... we can just count the parity clw and aclw for this part But what is then (1j)**(clw + aclw) ? 1j** 0 = 1 1j** 1 = 1j 1j** 2 = -1 1j** 3 = -1j 1j** 4 = 1 1j** 5 = 1j ... There is -1 inside ! The left part is entangled with the right part !!!!! This is complicated. -1 and j are not independent from each other. This cannot be solved trivially. We have two data, namely, number of clockwise and anticlock. Let see what we can do with them. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 eq.0 (1j)**(clw + aclw) * [(-1)**(aclw) - (-1)**(clw)] Since this eq.0 only depend on clw and aclw, we should see what input value leads to what outcome When NON commute, clw and aclw has different parity, this can be checked by aclw%2 clw%2 Let substitute some real number (-1)**(0) - (-1)^(1) == +1 - (-1) == 2 (-1)**(1) - (-1)^(0) == -1 - +1 == -2 Now we know either 2 or -2 can be the answer of this part okay, it seems like we can predict the sign of outcome aclw%2 clw%2 0 1 => positive 1 0 => negative Neither 0+1 or 1+0 can be negative to distinguish. Why not try 0-1 or 1-0? 0 - 1 == -1 So (aclw%2 - clw%2) is the answer for the sign we successfully connect the parity of clw and aclw to negative sign And 1j exponential has a cycle of 4, so the value of 1j part depend on (clw + aclw)%4 or (clw%4 + aclw%4) or (clw%4 + aclw%4)%4 But clw and aclw cannot have same parity, otherwise they are comute and cancel out. No even+even or odd+odd Only even+odd => odd clw + aclw can only be 1 and 3 1j** 1 = 1j 1j** 3 = -1j So this is a math question of, what number satisfy the following two equation eq.1 aclw%2 - clw%2 == 1 or -1 eq.2 (clw%4 + aclw%4) == 1 or 3 Summing eq.1 and eq.2 will get this eq.1.+eq.2 (aclw%2-clw%2) + (clw%4+aclw%4) == ? Recall that {1,-1} from eq.1 is the indicator for { 2,-2 } and {1, 3} from eq.2 is the indicator for {1j,-1j} We can do carry out the calculation of the original eq.0 and eq.1 eq.2 to see there is indeed a isomorphism between these equations [eq.1] [eq.2] [result] [eq.0L] [eq.0R] [result] SUM /----> (2) MULTIPLY /----> (-2j) / / (-1)-----(1)----> (0) (2)-----(j)----> (2j) \\ / \\ / \\/ \\/ /\\ /\\ / \\ / \\ (1)-----(3)----> (4) (-2)----(-j)----> (2j) \\ \\ \\----> (2) \\----> (-2j) So {0,4} from eq.1.+eq.2 maps to ( 2j) { 2} from eq.1.+eq.2 maps to (-2j) In fact 4 == 0 (mod 4), so for a module4 system {0} from eq.1.+eq.2 maps to ( 2j) {2} from eq.1.+eq.2 maps to (-2j) Hence we know that coefficient == 2j iff (eq.1.+eq.2)%4 == 0 == -2j iff (eq.1.+eq.2)%4 == 2 _______________________________________________________________________________________________ | clw aclw original equation a=clw%2-aclw%2 b=(clw%4+aclw%4)%4 (a+b)%4 finalresult | |______________________________________________________________________________________________| | 0 1 -2 * 1j 1 1 2 (-0-2j) | | 0 3 -2 * (-0-1j) 1 3 0 2j | | 1 0 2 * 1j -1 1 0 2j | | 1 2 2 * (-0-1j) -1 3 2 -2j | | 2 1 -2 * (-0-1j) 1 3 0 2j | | 2 3 -2 * 1j 1 1 2 (-0-2j) | | 3 0 2 * (-0-1j) -1 3 2 -2j | | 3 2 2 * 1j -1 1 0 2j | |______________________________________________________________________________________________| ((aclw%2 - clw%2) + (clw%4 + aclw%4)%4)%4 = {(2, -2j), (0, 2j)} since -1 has order of cycle == 2, and 1j has order of cycle ==4, check until n=4 is enough for revealing all pattern. Now can now use this magic equation to answer the question. Instead of multiplying the long sequencence of 1j and -1j, we count the number of clockwise and anticlockwise, then we know everything. Since {2j, -2j} is the only set of result, we can factorize 2j and multiply it back at the end of the function. Reduce Complexity \u00b6 That is just some fansy technique to eliminate multiplication and replace it with addition and other primitive arithematics. But 1 year after I finished this script, I found that there is alternative simplier method. First notion is that mulitiplication of imaginary number is a C4 cyclic group. j is clockwise movement, -j is anticlockwise movement. Take the always positive module 4 of (-j)**n, it becomes clockwise. Text Only 1 (-j)**n = j**((-n)%4) So, there we can encompass both (j) (-j) under one variable. Text Only 1 2 3 (j)**m * (-j)**n = (j)**(m%4) * j**((-n)%4) = (j)**((m-n)%4) And in AB - BA, we need the clockwiseness of AB is different that BA. The final clockwiseness is now reduced to (clw-aclw)%4. We do not need (clw-aclw)%4 in {0,2} since if you swap clw and aclw, the result is the same, means that AB==BA. So what left is {1,3}. Text Only 1 2 3 4 j**1 = +j j**3 = -j And -j counterpart is only differed by the sign. In conclusion, we only need to see whether it is 1 or 3. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if (clw-aclw)%4==1: AB - BA = +j - (-j) = 2j * coefficient if (clw-aclw)%4==3: AB - BA = -j - (+j) = -2j * coefficient Since 1=0+1 and 3=2+1 We can encode this as (clw-aclw)%4//2 => {0,1} 0 is False and 1 is True So, if True, it is negative. Code \u00b6 commutator_normal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def normal_commutator ( AA , BB ): # Dictionary is needed lookup = { 'XY' : 0 , 'YX' : 1 , 'XZ' : 1 , 'ZX' : 0 , 'YZ' : 0 , 'ZY' : 1 } lookup_xyz = { 'XY' : 'Z' , 'YX' : 'Z' , 'XZ' : 'Y' , 'ZX' : 'Y' , 'YZ' : 'X' , 'ZY' : 'X' , 'X' : 'X' , 'Y' : 'Y' , 'Z' : 'Z' } from collections import defaultdict from operator import itemgetter new = defaultdict ( float ) # Hash for faster checking # Prepare both because we are to check for set relation AA_Hashs = { hash (( key , val )):( dict ( key ), val ) for key , val in AA . items () } BB_Hashs = { hash (( key , val )):( dict ( key ), val ) for key , val in AA . items () } # Prepare a set for faster checking common_terms = set ( A_hashs . keys ()) . intersection ( B_hashs . keys ()) for a_hash , ( a_key , a_cof ) in AA . keys : # This loop has many element a_key = dict ( a_key ) if a_hash in common_terms : for b_hash , ( b_key , b_cof ) in BB . items (): if b_hash in common_terms : # Skip for this intersection pairs continue # Extract common indices intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : new_key = a_key . copy () new_key . update ( b_key ) clw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] new_key [ i ] = lookup_xyz [ f \" { a }{ b } \" ] if anticlock : clw -= 1 # Parity check else : clw += 1 # Parity check else : new_key [ i ] = None clw %= 4 if clw % 2 : # Parity check new_key = (( bit , xyz ) for bit , xyz in new_key . items () if xyz ) new_key = tuple ( sorted ( new_key , key = itemgetter ( 0 ))) new [ new_key ] += ( - a_cof * b_cof if clw % 4 // 2 else + a_cof * b_cof ) else : # Seperate code to eliminate unnecessary $if b_hash in common_terms$ checking ######### Same code from above ########### for b_key , b_cof in BB . values (): # Only values is enough. We don't need hash(key) below intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : new_key = a_key . copy () new_key . update ( b_key ) clw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] new_key [ i ] = lookup_xyz [ f \" { a }{ b } \" ] if anticlock : clw -= 1 # Parity check else : clw += 1 # Parity check else : new_key [ i ] = None clw %= 4 if clw % 2 : # Parity check new_key = (( bit , xyz ) for bit , xyz in new_key . items () if xyz ) new_key = tuple ( sorted ( new_key , key = itemgetter ( 0 ))) new [ new_key ] += ( - a_cof * b_cof if clw // 2 else + a_cof * b_cof ) QO = QubitOperator # Preload new_QO = QO () new_QO . terms = new new_QO . compress () return new_QO * 2 j ================= THE END ================= \u00b6","title":"Special and General Commutativity of Pauli Operator"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#special-and-general-commutativity-of-pauli-operator","text":"Commutator = AB-BA. People have been wasting time on their shit code to do this arithematic straightly. Here I propose the new algorithm.","title":"Special and General Commutativity of Pauli Operator"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#premise","text":"","title":"Premise"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#premise-pauli-operator","text":"Pauli Operator is a set of 2x2 matrix denoted by symbols of {I, X, Y, Z}. They are matrix, so they obey every law of linear algebra. They are the core part of Quantum Computing. Text Only 1 2 3 4 5 6 7 8 9 10 11 I = [ 1 0] [ 0 1] X = [ 0 1] [ 1 0] Y = [ 0 -j] [ j 0] Z = [ 1 0] [ 0 -1]","title":"Premise: Pauli Operator"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#premise-dictionary-for-pauli-operator-multiplication","text":"First of all, we need a dictionary to check what is what, when two Pauli multiplied together, what will be the result. And since matrix multiplication is binary operation, the dictionary key consist of two consecutive Pauli Operator symbols. I choose the approach that seperate Pauli Operator and its coefficient to reduce total count of loops in the program. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Seperating Pauli Operator and its coefficient lookup_xyz = { 'XY' : 'Z' , 'YX' : 'Z' , 'XZ' : 'Y' , 'ZX' : 'Y' , 'YZ' : 'X' , 'ZY' : 'X' } lookup_cof = { 'XY' : 1 j , 'YX' : - 1 j , 'XZ' : - 1 j , 'ZX' : 1 j , 'YZ' : 1 j , 'ZY' : - 1 j } But if you choose the compounded approach, you would need to call out element[0], element[1] which is a waste of time. Python 1 2 3 4 5 6 7 # Compounded Pauli Operator and its coefficient lookup = { 'XY' : ( 'Z' , 1 j ), 'YX' : ( 'Z' , - 1 j ), 'XZ' : ( 'Y' , - 1 j ), 'ZX' : ( 'Y' , 1 j ), 'YZ' : ( 'X' , 1 j ), 'ZY' : ( 'X' , - 1 j ) }","title":"Premise: Dictionary for Pauli Operator multiplication"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#premise-terms-in-linear-combination-must-be-unique","text":"By the way, this is all established in the premise of well defined dataset. Namely, all terms inside the linear combination are unique. For example let say we have a linear combination of two Z1 (see below). It will automatically merge them into one. Text Only 1 2 QubitOperator('''1 [Z1] + 1 [Z1]''') = 2 [Z1] I want the merged version. Otherwise my algorithm do not work.","title":"Premise: Terms in linear combination must be unique"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#premise-comma-b-as-the-symbol-of-commutator","text":"The convention for mathematical symbol of commutator is [A, B]. Which stand for the arithematic operation of (AB - BA). I must not use this anywhere in my article because this symbolically collides with Python code and bring unnecessary confusion textually. Instead, I use comm(A, B) to represent the comumutator operation.","title":"Premise: comm(A, B) as the symbol of commutator"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#singular-commutativity","text":"Single means only one term in the linear combination. Let's first deal with the most specific one, i.e. comm(single, single). Say we have two Pauli Operator a and b. We need to check if they are commute to each other. Text Only 1 2 3 4 5 6 7 8 9 10 a) +1.0 Y0 X1 X2 Y3 b) +1.0 Z1 X3 want: comm(a, b) comm(a, b) = comm( +1.0 Y0 X1 X2 Y3 , +1.0 Z1 X3) # remember AB-BA = (+1.0 Y0 X1 X2 Y3)(+1.0 Z1 X3) - (+1.0 Z1 X3)(+1.0 Y0 X1 X2 Y3) How can we solve this? How to multiply Pauli Operator?","title":"Singular Commutativity"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#multiplication-of-pauli-operator","text":"First thing to know is that either a and b is tensor product of Pauli Operators with coefficient. Text Only 1 2 3 [coefficient] [tensor product of Pauli Operators] a) +1.0 Y0 X1 X2 Y3 b) +1.0 Z1 X3 The neat thing about tensor product is that the outcome is in fact index sensitive. Which means that you cannot seperate the XYZ and the index of it. Text Only 1 2 3 [Pauli XYZ] [index] Z1 = Z 1 X3 = X 3 Pauli Operator can only multiply to the same index. Text Only 1 2 Z1 X3 == Z1 X3 # nothing happen since index differ Z1 X1 == ZX1 = (Y1, 1j) # Outcome is Y1 with coefficient 1j, according to the dictionary And the coefficient can be any usually number. You can do this multiplication vertically (or should say vistually) Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 comm(a, b) = comm( +1.0 Y0 X1 X2 Y3 , +1.0 Z1 X3) = (+1.0 Y0 X1 X2 Y3) - (+1.0 Z1 X3) (+1.0 Z1 X3) (+1.0 Y0 X1 X2 Y3) = (+1.0 Y0 XZ1 X2 YX3) - (+1.0 Y0 ZX1 X2 XY3) = (+1.0 Y0 -1jY1 X2 -1jZ3 ) - (+1.0 Y0 1jY1 X2 1jZ3) # Refer to the dictionary to get new value = (+1.0*-1j*-1j Y0 Y1 X2 Z3 ) - (+1.0*1j*1j Y0 Y1 X2 Z3) # Factor out coefficient = (-1.0 Y0 Y1 X2 Z3 ) - (-1.0 Y0 Y1 X2 Z3) # Multiply coefficient = 0 Y0 Y1 X2 Z3 = 0 So a and b is indeed commute.","title":"Multiplication of Pauli Operator"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#focusing-and-ignoring","text":"Already we can see some room for improvement. Text Only 1 2 3 4 5 6 7 8 9 comm(a, b) = comm( +1.0 Y0 X1 X2 Y3 , +1.0 Z1 X3) = (+1.0 Y0 X1 X2 Y3) - (+1.0 Z1 X3) (+1.0 Z1 X3) (+1.0 Y0 X1 X2 Y3) = (+1.0 Y0 XZ1 X2 YX3) - (+1.0 Y0 ZX1 X2 XY3) # Nothing is multiplied to index 0 and 2 ... = (-1.0 Y0 Y1 X2 Z3 ) - (-1.0 Y0 Y1 X2 Z3) # index 0 and 2 remain unchanged In fact we can solely focus on those Pauli XYZ on common indices. Text Only 1 2 3 [focus] [outfo] [focus] [outfo] = (+1.0 X1 Y3 Y0 X2 ) - (+1.0 Z1 X3 ) (+1.0 Z1 X3 ) (+1.0 X1 Y3 Y0 X2 ) Since tensor product is index sensitive, not position sensitive, it doesn't matter how we sort or ordering it. Those outfo Pauli XYZ can in fact be ignored since we are 100% sure that they are the same thing. And we are looking at things that are potentially will be changed after arithematic i.e. [focus] part. I will prove this in the section of Uniqueness of Pauli XYZ . And we can countinue the remaining computation. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 [focus] [focus] = (+1.0 X1 Y3 ) - (+1.0 Z1 X3 ) # [outfo] is ignored (+1.0 Z1 X3 ) (+1.0 X1 Y3 ) = (+1.0 -1jY1 -1jZ3 ) - (+1.0 1jY1 1jZ3) # Refer to the dictionary to get new value = (+1.0*-1j*-1j Y1 Z3 ) - (+1.0*1j*1j Y1 Z3) # Factor out coefficient = (-1.0 Y1 Z3 ) - (-1.0 Y1 Z3) # Multiply coefficient = 0 Y1 Z3 = 0 # Same result","title":"Focusing and ignoring"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#predicting-pauli-operator","text":"You may notice that ordering do not affect the multiplication outcome for Pauli XYZ. Text Only 1 2 3 XY == YX == Z ZZ == ZZ == I YI == IY == Y Hence we can bascially assume that the multiplication outcome for Pauli XYZ is always the same. 100% sure. Not even bother to check. So we can ignore one more thing: Text Only 1 2 3 4 5 6 7 For example in such situation (+1.0 XZ1 YX3) - (+1.0 ZX1 XY3) In index 1 and index 3, we don't ask if the Pauli XYZ outcome of left part of the minus sign is the same accross the right part. They must automatically the same.","title":"Predicting Pauli Operator"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#predicting-coefficient","text":"Here we multiply coefficient of both sides of the minus sign one by one. This could be computational intense when we have a lot to do. Is there a way to know the final result directly? Yes there is one. Just look at the dictionary and you can see that the ordering only make result differ by the sign. Text Only 1 2 'XZ': ('Y', -1j) 'ZX': ('Y', 1j) I describe this property as a cyclic group. Imagine that it is like the below arrangement. XYZ arranged on the edge of a circle. X at 12 o'clock, Y at 4 o'clock, Z at 8 o'clock. If you count them counter clockwise. Text Only 1 2 3 4 5 6 7 8 9 X => Y then you got 1jZ. Y => Z then you got 1jX. Z => X then you got 1jY. Positive sign for clockwise. X Z Y XYZXYZXYZXYZXYZ # clockwise If you count them counter anticlockwise. Y=>X then you got -1jZ. Z=>Y then you got -1jX. X=>Z then you got -1jY. Negative sign for anticlockwise. Text Only 1 ZYXZYXZYXZYXZYX # anti-clockwise or counter-clockwisw Say we have a long tensor product to deal with. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 comm( +1.0 X0 Y1 Y2 Z3 X4 Z5 Z6 X7 Y8 Z9 , +1.0 Z0 X1 Y2 Y3 Z4 Y5 X6 Y7 Z8 Y9 ) = +1.0 X0 Y1 Y2 Z3 X4 Z5 Z6 X7 Y8 Z9 - +1.0 Z0 X1 Y2 Y3 Z4 Y5 X6 Y7 Z8 Y9 +1.0 Z0 X1 Y2 Y3 Z4 Y5 X6 Y7 Z8 Y9 +1.0 X0 Y1 Y2 Z3 X4 Z5 Z6 X7 Y8 Z9 = +1.0 XZ YX YY ZY XZ ZY ZX XY YZ ZY - +1.0 ZX XY YY YZ ZX YZ XZ YX ZY YZ # Ommited indices = +1.0 XZ YX ZY XZ ZY ZX XY YZ ZY - +1.0 ZX XY YZ ZX YZ XZ YX ZY YZ # (YY = I) so nothing have changed = +1.0 1 1 1 1 1 0 0 0 1 - +1.0 0 0 0 0 0 1 1 1 0 # Encode for clockwiseness. 0 for clockwise, 1 for anti-clockwise # By stacking two sides we can see that the clockwiseness is opposite of each other +1.0 1 1 1 1 1 0 0 0 1 +1.0 0 0 0 0 0 1 1 1 0 The clockwiseness is having opposite relationship. Hence here come another thing that we can ignore. We can solely keep track of the clockwiseness of the left part of the minus sign. Text Only 1 2 # We solely have to look at this clockwiseness infomation +1.0 1 1 1 1 1 0 0 0 1 Clockwise imply coefficient of 1j. Anticlockwise imply coefficient of -1j. Here we can count how many Clockwise, how many Anticlockwise, to see the total number of each 1j and -1j. Text Only 1 2 3 4 5 6 +1.0 XZ YX ZY XZ ZY ZX XY YZ ZY +1.0 1 1 1 1 1 0 0 0 1 # 0 for clockwise, 1 for anti-clockwise [count] [which means] Clockwise: 3 ( 1j) ** 3 Anticlockwise: 6 (-1j) ** 6 We can view -1j as (-1)*(1j) to seperate them. Therefore there are in total: Text Only 1 2 3 4 5 6 ## For the left term of the minus sign ## [count] [value come from] -1 6 count of Clockwise 1j 3+6 count of Clockwise + Anticlockwise = (-1)**(Anticlockwise) * (1j)**(Clockwise + Anticlockwise) For the right term of the minus sign, you just need to swap the count of Clockwise and Anticlockwise. Text Only 1 2 3 4 5 6 7 8 BE CAREFUL! The count of clockwiseness is with respect to the left term! ## For the right term of the minus sign ## [count] [value come from] -1 3 count of Anticlockwise 1j 3+6 count of Clockwise + Anticlockwise = (-1)**(Clockwise) * (1j)**(Clockwise + Anticlockwise) So the whole thing is Text Only 1 2 3 4 5 6 7 left term - right term = (-1)**(Anticlockwise) * (1j)**(Clockwise + Anticlockwise) - (-1)**(Clockwise) * (1j)**(Clockwise + Anticlockwise) = (1j)**(Anticlockwise + Clockwise) * [(-1)**(Clockwise) - (-1)**(Anticlockwise)] # Factorization Since (1j) (Clockwise + Anticlockwise) can not be zero even when (Clockwise+Anticlockwise)==0 , we can ignore this part, and also (Clockwise+Anticlockwise) will never be negative. So this (1j) (Clockwise + Anticlockwise) part is not determining whether the end result of AB-BA is zero or not. The part that we need to look at is [(-1) (Clockwise) - (-1) (Anticlockwise)] . Text Only 1 2 # Only this part matters (-1)**(Anticlockwise) - (-1)**(Clockwise) Exponential of -1 have only two result. Either +1 or -1. Dependening of the power. Thus keep track of the parity is enought. Text Only 1 2 +1 == (-1)**( odd number) -1 == (-1)**(even number) In totalt 4 situations: Text Only 1 2 3 4 +1 - (+1) = 0 +1 - (-1) = 2 -1 - (+1) = 2 -1 - (-1) = 0 Also we can see that if the result is non-zero, it must be a coefficient of 2. Cases when result is zero is that one side has the opposite sign of another side. So so only need to perform parity check, and this can determine whether (AB - BA) is zero or not. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 Parity Check = Anticlockwise%2 ^ Clockwise%2 # Binary XOR so if Anticlockwise%2 != Clockwise%2, there must left with a remainder => not equals to zero => non commute side note for Binary XOR 0^0 == 0 0^1 == 1 1^0 == 1 1^1 == 0 thus we can use this to check for parity.","title":"Predicting coefficient"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#code","text":"commutator_singular 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def commutator_singular ( a , b ): # Only clockwiseness dictionary is needed lookup = { 'XY' : 0 , 'YX' : 1 , 'XZ' : 1 , 'ZX' : 0 , 'YZ' : 0 , 'ZY' : 1 } if a == b : # Self commute return True a_key , b_key = dict ( a . keys ()), dict ( b . keys ()) # We don't need coefficient # Extract common indices intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : clw = aclw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] if anticlock : aclw ^= 1 # Parity check else : clw ^= 1 # Parity check if aclw ^ clw : # Parity check return False return True","title":"Code"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#special-commutativity","text":"Now we have the knowledge of how to do comm(single, single), let see how to do the more generalized one i.e. comm(multiple, single) . Let's denote this as comm(AA, B) for there is now more stuff inside the left slot.","title":"Special Commutativity"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#linearity-of-commutator-and-broadcasting","text":"Let see what actually is comm(AA, B). Commutator is a linear function which means that you can 'broadcast' the function. Just like how you would multiply c(x + y) => (cx + cy), you broadcast the c to everyone inside parentheses. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 comm( (H+J+K) , B ) = comm(H, B) + comm(J, B) + comm(K, B) comm(AA, B) = comm( -1.0 , +1.0 Z1 X3 ) +1.0 X0 Y1 Y2 X3 +1.0 Y0 X1 X2 Y3 -1.0 X0 X1 Y2 Y3 -1.0 Y0 Y1 X2 X3 +1.0 Z0 +1.0 Z0 Z1 +1.0 Z0 Z2 +1.0 Z0 Z3 +1.0 Z1 +1.0 Z1 Z2 +1.0 Z1 Z3 -1.0 Z2 +1.0 Z2 Z3 -1.0 Z3 So you broadcast B := 1.0 [Z1 X3] to all terms in AA. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 = comm( -1.0 , +1.0 Z1 X3 ) +comm( +1.0 X0 Y1 Y2 X3 , +1.0 Z1 X3 ) +comm( +1.0 Y0 X1 X2 Y3 , +1.0 Z1 X3 ) +comm( -1.0 X0 X1 Y2 Y3 , +1.0 Z1 X3 ) +comm( -1.0 Y0 Y1 X2 X3 , +1.0 Z1 X3 ) +comm( +1.0 Z0 , +1.0 Z1 X3 ) +comm( +1.0 Z0 Z1 , +1.0 Z1 X3 ) +comm( +1.0 Z0 Z2 , +1.0 Z1 X3 ) +comm( +1.0 Z0 Z3 , +1.0 Z1 X3 ) +comm( +1.0 Z1 , +1.0 Z1 X3 ) +comm( +1.0 Z1 Z2 , +1.0 Z1 X3 ) +comm( +1.0 Z1 Z3 , +1.0 Z1 X3 ) +comm( -1.0 Z2 , +1.0 Z1 X3 ) +comm( +1.0 Z2 Z3 , +1.0 Z1 X3 ) +comm( -1.0 Z3 , +1.0 Z1 X3 ) Now we can deal with each of these seperately instead of thinking how to deal with all terms simultaneously. I call each term of AA as 'a', likewise each term of B as 'b'. Obviously there is only 1 'b' in this case, so 'b' stand for 1.0 [Z1 X3]. Look at the first term, Text Only 1 0) comm( -1.0 , +1.0 Z1 X3 ) There is no Pauli XYZ inside A. Why? It is actually a convention in most of the symbolic computation library that always ommiting the Pauli I Operator. Because you will always get the same thing when multiplying Pauli I to any Pauli XYZ. Hence, comm(a0, b) is no doubt commute. Text Only 1 a0b - ba0 == 0 # by the fact that a0 is Pauli I But for any terms that contain things other than Pauli I, you need to check wether it is commute. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1) comm( +1.0 X0 Y1 Y2 X3 , +1.0 Z1 X3 ) = comm( +1.0 X0 Y1 Y2 X3, +1.0 Z1 X3) = comm( +1.0 Y1 X3 , +1.0 Z1 X3 ) # focus on common index = YZ XX - ZY XX # lets use the clockwiseness techinque from previous section ## we can solely keep track of the first (left) clockwiseness Anticlockwise%2 ^ Clockwise%2 = 1 ^ 0 = 1 = non commute One counter example is enough, so comm(AA, B) return False immediately.","title":"Linearity of commutator and broadcasting"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#uniqueness-of-pauli-xyz","text":"The most important notion about Pauli XYZ is that it form a cyclic group and thus maintain uniqueness. This uniqueness ensure that we can boradcase like above paragraph and reject commutativity immediately after one counter example found. Otherwise we must check for all pattern to see whether they are commute or not. What if there did not exist uniquess? Let say we got comm(AA, B). And currently comparing AA[i] and B[0]. Text Only 1 comm( AA[i] , B[0] ) When they commute, they cancel out. But when they NOT commute, the remainder stay. What will then happen? Remember that we are comparing AA and B. We scan from AA[0] to AA[n]. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 If comm(AA[1], BB[0]) != 0 Since we multiplied AA[1] by BB[0], this should form a new term that we don't know yet comm(AA[1], B[0]) => something else let say 1 * R_1 Then we meet other commute pair Let say comm(AA[2], B[0]) == 0 But this is just meaning that comm(AA[2], B[0]) => something else let say 1 * R_2 What if there is another R_2 ? What if R_1 is actually R_2 ? So we cannot cancel out the Pauli Tensor from comm(AA[2], B[0]), although comm(AA[2], B[0]) == 0 If this kind of thing can be happened, then we must check for all terms to make sure the final remainder is zero, then finally we can say AA and B is commute But we don't need to do that. Let me prove it. Since Pauli XYZ is a cyclic group. Text Only 1 2 X Z Y Let say you got Y, multiplying X to results Z. You can do the same thing on the above triangle. Try draw a line from Y, passing X, you must reach Z. Then you have a set of Pauli XYZ. Just think of many of those triangles all happening at once. Text Only 1 2 3 4 5 6 7 B [focus] B0 ... AA [focus] [outfo] AA0 ... ... AA1 ... ... AA2 ... ... Recall the section of Premise: terms in linear combination must be unique . Each Pauli XYZ inside AA is a unique permutation of Pauli Tensor. For the outfo part, just assume that they are all having the same exactly one permutation. Even that, the focus part must all differ from each other within same set i.e. within AA. Let say AA consist of 3 rows and they differ from each other in only one Pauli XYZ. And B[0] is Z Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 B [focus] 0 Z AA [focus] [outfo] 0 X ... 1 Y ... 2 Z ... = AAB [focus] [outfo] 0 XZ ... 1 YZ ... 2 ZZ ... = AAB [focus] [outfo] 0 Y ... 1 X ... 2 I ... Terms in AA are still differ from each other after multiplication. Because they are all multiplied by the same thing. Their relative distance after being multiplied still remain unchanged. Think of that XYZ triangle analogy. You got 3 of them now. And then you rotate them simultaneously by same unit. Their relative status do not change after all. Like you multiply 3 to [1. 2. 3], they change to [3, 6, 9] and they still differ internally before and after. Hence uniqueness of Pauli XYZ is ensured and we can safely do the broadcasting and cancel out comm(AA[i], B[0]) = 0 terms.","title":"Uniqueness of Pauli XYZ"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#code_1","text":"commutator_special 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def commutator_special ( AA , B ): # Only clockwiseness dictionary is needed lookup = { 'XY' : 0 , 'YX' : 1 , 'XZ' : 1 , 'ZX' : 0 , 'YZ' : 0 , 'ZY' : 1 } # Hash the whole AA dict for faster checking AA_Hashs = { hash (( key , val )): ( dict ( key ), val ) for key , val in AA . items () } for b_key , b_cof in B . keys : # This loop has only one element b_key = dict ( b_key ) if hash ( b_key ) in AA_Hashs : # Self commute return True # Only dict.values is enough. We don't need hash((key,val)) below for a_key , a_cof in AA . values (): # Extract common indices intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : clw = aclw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] if anticlock : aclw ^= 1 # Parity check else : clw ^= 1 # Parity check if aclw ^ clw : # Parity check return False return True","title":"Code"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#general-commutativity","text":"We have already seen comm(one, one) and comm(many, one), how about comm(many, many) denoted as comm(AA, BB) ? Is that difficult? Yes it is not an easy job to think about it. But don't worry, because I solved it for you already.","title":"General Commutativity"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#cartesian-product","text":"To do comm(AA, BB), we need to broadcase everything in BB to everything in AA. And this is simplily the case of Cartesian Product. You can write some simple code to see what it is. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 from itertools import product AA = [ 0 , 1 , 2 , 3 ] BB = [ 0 , 1 , 2 , 3 ] for a , b in product ( AA , BB ): print ( a , b ) # 0 0 # 0 1 # 0 2 # 0 3 # 1 0 # 1 1 # ... So if we are to check whether AA and BB commute, we have to check for all combination in the worst case. This can be super computational intense if you do this straight. And some guy do carry the whole calculation of AABB - BBAA, namely, carry out the multiplication of AABB and BBAA seperately then subtract them. This is just a waste of time since we have already discovered everything from the symmetry of Pauli XYZ and being able to ignore so many maniplulations and still obtain the result. Just note that you can see that from the Cartesian Product, 01 and 10, or things like this can be happened. The mirror image of the same thing. The number is originally denoted as the index of AA and BB. But what if, what if those {0,1,2,3,...} stands for some unique Pauli XYZ sequence? We can see that this may indicate a exact concern among the symmetry.","title":"Cartesian Product"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#degerenate-uniqueness","text":"Last section I proved the uniquness of Pauli XYZ within a linear combination. This however, do not work in the general case which is comm(many, many) i.e. comm(AA, BB). Things are unique inside AA. Things also unique inside BB. But the point is the same thing can be possessed by AA and BB at the same time. Text Only 1 2 3 4 5 6 7 8 9 10 11 [AA] [BB] 0 ... ... 1 ... ... 2 Z0 X1 X2 ... 3 ... ... 4 ... Z0 X1 X2 5 ... Z0 Z1 6 ... ... 7 Z0 Z1 ... 8 ... ... 9 ... ... Let recall the Cartestian Product. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 a b 0 0 0 1 0 2 0 3 1 0 1 1 ... fist we need to compute comm(0, 0) # self commute + comm(0, 1) + comm(0, 2) + comm(0, 3) + comm(1, 0) + comm(1, 1) # self commute + comm(1, 2) + comm(1, 3) + ... we can already cancel some of them by the law of self commute comm(0, 1) # ? + comm(0, 2) + comm(0, 3) + comm(1, 0) # ? + comm(1, 2) + comm(1, 3) ... then we see some interesting pairs comm(0, 1) + comm(1, 0) what is their relationship? So, a pair of couple 0 and 1. Just differed by the ordering. But what are they actually? Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 since comm(a, b) = ab - ba0 comm(0, 1) = 01 - 10 comm(1, 0) = 10 - 01 = -(01 - 10) # Oops sum it ! comm(0, 1) + comm(1, 0) = (01 - 10) + -(01 - 10) = 0 # This commute, but if and only if the coefficient of left0 and right0 is the exactly same thing if not, it will be like 0.5*(01 - 10) + -0.3*(01 - 10) = 0.2*(01 - 10) => NON commute So they added up. This is not happened in the previous section in Special Commutativity. In fact this kind of order-reverted commutativity is well known. From this result, we can see that if the exactly same pair is pocessesed by both AA and BB, then we automatically know this pair commute. Text Only 1 2 if a in BB and b in BB: # commute! continue # Not even bother to check the clockwiseness like finding the overlaping part of two set Text Only 1 2 3 4 5 6 /---------\\ /-------\\/ \\ / /\\ | | |!!| | \\ \\/ / \\_______/ \\_________/ But for others, not sure. You have to check for their clockwiseness. And since the uniqueness is degenerated in general case, we cannot return False just because one pair is non commute. For example Text Only 1 2 3 4 5 6 7 8 9 10 comm( [Z0 X1 Y2 X3] , [Y1 X2 Y3] ) = 2j [Z0 Z1 Z2 Z3] comm( [Y0 Z1 Z2 Z3] , [X0] ) = -2j [Z0 Z1 Z2 Z3] Both pair do not commute internally, but the outcome is exactly same and coeficients add up to zero, then annihilate","title":"Degerenate uniqueness"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#code_2","text":"commutator_general 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def commutator_general ( AA , BB ): # Only clockwiseness dictionary is needed lookup = { 'XY' : 0 , 'YX' : 1 , 'XZ' : 1 , 'ZX' : 0 , 'YZ' : 0 , 'ZY' : 1 } # Hash for faster checking # Prepare both because we are to check for set relation AA_Hashs = { hash (( key , val )):( dict ( key ), val ) for key , val in AA . items () } BB_Hashs = { hash (( key , val )):( dict ( key ), val ) for key , val in AA . items () } # Prepare a set for faster checking common_terms = set ( A_hashs . keys ()) . intersection ( B_hashs . keys ()) for a_hash , ( a_key , a_cof ) in AA . keys : # This loop has many element a_key = dict ( a_key ) if a_hash in common_terms : for b_hash , ( b_key , b_cof ) in BB . items (): if b_hash in common_terms : # Skip for this intersection pairs continue # Extract common indices intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : clw = aclw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] if anticlock : aclw ^= 1 # Parity check else : clw ^= 1 # Parity check if clw ^ aclw : # Parity check ########################################### # We need to evaluate the result here! # # Since we uniqueness is not exist in # # general case !!! # ########################################### else : # Seperate code to eliminate unnecessary $if b_hash in common_terms$ checking ######### Same code from above ########### for b_key , b_cof in BB . values (): # Only values is enough. We don't need hash(key) below intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : clw = aclw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] if anticlock : aclw ^= 1 # Parity check else : clw ^= 1 # Parity check if clw ^ aclw : # Parity check ########################################### # We need to evaluate the result here! # # Since we uniqueness is not exist in # # general case !!! # ########################################### ########################################### # Now check if the end result is zero # ###########################################","title":"Code"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#normal-commutator","text":"So, I said from the begining that commutator is a function which Text Only 1 commutator = AB - BA If thing do not commute, AB - BA != 0, there is remainder. Sometimes people want the remainder more than commutativity. And I got you. So, we have been avoid calculating the coefficient of NON commute outcome. Because, from the textbook or from the first section, people knew that there is only two result from NON commute prduct. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 Clockwise => 1j Anticlockwise => -1j XY - YX = Clockwise - Anticlockwise = 1j - (-1j) = 2j ZY - YZ = Anticlockwise - Clockwise = -1j - 1j = -2j This is simple, because we only do this on one single Pauli XYZ, that is why they only post this on textbook. What happen if we got a Tensor Product of Pauli XYZ? Text Only 1 2 Clockwise * Clockwise * Anticlockwise * Anticlockwise ... => ? Anticlockwise * Anticlockwise * Clockwise * Clockwise ... => -? Of course you can do it straight. I won't stop you. Text Only 1 => 1j * 1j * -1j * -1j * 1j * ... Seems endless multiplication. Recalling from the first setion, we got this equation. Maybe this can help us. Text Only 1 2 3 4 ca and cb stand for coefficient of a and b coefficient when non commute = (ca * cb) * [(-1)**(Anticlockwise) * (1j)**(Clockwise + Anticlockwise) - (-1)**(Clockwise) * (1j)**(Clockwise + Anticlockwise)] Too long. Just call Clockwise 'clw' and Anticlockwise 'aclw'. Text Only 1 (ca * cb) * [(-1)**(aclw) * (1j)**(clw + aclw) - (-1)**(clw) * (1j)**(clw + aclw)] The problem is the big thing behind (ca * cb) . Its value depends on count of clw and aclw. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 (-1)**(aclw) * (1j)**(clw + aclw) - (-1)**(clw) * (1j)**(clw + aclw) = (1j)**(clw + aclw) * [(-1)**(aclw) - (-1)**(clw)] => eq.0 Commute means that coefficient equals zero. this can happen if and only if the right part equal zero 0 = (1j)**(clw + aclw) * [(-1)**(aclw) - (-1)**(clw)] => [(-1)**(aclw) - (-1)**(clw)] == zero This is just adding and subtracting, it can be zero But what is exponential of -1 ? (-1)**0 = 1 (-1)**1 = -1 (-1)**2 = 1 (-1)**3 = -1 (-1)**4 = 1 ... we can just count the parity clw and aclw for this part But what is then (1j)**(clw + aclw) ? 1j** 0 = 1 1j** 1 = 1j 1j** 2 = -1 1j** 3 = -1j 1j** 4 = 1 1j** 5 = 1j ... There is -1 inside ! The left part is entangled with the right part !!!!! This is complicated. -1 and j are not independent from each other. This cannot be solved trivially. We have two data, namely, number of clockwise and anticlock. Let see what we can do with them. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 eq.0 (1j)**(clw + aclw) * [(-1)**(aclw) - (-1)**(clw)] Since this eq.0 only depend on clw and aclw, we should see what input value leads to what outcome When NON commute, clw and aclw has different parity, this can be checked by aclw%2 clw%2 Let substitute some real number (-1)**(0) - (-1)^(1) == +1 - (-1) == 2 (-1)**(1) - (-1)^(0) == -1 - +1 == -2 Now we know either 2 or -2 can be the answer of this part okay, it seems like we can predict the sign of outcome aclw%2 clw%2 0 1 => positive 1 0 => negative Neither 0+1 or 1+0 can be negative to distinguish. Why not try 0-1 or 1-0? 0 - 1 == -1 So (aclw%2 - clw%2) is the answer for the sign we successfully connect the parity of clw and aclw to negative sign And 1j exponential has a cycle of 4, so the value of 1j part depend on (clw + aclw)%4 or (clw%4 + aclw%4) or (clw%4 + aclw%4)%4 But clw and aclw cannot have same parity, otherwise they are comute and cancel out. No even+even or odd+odd Only even+odd => odd clw + aclw can only be 1 and 3 1j** 1 = 1j 1j** 3 = -1j So this is a math question of, what number satisfy the following two equation eq.1 aclw%2 - clw%2 == 1 or -1 eq.2 (clw%4 + aclw%4) == 1 or 3 Summing eq.1 and eq.2 will get this eq.1.+eq.2 (aclw%2-clw%2) + (clw%4+aclw%4) == ? Recall that {1,-1} from eq.1 is the indicator for { 2,-2 } and {1, 3} from eq.2 is the indicator for {1j,-1j} We can do carry out the calculation of the original eq.0 and eq.1 eq.2 to see there is indeed a isomorphism between these equations [eq.1] [eq.2] [result] [eq.0L] [eq.0R] [result] SUM /----> (2) MULTIPLY /----> (-2j) / / (-1)-----(1)----> (0) (2)-----(j)----> (2j) \\ / \\ / \\/ \\/ /\\ /\\ / \\ / \\ (1)-----(3)----> (4) (-2)----(-j)----> (2j) \\ \\ \\----> (2) \\----> (-2j) So {0,4} from eq.1.+eq.2 maps to ( 2j) { 2} from eq.1.+eq.2 maps to (-2j) In fact 4 == 0 (mod 4), so for a module4 system {0} from eq.1.+eq.2 maps to ( 2j) {2} from eq.1.+eq.2 maps to (-2j) Hence we know that coefficient == 2j iff (eq.1.+eq.2)%4 == 0 == -2j iff (eq.1.+eq.2)%4 == 2 _______________________________________________________________________________________________ | clw aclw original equation a=clw%2-aclw%2 b=(clw%4+aclw%4)%4 (a+b)%4 finalresult | |______________________________________________________________________________________________| | 0 1 -2 * 1j 1 1 2 (-0-2j) | | 0 3 -2 * (-0-1j) 1 3 0 2j | | 1 0 2 * 1j -1 1 0 2j | | 1 2 2 * (-0-1j) -1 3 2 -2j | | 2 1 -2 * (-0-1j) 1 3 0 2j | | 2 3 -2 * 1j 1 1 2 (-0-2j) | | 3 0 2 * (-0-1j) -1 3 2 -2j | | 3 2 2 * 1j -1 1 0 2j | |______________________________________________________________________________________________| ((aclw%2 - clw%2) + (clw%4 + aclw%4)%4)%4 = {(2, -2j), (0, 2j)} since -1 has order of cycle == 2, and 1j has order of cycle ==4, check until n=4 is enough for revealing all pattern. Now can now use this magic equation to answer the question. Instead of multiplying the long sequencence of 1j and -1j, we count the number of clockwise and anticlockwise, then we know everything. Since {2j, -2j} is the only set of result, we can factorize 2j and multiply it back at the end of the function.","title":"Normal Commutator"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#reduce-complexity","text":"That is just some fansy technique to eliminate multiplication and replace it with addition and other primitive arithematics. But 1 year after I finished this script, I found that there is alternative simplier method. First notion is that mulitiplication of imaginary number is a C4 cyclic group. j is clockwise movement, -j is anticlockwise movement. Take the always positive module 4 of (-j)**n, it becomes clockwise. Text Only 1 (-j)**n = j**((-n)%4) So, there we can encompass both (j) (-j) under one variable. Text Only 1 2 3 (j)**m * (-j)**n = (j)**(m%4) * j**((-n)%4) = (j)**((m-n)%4) And in AB - BA, we need the clockwiseness of AB is different that BA. The final clockwiseness is now reduced to (clw-aclw)%4. We do not need (clw-aclw)%4 in {0,2} since if you swap clw and aclw, the result is the same, means that AB==BA. So what left is {1,3}. Text Only 1 2 3 4 j**1 = +j j**3 = -j And -j counterpart is only differed by the sign. In conclusion, we only need to see whether it is 1 or 3. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if (clw-aclw)%4==1: AB - BA = +j - (-j) = 2j * coefficient if (clw-aclw)%4==3: AB - BA = -j - (+j) = -2j * coefficient Since 1=0+1 and 3=2+1 We can encode this as (clw-aclw)%4//2 => {0,1} 0 is False and 1 is True So, if True, it is negative.","title":"Reduce Complexity"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#code_3","text":"commutator_normal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def normal_commutator ( AA , BB ): # Dictionary is needed lookup = { 'XY' : 0 , 'YX' : 1 , 'XZ' : 1 , 'ZX' : 0 , 'YZ' : 0 , 'ZY' : 1 } lookup_xyz = { 'XY' : 'Z' , 'YX' : 'Z' , 'XZ' : 'Y' , 'ZX' : 'Y' , 'YZ' : 'X' , 'ZY' : 'X' , 'X' : 'X' , 'Y' : 'Y' , 'Z' : 'Z' } from collections import defaultdict from operator import itemgetter new = defaultdict ( float ) # Hash for faster checking # Prepare both because we are to check for set relation AA_Hashs = { hash (( key , val )):( dict ( key ), val ) for key , val in AA . items () } BB_Hashs = { hash (( key , val )):( dict ( key ), val ) for key , val in AA . items () } # Prepare a set for faster checking common_terms = set ( A_hashs . keys ()) . intersection ( B_hashs . keys ()) for a_hash , ( a_key , a_cof ) in AA . keys : # This loop has many element a_key = dict ( a_key ) if a_hash in common_terms : for b_hash , ( b_key , b_cof ) in BB . items (): if b_hash in common_terms : # Skip for this intersection pairs continue # Extract common indices intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : new_key = a_key . copy () new_key . update ( b_key ) clw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] new_key [ i ] = lookup_xyz [ f \" { a }{ b } \" ] if anticlock : clw -= 1 # Parity check else : clw += 1 # Parity check else : new_key [ i ] = None clw %= 4 if clw % 2 : # Parity check new_key = (( bit , xyz ) for bit , xyz in new_key . items () if xyz ) new_key = tuple ( sorted ( new_key , key = itemgetter ( 0 ))) new [ new_key ] += ( - a_cof * b_cof if clw % 4 // 2 else + a_cof * b_cof ) else : # Seperate code to eliminate unnecessary $if b_hash in common_terms$ checking ######### Same code from above ########### for b_key , b_cof in BB . values (): # Only values is enough. We don't need hash(key) below intersect = set ( a_key . keys ()) . intersection ( b_key . keys ()) if intersect : new_key = a_key . copy () new_key . update ( b_key ) clw = 0 for i in intersect : a , b = a_key [ i ], b_key [ i ] if a != b : # Skip XX YY ZZ anticlock = lookup [ f \" { a }{ b } \" ] new_key [ i ] = lookup_xyz [ f \" { a }{ b } \" ] if anticlock : clw -= 1 # Parity check else : clw += 1 # Parity check else : new_key [ i ] = None clw %= 4 if clw % 2 : # Parity check new_key = (( bit , xyz ) for bit , xyz in new_key . items () if xyz ) new_key = tuple ( sorted ( new_key , key = itemgetter ( 0 ))) new [ new_key ] += ( - a_cof * b_cof if clw // 2 else + a_cof * b_cof ) QO = QubitOperator # Preload new_QO = QO () new_QO . terms = new new_QO . compress () return new_QO * 2 j","title":"Code"},{"location":"toward_science/Special%20and%20General%20Commutativity%20of%20Pauli%20Operator/#the-end","text":"","title":"================= THE END ================="},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/","text":"[\u79d1\u666e] \u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f \u00b6 \u300c\u91cf\u5b50\u7cfe\u7e8f\u300d\u5f88\u6df1\u5967\u96e3\u660e\uff1f\u90a3\u53ea\u662f\u56e0\u70ba\u4f60\u6c92\u6709\u770b\u904e\u4ed6\u7684\u6578\u5f0f\u800c\u5df2\u3002 \u8981\u6b63\u78ba\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f\uff0c\u4f60\u5fc5\u9808\u8981\u660e\u767d\u5176\u6578\u5b78\u4e0a\u7684\u542b\u610f\uff0c\u800c\u9019\u6578\u5b78\u5176\u5be6\u4e0d\u96e3\uff0c\u96e3\u7684\u662f\u4f60\u7121\u6cd5\u62cb\u958b\u6587\u79d1\u7684\u5305\u4f0f\u3002 2 = 1 + 1 \u00b6 2 = 1 + 1 \u4e0a\u9762\u7684\u6578\u5f0f\u5fc5\u9808\u8981\u9019\u6a23\u5beb\u30022 = 1 + 1\u3002 2\u662f\u75311+1\u7d44\u6210\u7684\u3002\u5c31\u662f\u5b57\u9762\u4e0a\u7684\u610f\u898b\uff0c 2\u9019\u4e00\u500b\u55ae\u5143 \u662f\u7531\u5169\u500b 1\u7684\u7d44\u4ef6 \u6240\u69cb\u6210\u7684\u3002 \u5982\u679c\u4f60\u9023\u9019\u4e00\u500b\u9053\u7406\u90fd\u7121\u8fa6\u6cd5\u7406\u89e3\u7684\u8a71\u53ef\u4ee5\u6309\u4e0a\u4e00\u9801\uff0c\u56e0\u70ba\u4f60\u6c92\u6709\u8db3\u5920\u7684\u601d\u7dad\u80fd\u529b\u7406\u89e3\u6587\u5b57\u548c\u7406\u89e3\u9019\u500b\u4e16\u754c\uff0c\u4f46\u4f60\u8981\u505a\u7684\u4e0d\u662f\u653e\u68c4\u601d\u8003\uff0c\u800c\u662f\u8a8d\u771f\u601d\u8003\u81ea\u5df1\u70ba\u751a\u9ebc\u7f3a\u4e4f\u601d\u7dad\u80fd\u529b\u3002 \u6c92\u6709\u554f\u984c\u7684\u8a71\u6211\u7e7c\u7e8c\u3002 2 = 1 + 1 \u662f\u5728\u540c\u4e00\u500b\u7dad\u5ea6\u5e95\u4e0b\u57f7\u884c\u7684\u52a0\u6cd5 \u4f8b\u5982\u8aaa 2\u500b\u68a8 = 1\u500b\u68a8 + 1\u500b\u68a8\uff0c\u9019\u662f\u5728\u68a8\u7684\u7dad\u5ea6\u5e95\u4e0b\u57f7\u884c\u7684\u52a0\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7dad\u5ea6\u4e4b\u9593\u540c\u6642\u57f7\u884c\u52a0\u6cd5\uff0c\u4f8b\u5982 1\u500b\u68a81\u500b\u6a59 = 1\u500b\u68a8 + 1\u500b\u6a59\u3002\u4e00\u5207\u90fd\u662f\u5b57\u9762\u4e0a\u7684\u610f\u601d\uff0c\u9019\u88e1\u6c92\u6709\u9b54\u6cd5\u3002\u9019\u88e1 1\u500b\u68a81\u500b\u6a59 \u6210\u70ba\u4e86\u4e00\u500b \u55ae\u5143 \u3002\u56e0\u70ba\u5176\u70ba\u5169\u500b\u4e0d\u540c\u7684\u7dad\u5ea6\uff0c\u6211\u5011\u5fc5\u9808\u5982\u6b64\u8868\u9054\uff1a Text Only 1 2 [1\u500b\u68a8] = [1\u500b\u68a8] + [0\u500b\u6a59] [1\u500b\u6a59] [0\u500b\u68a8] [1\u500b\u6a59] \u8a18\u4f4f\u68a8\u7684\u7dad\u5ea6\u5beb\u5728\u4e0a\u9762\uff0c\u6a59\u7684\u7dad\u5ea6\u5beb\u5728\u4e0b\u9762\uff0c\u7136\u5f8c\u6211\u5011\u53ef\u4ee5\u5beb\u5f97\u66f4\u7c21\u6f54\uff1a Text Only 1 2 (\u68a8) : [1] = [1] + [0] (\u6a59) [1] [0] [1] 1\u500b\u7bb1\u88cf\u9762\u88dd\u4e861\u500b\u68a8\u548c1\u500b\u6a59\uff0c\u9019\u500b\u7bb1\u5c31\u662f\uff1a Text Only 1 2 \u7bb1 = [1] [1] 1\u500b\u7bb1\u88cf\u9762\u6709\u53ef\u80fd\u88dd\u4e861\u500b\u68a8\uff0c\u4e5f\u6709\u53ef\u80fd\u88dd\u4e861\u500b\u6a59\u3002\u5047\u5982\u8aaa\u88dd\u4e86\u68a8\u548c\u88dd\u4e86\u6a59\u7684\u6a5f\u7387\u662f\u4e00\u6a23\u7684\u8a71\uff0c\u5373\u662f50%\u6a5f\u7387\u6253\u958b\u7bb1\u6703\u898b\u5230\u68a8\u300150%\u6a5f\u7387\u6253\u958b\u7bb1\u6703\u898b\u5230\u6a59\uff0c\u9019\u500b\u7bb1\u5c31\u662f\uff1a Text Only 1 2 \u7bb1 = 0.707*[1] + 0.707*[0] [0] [1] \u70ba\u751a\u9ebc\u662f\u00bd\u7684\u5e73\u65b9\u68390.707\u5462\uff1f\u6211\u73fe\u5728\u5c31\u8ddf\u4f60\u8b1b\u3002 \u91cf\u5b50\u904b\u7b97\u8d85\u5165\u9580 \u00b6 \u9996\u5148\u70ba\u4e86\u65b9\u4fbf\uff0c\u6211\u5011\u5c07\u5982\u662f\u5beb\u51fa\u7bb1\uff1a Text Only 1 2 3 4 5 6 \u68a8 = |\u68a8> \u6a59 = |\u6a59> |\u7bb1> = 0.707|\u68a8> + 0.707|\u6a59> \u6216\u8005 <\u7bb1| = 0.707<\u68a8| + 0.707<\u6a59| \u7bad\u5480\u662f\u7528\u4f86\u8868\u9054\u76f8\u4e58\u7684\u3002\u5beb\u6210\u9019\u6a23\u7684\u6587\u5b57\u53ef\u4ee5\u76f8\u4e58\u3002 Text Only 1 <X||Y> \u6587\u5b57\u76f8\u4e58\u7684\u898f\u5247\u5c31\u662f\u7bad\u5480\u5305\u88f9\u7684\u7bc4\u570d\u5167\u5de6\u53f3\u5b8c\u5168\u76f8\u540c\u7684\u6642\u5019\u7b49\u59821\uff0c\u5426\u5247\u4e00\u5f8b\u6b78\u96f6\u3002\u800c\u6578\u5b57\u90a3\u908a\u5c31\u7167\u5e38\u76f8\u4e58\u3002 Text Only 1 2 3 4 <\u68a8||\u68a8> = 1 <\u6a59||\u6a59> = 1 <\u68a8||\u6a59> = 0 <\u6a59||\u68a8> = 0 \u5beb\u6210|X><Y|\u7684\u6587\u5b57\u66ab\u6642\u4e0d\u9700\u8981\u7406\u6703\uff0c\u53cd\u6b63\u8b1b\u4e86\u4f60\u4e5f\u4e0d\u660e\u767d\u3002 \u540c\u4e00\u4ef6\u6771\u897f\u76f8\u4e58\u7684\u6642\u5019\u53ef\u4ee5\u5f97\u51fa\u6bcf\u7a2e\u53ef\u80fd\u6027\u5404\u81ea\u7684\u6a5f\u7387 \u5982\u662f\u8005 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <\u7bb1||\u7bb1> = ( 0.707<\u68a8| ) * ( 0.707|\u68a8> ) (+0.707<\u6a59| ) (+0.707|\u6a59> ) = 0.707*0.707<\u68a8||\u68a8> + 0.707*0.707<\u68a8||\u6a59> + 0.707*0.707<\u6a59||\u68a8> + 0.707*0.707<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u68a8||\u6a59> + 0.5<\u6a59||\u68a8> + 0.5<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u6a59||\u6a59> \u6700\u5f8c\u9019\u4e00\u53e5\u5c31\u662f\u6a19\u793a\u4e8650%\u6a5f\u7387\u5f97\u5230\u68a8\uff0c\u540c\u664250%\u6a5f\u7387\u5f97\u5230\u6a59\u3002\u00bd\u7684\u5e73\u65b9\u68390.707\u7684\u539f\u56e0\u5c31\u662f\u70ba\u4e86\u78ba\u4fdd\u5728\u9019\u500b\u6642\u5019\u80fd\u5920\u53d6\u5f97\u6b63\u78ba\u7684\u6a5f\u7387\u6578\u503c\u3002 \u91cf\u5b50\u529b\u5b78\u7684\u89c0\u6e2c\u9700\u8981\u5148\u6709\u4e00\u500b\u671f\u671b \u5c31\u662f\u8aaa\uff0c\u4f60\u73fe\u5728\u554f\u300c\u6211\u60f3\u77e5\u9053\u9019\u4e00\u500b\u7bb1\u5165\u9762\u88dd\u7684\u662f\u751a\u9ebc\u300d\u7684\u6642\u5019\u4f60\u4e0d\u80fd\u5920\u6191\u7a7a\u554f\u3002\u4f60\u53ea\u53ef\u4ee5\u554f\u300c \u9019\u4e00\u500b\u7bb1 \u8ddf \u6211\u60f3\u50cf\u4e2d\u7684\u7bb1 \u6709\u591a\u63a5\u8fd1\u300d\uff0c\u5982\u662f\u8005\u4f60\u5fc5\u9808\u63d0\u4f9b\u4e00\u500b\u671f\u671b\u4f86\u505a\u5c0d\u7167\uff0c\u671f\u671b\u5c31\u662f \u4f60\u60f3\u50cf\u4e2d\u7684\u7bb1 \u3002 \u554f\u7684\u6642\u5019\uff0c\u4f60\u628a \u4f60\u60f3\u50cf\u4e2d\u7684\u7bb1 (\u4ee5\u4e0b\u7a31\u70ba\u671f\u671b) \u548c \u9019\u4e00\u500b\u7bb1 (\u4ee5\u4e0b\u7a31\u70ba\u7bb1) \u76f8\u4e58\u3002 \u91cf\u5b50\u529b\u5b78\u7684\u89c0\u6e2c(\u5c0d\u7167)\u65b9\u6cd5\u662f <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> \u7bb1\u5728\u4e2d\u9593\uff0c\u7136\u5f8c\u4f60\u62ff\u671f\u671b\u4f86\u5de6\u53f3\u593e\u4f4f\u5b83\u3002\u7bad\u5480\u7684\u65b9\u5411\u5fc5\u9808\u56b4\u683c\u9075\u5b88\u3002 \u554f\uff1a\u7bb1\u88dd\u7684\u662f\u4e0d\u662f\u68a8 \u5982\u662f\u8005 |\u671f\u671b> = 1|\u68a8> \u5148\u6aa2\u67e5\u671f\u671b\u662f\u4e0d\u662f100%\u80fd\u5920\u7372\u5f97\u68a8 Text Only 1 2 3 4 5 <\u671f\u671b||\u671f\u671b> = 1<\u68a8| * 1|\u68a8> = 1*1 <\u68a8||\u68a8> \u6c92\u6709\u554f\u984c\u3002\u6211\u5011\u73fe\u5728\u53ef\u4ee5\u8655\u7406 <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b>\u4e86\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u5de6\u908a\u7684<\u671f\u671b||\u7bb1> = 1<\u68a8| * ( 0.707|\u68a8> ) (+0.707|\u6a59> ) = 0.707<\u68a8||\u68a8> + 0.707<\u68a8||\u6a59> = 0.707<\u68a8||\u68a8> \u53f3\u908a\u7684<\u7bb1||\u671f\u671b> = ( 0.707<\u68a8| ) * 1|\u68a8> (+0.707<\u6a59| ) = 0.707<\u68a8||\u68a8> + 0.707<\u6a59||\u68a8> = 0.707<\u68a8||\u68a8> \u5982\u662f\u8005<\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> = 0.707<\u68a8||\u68a8> * 0.707<\u68a8||\u68a8> = 0.707 * 0.707 * <\u68a8||\u68a8> <\u68a8||\u68a8> = 0.5 * 1 * 1 = 0.5 \u7d50\u679c\u8868\u793a\u6211\u5011\u6709\u7bb1\u7684\u5167\u5bb9\u7269\u670950%\u6a5f\u7387\u543b\u5408\u6211\u5011\u7684\u671f\u671b\u3002\u63db\u53e5\u8a71\u5c31\u662f\u8aaa\u670950%\u6a5f\u7387\u88cf\u9762\u88dd\u7684\u662f\u68a8\u3002 \u554f\uff1a\u7bb1\u88dd\u7684\u662f\u4e0d\u662f50%\u68a8 50%\u6a59 \u73fe\u5728\u62ff\u4e00\u500b\u8ddf\u7bb1\u5b8c\u5168\u4e00\u6a23\u7684\u6771\u897f\u4f86\u4f5c\u70ba\u671f\u671b\uff0c\u8ddf\u5b83\u5c0d\u7167\u5427\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5de6\u908a\u7684<\u671f\u671b||\u7bb1> = ( 0.707<\u68a8| ) * ( 0.707|\u68a8> ) (+0.707<\u6a59| ) (+0.707|\u6a59> ) = 0.707*0.707<\u68a8||\u68a8> + 0.707*0.707<\u68a8||\u6a59> + 0.707*0.707<\u6a59||\u68a8> + 0.707*0.707<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u68a8||\u6a59> + 0.5<\u6a59||\u68a8> + 0.5<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u6a59||\u6a59> \u518d\u4f86\u53f3\u908a\u7684<\u7bb1||\u671f\u671b>\uff0c\u8001\u5be6\u8aaa\u56e0\u70ba\u7bb1\u548c\u671f\u671b\u662f\u540c\u6a23\u7684\u6771\u897f\uff0c\u6240\u4ee5\u7d50\u679c\u8ddf\u4e0a\u9762\u7684\u4e00\u6a21\u4e00\u6a23\uff0c\u56e0\u6b64\u4e5f\u4e0d\u8cbb\u6642\u5beb\u6b65\u9a5f\u51fa\u4f86\u4e86\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> = ( 0.5<\u68a8||\u68a8> ) * ( 0.5<\u68a8||\u68a8> ) (+0.5<\u6a59||\u6a59> ) (+0.5<\u6a59||\u6a59> ) = 0.5*0.5<\u68a8||\u68a8><\u68a8||\u68a8> + 0.5*0.5<\u68a8||\u68a8><\u6a59||\u6a59> + 0.5*0.5<\u6a59||\u6a59><\u68a8||\u68a8> + 0.5*0.5<\u6a59||\u6a59><\u6a59||\u6a59> = 0.25 + 0.25 + 0.25 + 0.25 = 1 \u51fa\u4f86\u7684\u7d50\u679c\u5c31\u662f1\uff0c\u5373100%\uff0c\u5373\u5b8c\u5168\u4e00\u6a23\u3002 \u4f86\u91cf\u5b50\u7cfe\u7e8f\u5427 \u00b6 \u4e0a\u7bc0\u6211\u5011\u8655\u7406\u7684\u662f\u4e00\u500b\u7bb1\u3002\u4f46\u5982\u4f55\u6709\u5169\u500b\u7bb1\u7684\u6642\u5019\u6211\u5011\u61c9\u8a72\u8981\u600e\u6a23\u5728\u6578\u5b78\u4e0a\u8655\u7406\u5462\uff1f\u5176\u5be6\u5f88\u7c21\u55ae\uff0c\u4e5f\u4e0d\u904e\u5c31\u662f\u628a\u5169\u500b\u7bb1\u7684\u72c0\u614b\u76f8\u4e58\u800c\u5df2\u3002 \u5047\u8a2d\u5169\u500b\u7bb1\u7684\u8a2d\u5b9a\u662f\u4e00\u6a23\u7684 Text Only 1 2 |\u7bb1A> = 0.707|\u68a8> + 0.707|\u6a59> |\u7bb1B> = 0.707|\u68a8> + 0.707|\u6a59> \u5169\u500b\u7bb1\u7684\u72c0\u614b\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 |\u7bb1A> * |\u7bb1B> = ( 0.707|\u68a8> ) * ( 0.707|\u68a8> ) \uff08+0.707|\u6a59> ) (+0.707|\u6a59> ) = 0.707*0.707|\u68a8>|\u68a8> + 0.707*0.707|\u68a8>|\u6a59> + 0.707*0.707|\u6a59>|\u68a8> + 0.707*0.707|\u6a59>|\u6a59> = 0.5|\u68a8>|\u68a8> + 0.5|\u68a8>|\u6a59> + 0.5|\u6a59>|\u68a8> + 0.5|\u6a59>|\u6a59> \u8a08\u7b97\u5230\u9019\u88e1\u5c31\u662f\u76e1\u982d\uff0c\u4e0d\u80fd\u518d\u7c21\u5316\u4e86\u3002 \u9019\u6a23\u51fa\u73fe\u4e86\u4e00\u500b\u65b0\u7684\u6771\u897f\uff0c\u751a\u9ebc\u662f |\u68a8>|\u68a8> \uff1f \u4e00\u958b\u59cb\u6211\u5011\u662f|\u7bb1A> * |\u7bb1B>\u7684\u3002\u6700\u5f8c\u51fa\u73fe\u4e86 |\u68a8>|\u68a8> \u3002\u9019\u500b\u610f\u601d\u662f\u5de6\u908a\u7684\u70ba\u7bb1A\u7684\u72c0\u614b\uff0c\u53f3\u908a\u7684\u70ba\u7bb1A\u7684\u72c0\u614b\uff0c\u628a\u5b83\u5011\u5beb\u5728\u4e00\u8d77\u8868\u793a\u4e86\u7d91\u7d81\u5f0f\u5730\u601d\u8003\u5b83\u5011\u7684\u5171\u540c\u5b58\u5728\u3002 \u5c31\u662f\u8aaa Text Only 1 2 \u7bb1A\u70ba\u68a8\u7684\u540c\u6642\u7bb1B\u4ea6\u70ba\u68a8 \u7bb1A=\u68a8 AND \u7bb1B=\u68a8 \u7c21\u5316\u4e00\u4e0b\u7b26\u865f Text Only 1 2 3 4 5 6 7 8 9 |\u7bb1A> * |\u7bb1B> = |\u7bb1A,\u7bb1B> |\u68a8>|\u68a8> = |\u68a8,\u68a8> \u65bc\u662f = 0.5|\u68a8,\u68a8> + 0.5|\u68a8,\u6a59> + 0.5|\u6a59,\u68a8> + 0.5|\u6a59,\u6a59> |\u7bb1A,\u7bb1B> \u662f\u4e00\u500b\u7368\u7acb\u7684\u72c0\u614b \u56e0\u70ba\u73fe\u5728\u6211\u5011\u5df2\u7d93\u7d91\u7d81\u5f0f\u5730\u601d\u8003\u5b83\u5011\u7684\u5171\u540c\u5b58\u5728\uff0c\u56e0\u6b64|\u7bb1A,\u7bb1B>\u5df2\u7d93\u662f\u4e00\u500b\u81ea\u6210\u4e00\u5bb6\u7684\u6982\u5ff5\u3002 \u62ff |\u7bb1A,\u7bb1B> \u8207\u81ea\u5df1\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 |\u7bb1A,\u7bb1B> = 0.5|\u68a8,\u68a8> + 0.5|\u68a8,\u6a59> + 0.5|\u6a59,\u68a8> + 0.5|\u6a59,\u6a59> <\u7bb1A,\u7bb1B||\u7bb1A,\u7bb1B> = ( 0.5<\u68a8,\u68a8| ) * ( 0.5|\u68a8,\u68a8> ) (+0.5<\u68a8,\u6a59| ) (+0.5|\u68a8,\u6a59> ) (+0.5<\u6a59,\u68a8| ) (+0.5|\u6a59,\u68a8> ) (+0.5<\u6a59,\u6a59| ) (+0.5|\u6a59,\u6a59> ) \u5728\u9019\u88e1\u6211\u5011\u53ef\u4ee5\u8df3\u6b65\u9a5f\uff0c\u56e0\u70ba\u6211\u5011\u77e5\u9053\u9664\u975eX=Y\uff0c\u5426\u5247<X||Y>\u5fc5\u5b9a\u70ba0\u3002\u56e0\u6b64\u53ef\u4ee5\u7701\u7565\u6240\u6709X=/=Y\u7684\u5730\u65b9\u3002 = 0.5*0.5<\u68a8,\u68a8||\u68a8,\u68a8> + 0.5*0.5<\u68a8,\u6a59||\u68a8,\u6a59> + 0.5*0.5<\u6a59,\u68a8||\u6a59,\u68a8> + 0.5*0.5<\u6a59,\u6a59||\u6a59,\u6a59> = 0.25<\u68a8,\u68a8||\u68a8,\u68a8> + 0.25<\u68a8,\u6a59||\u68a8,\u6a59> + 0.25<\u6a59,\u68a8||\u6a59,\u68a8> + 0.25<\u6a59,\u6a59||\u6a59,\u6a59> \u7d50\u679c\u5c31\u662f\u6709\u00bc\u7684\u6a5f\u7387\u6253\u958b\u5169\u500b\u7bb1\u898b\u5230\u662f(\u68a8,\u68a8)\u7684\u72c0\u614b\uff0c\u6291\u6216(\u68a8,\u6a59)\u7684\u72c0\u614b\uff0c\u53c8\u6216\u8005(\u6a59,\u68a8)\u7684\u72c0\u614b\u2026\u2026 \u5c07\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u76f8\u52a0\uff0c0.25+0.25+0.25+0.25 = 1\uff0c\u5c31\u662f100%\u3002\u5373\u662f\u8aaa\u7121\u82b1\u7121\u5047\u73fe\u5728\u770b\u7684|\u7bb1A,\u7bb1B>\u662f\u4e00\u500b\u7368\u7acb\u7684\u72c0\u614b\u3002\u5982\u679c\u6211\u5011\u628a\u7bb1A\u548c\u7bb1B\u5206\u6298\u4f86\u601d\u8003\u7684\u8a71\uff0c\u4ed6\u5011\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u76f8\u52a0\u51fa\u4f86\u6703\u662f200%\uff0c\u800c\u4e0d\u662f100%\u3002 \u6211\u624b\u4e0a\u67091\u500b\u68a81\u500b\u6a59\uff0c\u5206\u5225\u653e\u5728\u7bb1C\u548c\u7bb1D\u3002\u7d91\u7d81\u5f0f\u5730\u601d\u8003\uff0c\u5c31\u662f |\u7bb1C,\u7bb1D> \u3002 \u4f46\u73fe\u5728\u53ea\u67091\u500b\u68a81\u500b\u6a59\uff0c\u4e00\u908a\u662f\u68a8\u7684\u540c\u6642\u53e6\u4e00\u908a\u5fc5\u5b9a\u662f\u6a59\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u56e0\u6b64 Text Only 1 |\u7bb1C,\u7bb1D> = 0.707|\u68a8, \u6a59> + 0.707|\u6a59, \u68a8> \u62ff |\u7bb1C,\u7bb1D> \u8207\u81ea\u5df1\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <\u7bb1C,\u7bb1D||\u7bb1C,\u7bb1D> = ( 0.707<\u68a8,\u6a59| ) * ( 0.707|\u68a8,\u6a59> ) (+0.707<\u6a59,\u68a8| ) (+0.707|\u6a59,\u68a8> ) = 0.707*0.707<\u68a8,\u6a59||\u68a8,\u6a59> + 0.707*0.707<\u68a8,\u6a59||\u6a59,\u68a8> + 0.707*0.707<\u6a59,\u68a8||\u68a8,\u6a59> + 0.707*0.707<\u6a59,\u68a8||\u6a59,\u68a8> \u9664\u975eX=Y\uff0c\u5426\u5247<X||Y>\u5fc5\u5b9a\u70ba0 = 0.707*0.707<\u68a8,\u6a59||\u68a8,\u6a59> + 0.707*0.707<\u6a59,\u68a8||\u6a59,\u68a8> = 0.5<\u68a8,\u6a59||\u68a8,\u6a59> + 0.5<\u6a59,\u68a8||\u6a59,\u68a8> \u6240\u4ee5\u5c31\u662f50%\u6a5f\u7387\u6703\u662f(\u68a8, \u6a59)\uff0c50%\u6a5f\u7387\u6703\u662f(\u6a59, \u68a8)\u3002 \u5982\u679c\u6211\u53ea\u6253\u958b\u7bb1C\u6703\u600e\u6a23 \u9019\u500b\u5c31\u662f\u91cf\u5b50\u7cfe\u7e8f\u4e86\u3002\u4f60\u60f3\u4e00\u60f3\u5982\u679c\u53ea\u6253\u958b\u7bb1C\u770b\u5230\u68a8\u7684\u8a71\uff0c\u4e0d\u7528\u554f\u4e5f\u80fd\u77e5\u9053\u7bb1D\u5fc5\u5b9a\u662f\u6a59\u3002 \u9019\u7a2e\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u6211\u5011\u7528 |\u671f\u671b><\u671f\u671b||\u7bb1> \u4f86\u8655\u7406\uff0c\u9019\u662f\u65b0\u7684\u65b9\u5f0f\uff0c\u4e0d\u904e\u9019\u88e1\u7684\u671f\u671b\u53ea\u5305\u542b\u4e86\u7bb1C\u7684\u90e8\u4efd\u3002 \u4f8b\u5982\u8aaa\u6211\u5011\u671f\u671b\u6253\u958b\u7bb1C\u6703\u898b\u5230\u68a8 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 |\u671f\u671b> = 1|\u68a8,.> \u7528.\u4f86\u8868\u793a\u6f0f\u7a7a\uff0c\u8868\u793a\u6c92\u6709\u6771\u897f\u5728\u90a3\u500b\u4f4d\u7f6e\u76f8\u4e58 \u6240\u4ee5|\u671f\u671b><\u671f\u671b||\u7bb1>\u7684\u5de6\u908a <\u671f\u671b||\u7bb1> = 1<\u68a8,.| * ( 0.707|\u68a8,\u6a59> ) (+0.707|\u6a59,\u68a8> ) = 0.707<\u68a8,.||\u68a8,\u6a59> + 0.707<\u68a8,.||\u6a59,\u68a8> \u53ea\u6709\u76f8\u4e58\u4f4d\u7f6e\u540c\u70ba\u68a8\u7684\u624d\u7372\u4fdd\u7559 = 0.707<\u68a8,.||\u68a8,\u6a59> \u540c\u6642\u56e0\u70ba\u68a8\u88ab\u76f8\u4e58\u4e86\uff0c\u5373<\u68a8||\u68a8> = 1\uff0c\u56e0\u6b64\u53ea\u5269\u4e0b|.,\u6a59> = 0.707|.,\u6a59> \u5982\u662f\u8005 |\u671f\u671b><\u671f\u671b||\u7bb1> = 1|\u68a8,.> * 0.707|.,\u6a59> = 1*0.707|\u68a8,.>|.,\u6a59> = 0.707|\u68a8,\u6a59> \u6b63\u898f\u5316 \u4e0a\u9762\u7684\u7d50\u679c 0.707|\u68a8,\u6a59> \u662f\u4e00\u500b\u65b0\u7684\u72c0\u614b\u3002\u4f46\u9019\u500b\u72c0\u614b\u6709\u9ede\u554f\u984c\uff0c\u5c31\u662f\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u7e3d\u5c11\u65bc100%\u3002 \u56e0\u70ba\u5b83\u662f 0.707|\u68a8,\u6a59> ,\u56e0\u6b64\u53ea\u67090.707^2=50%\u6a5f\u7387\u4f60\u80fd\u5920\u7372\u5f97(\u68a8,\u6a59)\uff0c\u6c92\u6709\u5176\u4ed6\u4e86\u3002\u53e6\u5916\u768450%\u6a5f\u7387\u5462\uff1f\uff1f\uff1f\u6d88\u5931\u4e86\u3002\u901950%\u7372\u5f97(\u68a8,\u6a59)\u7684\u6a5f\u7387\u5c31\u662f\u5168\u90e8\u7684\u6a5f\u7387\u4e86\u3002\u56e0\u6b64\u6211\u5011\u8981\u65bd\u884c \u6b63\u898f\u5316 \uff0c\u628a\u5b83\u8b8a\u6210\u70ba\u5408\u5171100%\u3002 \u65b9\u6cd5\u5f88\u7c21\u55ae\uff0c\u5c31\u662f\u9664\u4ee5\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u7e3d\u548c\u7684\u5e73\u65b9\u6839\u3002 Text Only 1 2 3 0.707|\u68a8,\u6a59> / sqrt(0.707^2) = 0.707|\u68a8,\u6a59> / 0.707 = 1|\u68a8,\u6a59> \u7d50\u679c\u5c31\u662f 1|\u68a8,\u6a59> \u3002100%\u7684\u6a5f\u7387\u4f60\u6703\u7372\u5230(\u68a8,\u6a59)\u7684\u72c0\u614b\u3002 \u518d\u8b1b\u4e00\u6b21 Text Only 1 2 3 4 5 6 7 \u672c\u4f86\u662f |\u7bb1C,\u7bb1D> = 0.707|\u68a8, \u6a59> + 0.707|\u6a59, \u68a8> \u53ea\u89c0\u6e2c\u7bb1C\uff0c\u5f97\u77e5\u70ba\u68a8\u4e4b\u5f8c\uff0c|\u7bb1C,\u7bb1D>\u8b8a\u6210\u70ba\u4e0b\u9762\u7684\u72c0\u614b |\u7bb1C,\u7bb1D> = 1|\u68a8,\u6a59> \u7528\u6587\u5b57\u4f86\u8aaa\u5c31\u662f|\u7bb1C,\u7bb1D>\u53ea\u5269\u4e0b\u4e00\u7a2e\u53ef\u80fd\u6027 \u4e5f\u5c31\u662f\u9ad4\u73fe\u4e86 \u300c\u5982\u679c\u53ea\u6253\u958b\u7bb1C\u770b\u5230\u68a8\u7684\u8a71\uff0c\u4e0d\u7528\u554f\u4e5f\u80fd\u77e5\u9053\u7bb1D\u5fc5\u5b9a\u662f\u6a59\u300d \u9019\u53e5\u8a71\u3002 \u9019\u5c31\u662f\u91cf\u5b50\u7cfe\u7e8f\u3002","title":"[\u79d1\u666e] \u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/#_1","text":"\u300c\u91cf\u5b50\u7cfe\u7e8f\u300d\u5f88\u6df1\u5967\u96e3\u660e\uff1f\u90a3\u53ea\u662f\u56e0\u70ba\u4f60\u6c92\u6709\u770b\u904e\u4ed6\u7684\u6578\u5f0f\u800c\u5df2\u3002 \u8981\u6b63\u78ba\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f\uff0c\u4f60\u5fc5\u9808\u8981\u660e\u767d\u5176\u6578\u5b78\u4e0a\u7684\u542b\u610f\uff0c\u800c\u9019\u6578\u5b78\u5176\u5be6\u4e0d\u96e3\uff0c\u96e3\u7684\u662f\u4f60\u7121\u6cd5\u62cb\u958b\u6587\u79d1\u7684\u5305\u4f0f\u3002","title":"[\u79d1\u666e] \u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/#2-1-1","text":"2 = 1 + 1 \u4e0a\u9762\u7684\u6578\u5f0f\u5fc5\u9808\u8981\u9019\u6a23\u5beb\u30022 = 1 + 1\u3002 2\u662f\u75311+1\u7d44\u6210\u7684\u3002\u5c31\u662f\u5b57\u9762\u4e0a\u7684\u610f\u898b\uff0c 2\u9019\u4e00\u500b\u55ae\u5143 \u662f\u7531\u5169\u500b 1\u7684\u7d44\u4ef6 \u6240\u69cb\u6210\u7684\u3002 \u5982\u679c\u4f60\u9023\u9019\u4e00\u500b\u9053\u7406\u90fd\u7121\u8fa6\u6cd5\u7406\u89e3\u7684\u8a71\u53ef\u4ee5\u6309\u4e0a\u4e00\u9801\uff0c\u56e0\u70ba\u4f60\u6c92\u6709\u8db3\u5920\u7684\u601d\u7dad\u80fd\u529b\u7406\u89e3\u6587\u5b57\u548c\u7406\u89e3\u9019\u500b\u4e16\u754c\uff0c\u4f46\u4f60\u8981\u505a\u7684\u4e0d\u662f\u653e\u68c4\u601d\u8003\uff0c\u800c\u662f\u8a8d\u771f\u601d\u8003\u81ea\u5df1\u70ba\u751a\u9ebc\u7f3a\u4e4f\u601d\u7dad\u80fd\u529b\u3002 \u6c92\u6709\u554f\u984c\u7684\u8a71\u6211\u7e7c\u7e8c\u3002 2 = 1 + 1 \u662f\u5728\u540c\u4e00\u500b\u7dad\u5ea6\u5e95\u4e0b\u57f7\u884c\u7684\u52a0\u6cd5 \u4f8b\u5982\u8aaa 2\u500b\u68a8 = 1\u500b\u68a8 + 1\u500b\u68a8\uff0c\u9019\u662f\u5728\u68a8\u7684\u7dad\u5ea6\u5e95\u4e0b\u57f7\u884c\u7684\u52a0\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7dad\u5ea6\u4e4b\u9593\u540c\u6642\u57f7\u884c\u52a0\u6cd5\uff0c\u4f8b\u5982 1\u500b\u68a81\u500b\u6a59 = 1\u500b\u68a8 + 1\u500b\u6a59\u3002\u4e00\u5207\u90fd\u662f\u5b57\u9762\u4e0a\u7684\u610f\u601d\uff0c\u9019\u88e1\u6c92\u6709\u9b54\u6cd5\u3002\u9019\u88e1 1\u500b\u68a81\u500b\u6a59 \u6210\u70ba\u4e86\u4e00\u500b \u55ae\u5143 \u3002\u56e0\u70ba\u5176\u70ba\u5169\u500b\u4e0d\u540c\u7684\u7dad\u5ea6\uff0c\u6211\u5011\u5fc5\u9808\u5982\u6b64\u8868\u9054\uff1a Text Only 1 2 [1\u500b\u68a8] = [1\u500b\u68a8] + [0\u500b\u6a59] [1\u500b\u6a59] [0\u500b\u68a8] [1\u500b\u6a59] \u8a18\u4f4f\u68a8\u7684\u7dad\u5ea6\u5beb\u5728\u4e0a\u9762\uff0c\u6a59\u7684\u7dad\u5ea6\u5beb\u5728\u4e0b\u9762\uff0c\u7136\u5f8c\u6211\u5011\u53ef\u4ee5\u5beb\u5f97\u66f4\u7c21\u6f54\uff1a Text Only 1 2 (\u68a8) : [1] = [1] + [0] (\u6a59) [1] [0] [1] 1\u500b\u7bb1\u88cf\u9762\u88dd\u4e861\u500b\u68a8\u548c1\u500b\u6a59\uff0c\u9019\u500b\u7bb1\u5c31\u662f\uff1a Text Only 1 2 \u7bb1 = [1] [1] 1\u500b\u7bb1\u88cf\u9762\u6709\u53ef\u80fd\u88dd\u4e861\u500b\u68a8\uff0c\u4e5f\u6709\u53ef\u80fd\u88dd\u4e861\u500b\u6a59\u3002\u5047\u5982\u8aaa\u88dd\u4e86\u68a8\u548c\u88dd\u4e86\u6a59\u7684\u6a5f\u7387\u662f\u4e00\u6a23\u7684\u8a71\uff0c\u5373\u662f50%\u6a5f\u7387\u6253\u958b\u7bb1\u6703\u898b\u5230\u68a8\u300150%\u6a5f\u7387\u6253\u958b\u7bb1\u6703\u898b\u5230\u6a59\uff0c\u9019\u500b\u7bb1\u5c31\u662f\uff1a Text Only 1 2 \u7bb1 = 0.707*[1] + 0.707*[0] [0] [1] \u70ba\u751a\u9ebc\u662f\u00bd\u7684\u5e73\u65b9\u68390.707\u5462\uff1f\u6211\u73fe\u5728\u5c31\u8ddf\u4f60\u8b1b\u3002","title":"2 = 1 + 1"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/#_2","text":"\u9996\u5148\u70ba\u4e86\u65b9\u4fbf\uff0c\u6211\u5011\u5c07\u5982\u662f\u5beb\u51fa\u7bb1\uff1a Text Only 1 2 3 4 5 6 \u68a8 = |\u68a8> \u6a59 = |\u6a59> |\u7bb1> = 0.707|\u68a8> + 0.707|\u6a59> \u6216\u8005 <\u7bb1| = 0.707<\u68a8| + 0.707<\u6a59| \u7bad\u5480\u662f\u7528\u4f86\u8868\u9054\u76f8\u4e58\u7684\u3002\u5beb\u6210\u9019\u6a23\u7684\u6587\u5b57\u53ef\u4ee5\u76f8\u4e58\u3002 Text Only 1 <X||Y> \u6587\u5b57\u76f8\u4e58\u7684\u898f\u5247\u5c31\u662f\u7bad\u5480\u5305\u88f9\u7684\u7bc4\u570d\u5167\u5de6\u53f3\u5b8c\u5168\u76f8\u540c\u7684\u6642\u5019\u7b49\u59821\uff0c\u5426\u5247\u4e00\u5f8b\u6b78\u96f6\u3002\u800c\u6578\u5b57\u90a3\u908a\u5c31\u7167\u5e38\u76f8\u4e58\u3002 Text Only 1 2 3 4 <\u68a8||\u68a8> = 1 <\u6a59||\u6a59> = 1 <\u68a8||\u6a59> = 0 <\u6a59||\u68a8> = 0 \u5beb\u6210|X><Y|\u7684\u6587\u5b57\u66ab\u6642\u4e0d\u9700\u8981\u7406\u6703\uff0c\u53cd\u6b63\u8b1b\u4e86\u4f60\u4e5f\u4e0d\u660e\u767d\u3002 \u540c\u4e00\u4ef6\u6771\u897f\u76f8\u4e58\u7684\u6642\u5019\u53ef\u4ee5\u5f97\u51fa\u6bcf\u7a2e\u53ef\u80fd\u6027\u5404\u81ea\u7684\u6a5f\u7387 \u5982\u662f\u8005 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <\u7bb1||\u7bb1> = ( 0.707<\u68a8| ) * ( 0.707|\u68a8> ) (+0.707<\u6a59| ) (+0.707|\u6a59> ) = 0.707*0.707<\u68a8||\u68a8> + 0.707*0.707<\u68a8||\u6a59> + 0.707*0.707<\u6a59||\u68a8> + 0.707*0.707<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u68a8||\u6a59> + 0.5<\u6a59||\u68a8> + 0.5<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u6a59||\u6a59> \u6700\u5f8c\u9019\u4e00\u53e5\u5c31\u662f\u6a19\u793a\u4e8650%\u6a5f\u7387\u5f97\u5230\u68a8\uff0c\u540c\u664250%\u6a5f\u7387\u5f97\u5230\u6a59\u3002\u00bd\u7684\u5e73\u65b9\u68390.707\u7684\u539f\u56e0\u5c31\u662f\u70ba\u4e86\u78ba\u4fdd\u5728\u9019\u500b\u6642\u5019\u80fd\u5920\u53d6\u5f97\u6b63\u78ba\u7684\u6a5f\u7387\u6578\u503c\u3002 \u91cf\u5b50\u529b\u5b78\u7684\u89c0\u6e2c\u9700\u8981\u5148\u6709\u4e00\u500b\u671f\u671b \u5c31\u662f\u8aaa\uff0c\u4f60\u73fe\u5728\u554f\u300c\u6211\u60f3\u77e5\u9053\u9019\u4e00\u500b\u7bb1\u5165\u9762\u88dd\u7684\u662f\u751a\u9ebc\u300d\u7684\u6642\u5019\u4f60\u4e0d\u80fd\u5920\u6191\u7a7a\u554f\u3002\u4f60\u53ea\u53ef\u4ee5\u554f\u300c \u9019\u4e00\u500b\u7bb1 \u8ddf \u6211\u60f3\u50cf\u4e2d\u7684\u7bb1 \u6709\u591a\u63a5\u8fd1\u300d\uff0c\u5982\u662f\u8005\u4f60\u5fc5\u9808\u63d0\u4f9b\u4e00\u500b\u671f\u671b\u4f86\u505a\u5c0d\u7167\uff0c\u671f\u671b\u5c31\u662f \u4f60\u60f3\u50cf\u4e2d\u7684\u7bb1 \u3002 \u554f\u7684\u6642\u5019\uff0c\u4f60\u628a \u4f60\u60f3\u50cf\u4e2d\u7684\u7bb1 (\u4ee5\u4e0b\u7a31\u70ba\u671f\u671b) \u548c \u9019\u4e00\u500b\u7bb1 (\u4ee5\u4e0b\u7a31\u70ba\u7bb1) \u76f8\u4e58\u3002 \u91cf\u5b50\u529b\u5b78\u7684\u89c0\u6e2c(\u5c0d\u7167)\u65b9\u6cd5\u662f <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> \u7bb1\u5728\u4e2d\u9593\uff0c\u7136\u5f8c\u4f60\u62ff\u671f\u671b\u4f86\u5de6\u53f3\u593e\u4f4f\u5b83\u3002\u7bad\u5480\u7684\u65b9\u5411\u5fc5\u9808\u56b4\u683c\u9075\u5b88\u3002 \u554f\uff1a\u7bb1\u88dd\u7684\u662f\u4e0d\u662f\u68a8 \u5982\u662f\u8005 |\u671f\u671b> = 1|\u68a8> \u5148\u6aa2\u67e5\u671f\u671b\u662f\u4e0d\u662f100%\u80fd\u5920\u7372\u5f97\u68a8 Text Only 1 2 3 4 5 <\u671f\u671b||\u671f\u671b> = 1<\u68a8| * 1|\u68a8> = 1*1 <\u68a8||\u68a8> \u6c92\u6709\u554f\u984c\u3002\u6211\u5011\u73fe\u5728\u53ef\u4ee5\u8655\u7406 <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b>\u4e86\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u5de6\u908a\u7684<\u671f\u671b||\u7bb1> = 1<\u68a8| * ( 0.707|\u68a8> ) (+0.707|\u6a59> ) = 0.707<\u68a8||\u68a8> + 0.707<\u68a8||\u6a59> = 0.707<\u68a8||\u68a8> \u53f3\u908a\u7684<\u7bb1||\u671f\u671b> = ( 0.707<\u68a8| ) * 1|\u68a8> (+0.707<\u6a59| ) = 0.707<\u68a8||\u68a8> + 0.707<\u6a59||\u68a8> = 0.707<\u68a8||\u68a8> \u5982\u662f\u8005<\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> = 0.707<\u68a8||\u68a8> * 0.707<\u68a8||\u68a8> = 0.707 * 0.707 * <\u68a8||\u68a8> <\u68a8||\u68a8> = 0.5 * 1 * 1 = 0.5 \u7d50\u679c\u8868\u793a\u6211\u5011\u6709\u7bb1\u7684\u5167\u5bb9\u7269\u670950%\u6a5f\u7387\u543b\u5408\u6211\u5011\u7684\u671f\u671b\u3002\u63db\u53e5\u8a71\u5c31\u662f\u8aaa\u670950%\u6a5f\u7387\u88cf\u9762\u88dd\u7684\u662f\u68a8\u3002 \u554f\uff1a\u7bb1\u88dd\u7684\u662f\u4e0d\u662f50%\u68a8 50%\u6a59 \u73fe\u5728\u62ff\u4e00\u500b\u8ddf\u7bb1\u5b8c\u5168\u4e00\u6a23\u7684\u6771\u897f\u4f86\u4f5c\u70ba\u671f\u671b\uff0c\u8ddf\u5b83\u5c0d\u7167\u5427\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5de6\u908a\u7684<\u671f\u671b||\u7bb1> = ( 0.707<\u68a8| ) * ( 0.707|\u68a8> ) (+0.707<\u6a59| ) (+0.707|\u6a59> ) = 0.707*0.707<\u68a8||\u68a8> + 0.707*0.707<\u68a8||\u6a59> + 0.707*0.707<\u6a59||\u68a8> + 0.707*0.707<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u68a8||\u6a59> + 0.5<\u6a59||\u68a8> + 0.5<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u6a59||\u6a59> \u518d\u4f86\u53f3\u908a\u7684<\u7bb1||\u671f\u671b>\uff0c\u8001\u5be6\u8aaa\u56e0\u70ba\u7bb1\u548c\u671f\u671b\u662f\u540c\u6a23\u7684\u6771\u897f\uff0c\u6240\u4ee5\u7d50\u679c\u8ddf\u4e0a\u9762\u7684\u4e00\u6a21\u4e00\u6a23\uff0c\u56e0\u6b64\u4e5f\u4e0d\u8cbb\u6642\u5beb\u6b65\u9a5f\u51fa\u4f86\u4e86\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> = ( 0.5<\u68a8||\u68a8> ) * ( 0.5<\u68a8||\u68a8> ) (+0.5<\u6a59||\u6a59> ) (+0.5<\u6a59||\u6a59> ) = 0.5*0.5<\u68a8||\u68a8><\u68a8||\u68a8> + 0.5*0.5<\u68a8||\u68a8><\u6a59||\u6a59> + 0.5*0.5<\u6a59||\u6a59><\u68a8||\u68a8> + 0.5*0.5<\u6a59||\u6a59><\u6a59||\u6a59> = 0.25 + 0.25 + 0.25 + 0.25 = 1 \u51fa\u4f86\u7684\u7d50\u679c\u5c31\u662f1\uff0c\u5373100%\uff0c\u5373\u5b8c\u5168\u4e00\u6a23\u3002","title":"\u91cf\u5b50\u904b\u7b97\u8d85\u5165\u9580"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/#_3","text":"\u4e0a\u7bc0\u6211\u5011\u8655\u7406\u7684\u662f\u4e00\u500b\u7bb1\u3002\u4f46\u5982\u4f55\u6709\u5169\u500b\u7bb1\u7684\u6642\u5019\u6211\u5011\u61c9\u8a72\u8981\u600e\u6a23\u5728\u6578\u5b78\u4e0a\u8655\u7406\u5462\uff1f\u5176\u5be6\u5f88\u7c21\u55ae\uff0c\u4e5f\u4e0d\u904e\u5c31\u662f\u628a\u5169\u500b\u7bb1\u7684\u72c0\u614b\u76f8\u4e58\u800c\u5df2\u3002 \u5047\u8a2d\u5169\u500b\u7bb1\u7684\u8a2d\u5b9a\u662f\u4e00\u6a23\u7684 Text Only 1 2 |\u7bb1A> = 0.707|\u68a8> + 0.707|\u6a59> |\u7bb1B> = 0.707|\u68a8> + 0.707|\u6a59> \u5169\u500b\u7bb1\u7684\u72c0\u614b\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 |\u7bb1A> * |\u7bb1B> = ( 0.707|\u68a8> ) * ( 0.707|\u68a8> ) \uff08+0.707|\u6a59> ) (+0.707|\u6a59> ) = 0.707*0.707|\u68a8>|\u68a8> + 0.707*0.707|\u68a8>|\u6a59> + 0.707*0.707|\u6a59>|\u68a8> + 0.707*0.707|\u6a59>|\u6a59> = 0.5|\u68a8>|\u68a8> + 0.5|\u68a8>|\u6a59> + 0.5|\u6a59>|\u68a8> + 0.5|\u6a59>|\u6a59> \u8a08\u7b97\u5230\u9019\u88e1\u5c31\u662f\u76e1\u982d\uff0c\u4e0d\u80fd\u518d\u7c21\u5316\u4e86\u3002 \u9019\u6a23\u51fa\u73fe\u4e86\u4e00\u500b\u65b0\u7684\u6771\u897f\uff0c\u751a\u9ebc\u662f |\u68a8>|\u68a8> \uff1f \u4e00\u958b\u59cb\u6211\u5011\u662f|\u7bb1A> * |\u7bb1B>\u7684\u3002\u6700\u5f8c\u51fa\u73fe\u4e86 |\u68a8>|\u68a8> \u3002\u9019\u500b\u610f\u601d\u662f\u5de6\u908a\u7684\u70ba\u7bb1A\u7684\u72c0\u614b\uff0c\u53f3\u908a\u7684\u70ba\u7bb1A\u7684\u72c0\u614b\uff0c\u628a\u5b83\u5011\u5beb\u5728\u4e00\u8d77\u8868\u793a\u4e86\u7d91\u7d81\u5f0f\u5730\u601d\u8003\u5b83\u5011\u7684\u5171\u540c\u5b58\u5728\u3002 \u5c31\u662f\u8aaa Text Only 1 2 \u7bb1A\u70ba\u68a8\u7684\u540c\u6642\u7bb1B\u4ea6\u70ba\u68a8 \u7bb1A=\u68a8 AND \u7bb1B=\u68a8 \u7c21\u5316\u4e00\u4e0b\u7b26\u865f Text Only 1 2 3 4 5 6 7 8 9 |\u7bb1A> * |\u7bb1B> = |\u7bb1A,\u7bb1B> |\u68a8>|\u68a8> = |\u68a8,\u68a8> \u65bc\u662f = 0.5|\u68a8,\u68a8> + 0.5|\u68a8,\u6a59> + 0.5|\u6a59,\u68a8> + 0.5|\u6a59,\u6a59> |\u7bb1A,\u7bb1B> \u662f\u4e00\u500b\u7368\u7acb\u7684\u72c0\u614b \u56e0\u70ba\u73fe\u5728\u6211\u5011\u5df2\u7d93\u7d91\u7d81\u5f0f\u5730\u601d\u8003\u5b83\u5011\u7684\u5171\u540c\u5b58\u5728\uff0c\u56e0\u6b64|\u7bb1A,\u7bb1B>\u5df2\u7d93\u662f\u4e00\u500b\u81ea\u6210\u4e00\u5bb6\u7684\u6982\u5ff5\u3002 \u62ff |\u7bb1A,\u7bb1B> \u8207\u81ea\u5df1\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 |\u7bb1A,\u7bb1B> = 0.5|\u68a8,\u68a8> + 0.5|\u68a8,\u6a59> + 0.5|\u6a59,\u68a8> + 0.5|\u6a59,\u6a59> <\u7bb1A,\u7bb1B||\u7bb1A,\u7bb1B> = ( 0.5<\u68a8,\u68a8| ) * ( 0.5|\u68a8,\u68a8> ) (+0.5<\u68a8,\u6a59| ) (+0.5|\u68a8,\u6a59> ) (+0.5<\u6a59,\u68a8| ) (+0.5|\u6a59,\u68a8> ) (+0.5<\u6a59,\u6a59| ) (+0.5|\u6a59,\u6a59> ) \u5728\u9019\u88e1\u6211\u5011\u53ef\u4ee5\u8df3\u6b65\u9a5f\uff0c\u56e0\u70ba\u6211\u5011\u77e5\u9053\u9664\u975eX=Y\uff0c\u5426\u5247<X||Y>\u5fc5\u5b9a\u70ba0\u3002\u56e0\u6b64\u53ef\u4ee5\u7701\u7565\u6240\u6709X=/=Y\u7684\u5730\u65b9\u3002 = 0.5*0.5<\u68a8,\u68a8||\u68a8,\u68a8> + 0.5*0.5<\u68a8,\u6a59||\u68a8,\u6a59> + 0.5*0.5<\u6a59,\u68a8||\u6a59,\u68a8> + 0.5*0.5<\u6a59,\u6a59||\u6a59,\u6a59> = 0.25<\u68a8,\u68a8||\u68a8,\u68a8> + 0.25<\u68a8,\u6a59||\u68a8,\u6a59> + 0.25<\u6a59,\u68a8||\u6a59,\u68a8> + 0.25<\u6a59,\u6a59||\u6a59,\u6a59> \u7d50\u679c\u5c31\u662f\u6709\u00bc\u7684\u6a5f\u7387\u6253\u958b\u5169\u500b\u7bb1\u898b\u5230\u662f(\u68a8,\u68a8)\u7684\u72c0\u614b\uff0c\u6291\u6216(\u68a8,\u6a59)\u7684\u72c0\u614b\uff0c\u53c8\u6216\u8005(\u6a59,\u68a8)\u7684\u72c0\u614b\u2026\u2026 \u5c07\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u76f8\u52a0\uff0c0.25+0.25+0.25+0.25 = 1\uff0c\u5c31\u662f100%\u3002\u5373\u662f\u8aaa\u7121\u82b1\u7121\u5047\u73fe\u5728\u770b\u7684|\u7bb1A,\u7bb1B>\u662f\u4e00\u500b\u7368\u7acb\u7684\u72c0\u614b\u3002\u5982\u679c\u6211\u5011\u628a\u7bb1A\u548c\u7bb1B\u5206\u6298\u4f86\u601d\u8003\u7684\u8a71\uff0c\u4ed6\u5011\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u76f8\u52a0\u51fa\u4f86\u6703\u662f200%\uff0c\u800c\u4e0d\u662f100%\u3002 \u6211\u624b\u4e0a\u67091\u500b\u68a81\u500b\u6a59\uff0c\u5206\u5225\u653e\u5728\u7bb1C\u548c\u7bb1D\u3002\u7d91\u7d81\u5f0f\u5730\u601d\u8003\uff0c\u5c31\u662f |\u7bb1C,\u7bb1D> \u3002 \u4f46\u73fe\u5728\u53ea\u67091\u500b\u68a81\u500b\u6a59\uff0c\u4e00\u908a\u662f\u68a8\u7684\u540c\u6642\u53e6\u4e00\u908a\u5fc5\u5b9a\u662f\u6a59\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u56e0\u6b64 Text Only 1 |\u7bb1C,\u7bb1D> = 0.707|\u68a8, \u6a59> + 0.707|\u6a59, \u68a8> \u62ff |\u7bb1C,\u7bb1D> \u8207\u81ea\u5df1\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <\u7bb1C,\u7bb1D||\u7bb1C,\u7bb1D> = ( 0.707<\u68a8,\u6a59| ) * ( 0.707|\u68a8,\u6a59> ) (+0.707<\u6a59,\u68a8| ) (+0.707|\u6a59,\u68a8> ) = 0.707*0.707<\u68a8,\u6a59||\u68a8,\u6a59> + 0.707*0.707<\u68a8,\u6a59||\u6a59,\u68a8> + 0.707*0.707<\u6a59,\u68a8||\u68a8,\u6a59> + 0.707*0.707<\u6a59,\u68a8||\u6a59,\u68a8> \u9664\u975eX=Y\uff0c\u5426\u5247<X||Y>\u5fc5\u5b9a\u70ba0 = 0.707*0.707<\u68a8,\u6a59||\u68a8,\u6a59> + 0.707*0.707<\u6a59,\u68a8||\u6a59,\u68a8> = 0.5<\u68a8,\u6a59||\u68a8,\u6a59> + 0.5<\u6a59,\u68a8||\u6a59,\u68a8> \u6240\u4ee5\u5c31\u662f50%\u6a5f\u7387\u6703\u662f(\u68a8, \u6a59)\uff0c50%\u6a5f\u7387\u6703\u662f(\u6a59, \u68a8)\u3002 \u5982\u679c\u6211\u53ea\u6253\u958b\u7bb1C\u6703\u600e\u6a23 \u9019\u500b\u5c31\u662f\u91cf\u5b50\u7cfe\u7e8f\u4e86\u3002\u4f60\u60f3\u4e00\u60f3\u5982\u679c\u53ea\u6253\u958b\u7bb1C\u770b\u5230\u68a8\u7684\u8a71\uff0c\u4e0d\u7528\u554f\u4e5f\u80fd\u77e5\u9053\u7bb1D\u5fc5\u5b9a\u662f\u6a59\u3002 \u9019\u7a2e\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u6211\u5011\u7528 |\u671f\u671b><\u671f\u671b||\u7bb1> \u4f86\u8655\u7406\uff0c\u9019\u662f\u65b0\u7684\u65b9\u5f0f\uff0c\u4e0d\u904e\u9019\u88e1\u7684\u671f\u671b\u53ea\u5305\u542b\u4e86\u7bb1C\u7684\u90e8\u4efd\u3002 \u4f8b\u5982\u8aaa\u6211\u5011\u671f\u671b\u6253\u958b\u7bb1C\u6703\u898b\u5230\u68a8 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 |\u671f\u671b> = 1|\u68a8,.> \u7528.\u4f86\u8868\u793a\u6f0f\u7a7a\uff0c\u8868\u793a\u6c92\u6709\u6771\u897f\u5728\u90a3\u500b\u4f4d\u7f6e\u76f8\u4e58 \u6240\u4ee5|\u671f\u671b><\u671f\u671b||\u7bb1>\u7684\u5de6\u908a <\u671f\u671b||\u7bb1> = 1<\u68a8,.| * ( 0.707|\u68a8,\u6a59> ) (+0.707|\u6a59,\u68a8> ) = 0.707<\u68a8,.||\u68a8,\u6a59> + 0.707<\u68a8,.||\u6a59,\u68a8> \u53ea\u6709\u76f8\u4e58\u4f4d\u7f6e\u540c\u70ba\u68a8\u7684\u624d\u7372\u4fdd\u7559 = 0.707<\u68a8,.||\u68a8,\u6a59> \u540c\u6642\u56e0\u70ba\u68a8\u88ab\u76f8\u4e58\u4e86\uff0c\u5373<\u68a8||\u68a8> = 1\uff0c\u56e0\u6b64\u53ea\u5269\u4e0b|.,\u6a59> = 0.707|.,\u6a59> \u5982\u662f\u8005 |\u671f\u671b><\u671f\u671b||\u7bb1> = 1|\u68a8,.> * 0.707|.,\u6a59> = 1*0.707|\u68a8,.>|.,\u6a59> = 0.707|\u68a8,\u6a59> \u6b63\u898f\u5316 \u4e0a\u9762\u7684\u7d50\u679c 0.707|\u68a8,\u6a59> \u662f\u4e00\u500b\u65b0\u7684\u72c0\u614b\u3002\u4f46\u9019\u500b\u72c0\u614b\u6709\u9ede\u554f\u984c\uff0c\u5c31\u662f\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u7e3d\u5c11\u65bc100%\u3002 \u56e0\u70ba\u5b83\u662f 0.707|\u68a8,\u6a59> ,\u56e0\u6b64\u53ea\u67090.707^2=50%\u6a5f\u7387\u4f60\u80fd\u5920\u7372\u5f97(\u68a8,\u6a59)\uff0c\u6c92\u6709\u5176\u4ed6\u4e86\u3002\u53e6\u5916\u768450%\u6a5f\u7387\u5462\uff1f\uff1f\uff1f\u6d88\u5931\u4e86\u3002\u901950%\u7372\u5f97(\u68a8,\u6a59)\u7684\u6a5f\u7387\u5c31\u662f\u5168\u90e8\u7684\u6a5f\u7387\u4e86\u3002\u56e0\u6b64\u6211\u5011\u8981\u65bd\u884c \u6b63\u898f\u5316 \uff0c\u628a\u5b83\u8b8a\u6210\u70ba\u5408\u5171100%\u3002 \u65b9\u6cd5\u5f88\u7c21\u55ae\uff0c\u5c31\u662f\u9664\u4ee5\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u7e3d\u548c\u7684\u5e73\u65b9\u6839\u3002 Text Only 1 2 3 0.707|\u68a8,\u6a59> / sqrt(0.707^2) = 0.707|\u68a8,\u6a59> / 0.707 = 1|\u68a8,\u6a59> \u7d50\u679c\u5c31\u662f 1|\u68a8,\u6a59> \u3002100%\u7684\u6a5f\u7387\u4f60\u6703\u7372\u5230(\u68a8,\u6a59)\u7684\u72c0\u614b\u3002 \u518d\u8b1b\u4e00\u6b21 Text Only 1 2 3 4 5 6 7 \u672c\u4f86\u662f |\u7bb1C,\u7bb1D> = 0.707|\u68a8, \u6a59> + 0.707|\u6a59, \u68a8> \u53ea\u89c0\u6e2c\u7bb1C\uff0c\u5f97\u77e5\u70ba\u68a8\u4e4b\u5f8c\uff0c|\u7bb1C,\u7bb1D>\u8b8a\u6210\u70ba\u4e0b\u9762\u7684\u72c0\u614b |\u7bb1C,\u7bb1D> = 1|\u68a8,\u6a59> \u7528\u6587\u5b57\u4f86\u8aaa\u5c31\u662f|\u7bb1C,\u7bb1D>\u53ea\u5269\u4e0b\u4e00\u7a2e\u53ef\u80fd\u6027 \u4e5f\u5c31\u662f\u9ad4\u73fe\u4e86 \u300c\u5982\u679c\u53ea\u6253\u958b\u7bb1C\u770b\u5230\u68a8\u7684\u8a71\uff0c\u4e0d\u7528\u554f\u4e5f\u80fd\u77e5\u9053\u7bb1D\u5fc5\u5b9a\u662f\u6a59\u300d \u9019\u53e5\u8a71\u3002 \u9019\u5c31\u662f\u91cf\u5b50\u7cfe\u7e8f\u3002","title":"\u4f86\u91cf\u5b50\u7cfe\u7e8f\u5427"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/","text":"\u79d1\u5b78\u65b9\u6cd5 \u00b6 \u672c\u6587\u7ae0\u4ee5\u975e\u4e3b\u6d41\u7684\u6578\u5b78\u516c\u7406\u7cfb\u7d71\u5b9a\u7fa9\u4e86\u79d1\u5b78\u65b9\u6cd5\uff0c\u540c\u6642\u63a2\u8a0e\u4e86\u4e00\u4e9b\u79d1\u5b78\u65b9\u6cd5\u7684\u904b\u7528\u60c5\u6cc1\u3002\u5047\u8a2d\u4e00\u500b\u8b8a\u6578\u5728\u6642\u9593\u3001\u7a7a\u9593\u3001\u5176\u4ed6\u689d\u4ef6\u7684\u6539\u8b8a\u4e4b\u4e0b\u4e5f\u96a8\u8457\u6539\u8b8a\uff0c\u79d1\u5b78\u63a2\u8a0e\u7684\u662f\u5176\u4e2d\u7684\u904e\u7a0b\u548c\u539f\u7406\u3002\u4f8b\u5982\u6642\u9593\u3001\u7a7a\u9593\u4f4d\u7f6e\u7684\u6539\u8b8a\u600e\u6a23\u5f71\u97ff\u5230\u8a72\u8b8a\u6578\u3002\u7576\u6709\u5f88\u591a\u74b0\u5883\u689d\u4ef6\u7684\u6642\u5019\uff0c\u6211\u5011\u9700\u8981\u501f\u52a9\u7dda\u6027\u4ee3\u6578\u4f86\u5206\u6790\uff0c\u5426\u5247\u53ea\u662f\u80e1\u9b27\u3002 \u7de3\u8d77 \u00b6 \u6211\u767c\u73feGoogle\u5f88\u96e3\u627e\u5230\u300c\u79d1\u5b78\u65b9\u6cd5(scientific method)\u300d\u7684\u89e3\u8aaa\u3002\u53cd\u6620\u4e86\u4e2d\u6587\u4f7f\u7528\u8005\u666e\u904d\u7684\u79d1\u5b78\u6559\u80b2\u7a0b\u5ea6\u6975\u4f4e\uff0c\u5c31\u7b97\u6709\u4eba\u60f3\u5b78\u3001\u60f3\u8b58\uff0c\u4e5f\u5f88\u96e3\u627e\u5230\u5408\u9069\u53ef\u4fe1\u7684\u8cc7\u6599\uff0c\u56e0\u6b64\u6211\u8a8d\u70ba\u6709\u5fc5\u8981\u5beb\u4e00\u7bc7\u6587\u4f86\u89e3\u91cb\u79d1\u5b78\u65b9\u6cd5\u3002 \u8b8a\u6578 \u00b6 \u5047\u8a2d\u4e00\u500bA\u73fe\u8c61\u662f\u4e00\u500b\u8b8a\u6578\uff0c\u6703\u56e0\u70ba\u67d0\u4e9b\u74b0\u5883\u56e0\u7d20\u800c\u5448\u73fe\u65b0\u7684\u5f62\u8c61\u3002 A\u73fe\u8c61\u6240\u767c\u751f\u5728\u7684\u7a7a\u9593\u6709\u5f88\u591a\u74b0\u5883\u56e0\u7d20\uff0c\u4f8b\u5982\u5176\u81ea\u8eab\u7684\u4f4d\u7f6e\u3001\u5176\u4ed6\u73fe\u8c61\u7684\u4f4d\u7f6e\u3001\u73fe\u8c61\u767c\u751f\u7684\u6642\u9593\uff0c\u6211\u5011\u731c\u6e2c\u9019\u4e9b\u74b0\u5883\u56e0\u7d20\u7684\u6539\u8b8a\u6703\u4ee4A\u73fe\u8c61\u8b8a\u6a23\u3002 Text Only 1 2 3 4 5 6 7 8 - \u70ba\u751a\u9ebc\u8981\u9019\u6a23\u5047\u8a2d\uff1f - \u56e0\u70ba\u8981\u5148\u5b9a\u7fa9\u4e00\u500b\u79d1\u5b78\u7684\u7814\u7a76\u5c0d\u8c61 - \u70ba\u751a\u9ebc\u4e00\u5b9a\u8981\u662f\u8b8a\u6578\uff1f - \u5148\u5047\u8a2d\u662f\u4e00\u500b\u8b8a\u6578\u3002\u5982\u679c\u5f8c\u4f86\u767c\u73fe\u4e86\u7121\u8ad6\u74b0\u5883\u56e0\u7d20\u600e\u6a23\u6539\u8b8a\u3001A\u73fe\u8c61\u4e5f\u662f\u6046\u5b9a\u7684\u8a71\uff0c\u9019\u4e5f\u662f\u4e00\u500b\u65b0\u767c\u73fe\u3002 - \u751a\u9ebc\u662f\u74b0\u5883\u56e0\u7d20\uff1f - \u8a72\u73fe\u8c61\u672c\u9ad4\u4ee5\u5916\u7684\u6240\u6709\u6771\u897f\u3002\u908f\u8f2f\u5730\u8aaa\u5c31\u662fsubset[ not(\u8a72\u73fe\u8c61) ]\u3002 \u76f8\u4e92\u4f5c\u7528 \u00b6 \u6211\u5011\u95dc\u5fc3\u7684\u6709\u4e09\u4ef6\u4e8b\uff1a Text Only 1 2 3 1. \u5982\u679cA\u73fe\u8c61\u5728\u7269\u7406\u7a7a\u9593\u5167\u7684\u4f4d\u7f6e\u6539\u8b8a\u4e86\uff0c\u5b83\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 2. \u5982\u679cA\u73fe\u8c61\u767c\u751f\u7684\u6642\u9593\u6539\u8b8a\u4e86\uff0c\u5b83\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 3. \u5982\u679c\u5468\u570d\u7684\u5176\u4ed6\u73fe\u8c61\u6539\u8b8a\u4e86\uff0cA\u73fe\u8c61\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f \u6211\u5011\u95dc\u5fc3\u7684\u662f\u300c\u76f8\u4e92\u4f5c\u7528\u300d\u3002 Text Only 1 2 3 A\u73fe\u8c61 <==> \u7269\u7406\u7a7a\u9593 A\u73fe\u8c61 <==> \u6642\u9593 A\u73fe\u8c61 <==> \u5176\u4ed6\u73fe\u8c61 \u7576\u6211\u5011\u5c07\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u4e5f\u770b\u5f85\u6210\u70ba\u4e00\u7a2e\u73fe\u8c61\u7684\u8a71\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u9019\u6a23\u554f\uff1a Text Only 1 2 1. \u5982\u679cA\u73fe\u8c61\u6539\u8b8a\u4e86\uff0c\u7269\u7406\u7a7a\u9593\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 2. \u5982\u679cA\u73fe\u8c61\u6539\u8b8a\u4e86\uff0c\u6642\u9593\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f \u56e0\u6b64\uff0c\u76f8\u4e92\u4f5c\u7528\u5c31\u8b8a\u6210\u7c21\u55ae\u4e00\u500b\uff1a Text Only 1 A\u73fe\u8c61 <==> \u5176\u4ed6\u73fe\u8c61 \u96c6\u5408 \u00b6 \u5982\u679cA\u73fe\u8c61\u548cB\u73fe\u8c61\u7684\u6027\u8cea\u4e00\u6a23\u7684\u8a71\uff0c\u6211\u5011\u53ef\u4ee5\u628a\u5b83\u5011\u7d44\u5408\u6210\u4e00\u500b\u985e\u578b\u3002 Text Only 1 2 A\u985e\u578b =: {A\u73fe\u8c61, B\u73fe\u8c61} C\u985e\u578b =: {C\u73fe\u8c61, D\u73fe\u8c61} A\u985e\u578b\u7684\u88cf\u9762\u5305\u542b\u4e86A\u73fe\u8c61\u548cB\u73fe\u8c61\u3002\u5982\u662f\u8005\u6211\u5011\u770b\u7684\u76f8\u4e92\u4f5c\u7528\u6703\u8b8a\u6210\u9019\u6a23\uff1a Text Only 1 A\u985e\u578b <==> \u5176\u4ed6\u985e\u578b A\u73fe\u8c61\u548cC\u73fe\u8c61\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u540c\u6642\u4e5f\u767c\u751f\u5728B\u73fe\u8c61\u548cD\u73fe\u8c61\u4e4b\u9593\u3002\u6211\u5011\u5c0dA\u73fe\u8c61\u548cC\u73fe\u8c61\u4e4b\u9593\u76f8\u4e92\u4f5c\u7528\u7684\u7406\u89e3\uff0c\u4e5f\u53ef\u4ee5\u9069\u7528\u65bc\u76f8\u540c\u985e\u578b\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\u3002 \u5be6\u9a57\u8207\u89c0\u5bdf \u00b6 \u6211\u5011\u60f3\u7372\u77e5\u73fe\u8c61\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\u662f\u5982\u4f55\u767c\u751f\u7684\uff0c\u4ee5\u53ca\u5176\u539f\u7406\u3002\u70ba\u6b64\uff0c\u6211\u5011\u9700\u8981\u4ecb\u5165\u5176\u4e2d\uff0c\u523b\u610f\u53bb\u4ee4\u7814\u7a76\u5c0d\u8c61\u7684\u73fe\u8c61\u4e4b\u9593\u767c\u751f\u76f8\u4e92\u4f5c\u7528\uff0c\u9019\u884c\u70ba\u5c31\u53eb\u505a\u5be6\u9a57\u3002 \u4f8b\u5982\uff0c\u6211\u5011\u60f3\u77e5\u9053A\u73fe\u8c61\u548c\u6642\u9593\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u5011\u53ef\u4ee5\u7dad\u6301\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u90fd\u662f\u6046\u5b9a\u7684\u72c0\u614b\u4e4b\u4e0b\uff0c**\u5728\u4e0d\u540c\u7684\u6642\u9593\u91cd\u8986**\u4ee4A\u73fe\u8c61\u767c\u751f\uff0c\u7136\u5f8c\u89c0\u5bdfA\u73fe\u8c61\u6709\u5426\u6539\u8b8a\u3002 \u53c8\u4f8b\u5982\uff0c\u6211\u5011\u60f3\u77e5\u9053A\u73fe\u8c61\u548c\u7269\u7406\u7a7a\u9593\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u5011\u53ef\u4ee5\u7dad\u6301\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u90fd\u662f\u6046\u5b9a\u7684\u72c0\u614b\u4e4b\u4e0b\uff0c**\u5728\u4e0d\u540c\u7684\u4f4d\u7f6e\u540c\u6642**\u4ee4A\u73fe\u8c61\u767c\u751f\uff0c\u7136\u5f8c\u89c0\u5bdfA\u73fe\u8c61\u6709\u5426\u6539\u8b8a\u3002 \u5982\u679c\u7121\u6cd5\u975c\u6b62\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u7684\u8a71\uff0c\u5be6\u9a57\u4e5f\u53ef\u4ee5\u9032\u884c\uff0c\u53ea\u662f\u5728\u5206\u6790\u7d50\u679c\u7684\u6642\u5019\u6bd4\u8f03\u5403\u529b\u800c\u5df2\u3002\u6211\u5011\u9700\u8981\u4f7f\u7528\u591a\u8b8a\u6578\u7684\u5206\u6790\u5de5\u5177\uff0c\u5c24\u5176\u9700\u8981\u7dda\u6027\u4ee3\u6578\u7684\u77e5\u8b58(\u800c\u4e0d\u662f\u4eba\u6587\u5b78\u79d1\u7684\u77e5\u8b58)\u3002 \u89c0\u5bdf\u4e5f\u662f\u4e00\u500b\u73fe\u8c61 \u00b6 \u89c0\u5bdf\u9019\u500b\u884c\u70ba\u4e5f\u662f\u4e00\u500b\u73fe\u8c61\u3002\u5982\u679c\u89c0\u5bdf\u884c\u70ba\u672c\u8eab\u5c31\u80fd\u5920\u6539\u8b8a\u4e86A\u73fe\u8c61\u7684\u6027\u8cea\uff0c\u6211\u5011\u5c31\u8981\u601d\u8003\u5982\u4f55\u6e1b\u8f15\u89c0\u5bdf\u6240\u5e36\u4f86\u7684\u6548\u679c\u3002 \u800c\u5be6\u9a57\u884c\u70ba\u672c\u8eab\u5e36\u4f86\u7684\u76f8\u4e92\u4f5c\u7528\u5c31\u662f\u6211\u5011\u671f\u671b\u7684\u6771\u897f\uff0c\u4e0d\u904e\u8981\u78ba\u8a8d\u7684\u662f\u5be6\u969b\u65bd\u884c\u7684\u6642\u5019\u662f\u4e0d\u662f\u8ddf\u539f\u5148\u8a08\u5283\u7684\u4e00\u6a23\u3002 \u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u73fe\u8c61 \u00b6 \u5982\u679cZ\u73fe\u8c61\u8207\u5176\u4ed6\u73fe\u8c61\u4e4b\u9593\u5b8c\u5168\u6c92\u6709\u4efb\u4f55\u76f8\u4e92\u4f5c\u7528\u7684\u8a71\uff0cZ\u73fe\u8c61\u53ef\u88ab\u770b\u5f85\u70ba\u4e0d\u5b58\u5728\uff0c\u4e8b\u5be6\u4e0a\u4ea6\u7b49\u540c\u65bc\u4e0d\u5b58\u5728\u3002\u539f\u56e0\u5982\u4e0b\uff1a Text Only 1 2 3 4 5 1. \u5b83\u4e0d\u80fd\u5920\u5f71\u97ff\u4efb\u4f55\u6771\u897f\u3002 - \u6709\u6c92\u6709Z\u73fe\u8c61\u4e5f\u6c92\u6709\u6240\u8b02\u3002\u53cd\u6b63\u90fd\u662f\u4e00\u6a23\u3002 2. \u4f60\u7121\u6cd5\u5f97\u77e5Z\u73fe\u8c61\u5b58\u5728\u3002 - Z\u73fe\u8c61\u7121\u6cd5\u5e72\u64fe\u5176\u4ed6\u73fe\u8c61\uff0c\u56e0\u6b64\u6211\u5011\u6c92\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u5f97\u77e5Z\u73fe\u8c61\u7684\u5b58\u5728\u3002\u55aa\u5931\u4e86\u300c\u5f97\u77e5\u300d\u7684\u9019\u4e00\u500b\u6e20\u9053\u3002 \u904b\u7528\u79d1\u5b78\u65b9\u6cd5 \u00b6 \u8b8a\u6578\u3001\u73fe\u8c61\u3001\u8207\u5176\u76f8\u4e92\u4f5c\u7528 \u00b6 \u5728\u5730\u7403\u8868\u9762\u4e0a\uff0c\u7269\u4ef6\u6703\u5411\u4e0b\u8dcc\u843d\u3002\u6211\u5011\u60f3\u77e5\u9053\u662f\u4e0d\u662f\u6240\u6709\u7684\u5730\u65b9\u90fd\u6703\u540c\u6a23\u5730\u767c\u751f\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u3002\u56e0\u6b64\u6211\u5011\u505a\u5be6\u9a57\uff0c\u5728\u4e0d\u540c\u7684\u5730\u65b9\u62ff\u8d77\u7269\u4ef6\u7136\u5f8c\u653e\u624b\uff0c\u7269\u4ef6\u90fd\u4e00\u6a23\u6703\u8dcc\u843d\u3002\u540c\u6642\u62ff\u8d77\u5169\u500b\u7269\u4ef6\uff0c\u540c\u6642\u653e\u624b\uff0c\u4e00\u9f4a\u8dcc\u843d\u3002\u6211\u5011\u5f97\u77e5\u56e0\u6b64\u300c\u8dcc\u843d\u300d\u7684\u9019\u500b\u73fe\u8c61\u662f\u4e0d\u53d7\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u6539\u8b8a\u7684\u5f71\u97ff\u3002 \u4f46\u662f\u6211\u5011\u8981\u4ed4\u7d30\u8003\u616e\u6240\u6709\u5be6\u9a57\u7d30\u7bc0\u548c\u74b0\u5883\u56e0\u7d20\u548c\u7d50\u679c\u7684\u7d30\u7bc0\u3002\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u767c\u751f\u7684\u300c\u8dcc\u843d\u300d\u73fe\u8c61\u90fd\u662f\u5b8c\u5168\u76f8\u540c\uff1f\u4f8b\u5982\u6211\u5011\u5fc5\u9808\u8981\u554f\uff0c\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u7684\u8dcc\u843d\u7684**\u901f\u5ea6**\u3001**\u52a0\u901f\u7387**\u90fd\u662f\u4e00\u6a23\uff1f \u540c\u6642\u6211\u5011\u53c8\u8981\u554f\uff0c\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u6703\u4e0d\u6703\u5f71\u97ff\u5230\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u672c\u8eab\uff1f\u800c\u7269\u4ef6\u672c\u8eab\u7684\u6027\u8cea\u53c8\u6703\u4e0d\u6703\u5f71\u97ff\u5230\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u7684\u904e\u7a0b\u548c\u7d50\u679c\u3002 \u79d1\u5b78\u80fd\u5920\u4f60\u8aaa\u4e86\u7b97\u55ce\uff1f \u00b6 \u4e4b\u6240\u4ee5\u5404\u570b\u5718\u968a\u6703\u91cd\u8986\u505a\u540c\u4e00\u500b\u5be6\u9a57\uff0c\u662f\u56e0\u70ba\u8981\u78ba\u5b9a\u4e0d\u662f\u5be6\u9a57\u7d50\u679c\u4e0d\u662f\u56e0\u4eba\u800c\u7570\u3001\u56e0\u6642\u800c\u7570\u3001\u56e0\u5730\u800c\u7570\u3002\u5982\u679c\u8aaa\u4e00\u500b\u5e79\u7d30\u80de\u5be6\u9a57\uff0c\u7121\u8ad6\u5982\u4f55\u90fd\u7121\u8fa6\u6cd5\u91cd\u73fe\u7576\u521d\u7684\u7d50\u679c\uff0c\u6392\u9664\u5be6\u9a57\u8a2d\u8a08\u548c\u904e\u7a0b\u7684\u554f\u984c\u4e4b\u5f8c\uff0c\u9918\u4e0b\u4f86\u5c31\u662f\u9020\u5047\u7684\u53ef\u80fd\u6027\u4e86\u3002 \u5982\u679c\u4ed6\u8aaa\u90a3\u500b\u539f\u7406\u662f\u56e0\u5730\u800c\u7570\u7684\u8a71\uff0c\u7136\u800c\u4ed6\u81ea\u5df1\u4e5f\u4e0d\u80fd\u5920\u5728\u540c\u4e00\u500b\u5be6\u9a57\u5ba4\u91cd\u8986\u540c\u4e00\u500b\u5be6\u9a57\u7d50\u679c\uff0c\u554f\u984c\u5c31\u66f4\u5927\u4e86\u3002 \u5982\u679c\u4ed6\u8aaa\u90a3\u500b\u539f\u7406\u662f\u56e0\u6642\u800c\u7570\u7684\u8a71\uff0c\u90a3\u9ebc\u6211\u5011\u4e5f\u6c92\u6709\u8fa6\u6cd5\u5f97\u77e5\u662f\u751a\u9ebc\u6642\u5019\u624d\u80fd\u5920\u4ee4\u7d50\u679c\u518d\u73fe\uff0c\u5f88\u5927\u6a5f\u6703\u6839\u672c\u90a3\u500b\u53ea\u662f\u4e00\u6b21\u6027\u7684\u73fe\u8c61\uff0c\u53ea\u767c\u751f\u5728\u539f\u59cb\u5be6\u9a57\u7576\u6642\u7684\u90a3\u4e00\u523b\u3002\u5982\u679c\u5982\u662f\u7684\u8a71\uff0c\u90a3\u9ebc\u9019\u4e5f\u5c31\u662f\u300c\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u73fe\u8c61\u300d\u3002\u56e0\u70ba\u518d\u4e5f\u4e0d\u53ef\u80fd\u767c\u751f\u7b2c\u4e8c\u6b21\u7684\uff0c\u8207\u300c\u6c92\u6709\u9019\u7a2e\u6771\u897f\u300d\u662f\u4e00\u6a23\u7684\u3002 \u795e\u9b3c\u8ad6\u8b49 \u00b6 \u6587\u79d1\u4ed4\u5e38\u898b\u7684\u300c\u8b49\u660e\u4e86\u4e16\u754c\u4e0a\u6709\u9b3c\u300d\u7684\u8faf\u8b49\u6cd5\u662f\u9019\u6a23\u7684\u3002 \u6211\u6709\u9670\u967d\u773c\uff0c\u7d93\u5e38\u898b\u5230\u9b3c\uff0c\u4f60\u770b\u4e0d\u898b\u4f46\u6211\u770b\u5f97\u898b\u3002\u79d1\u5b78\u5100\u5668\u4e0d\u80fd\u63a2\u6e2c\u5230\u9b3c\u7684\u5b58\u5728\uff0c\u4f46\u6211\u5c31\u662f\u53ef\u4ee5\u3002 \u5982\u679c\u4e00\u500b\u73fe\u8c61\u6709\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u548c\u5be6\u9a57\u7d30\u7bc0\u90fd\u662f\u6046\u5b9a\u7684\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u53ea\u6709\u5728\u6587\u79d1\u4ed4\u7684\u60c5\u6cc1\u6709\u6240\u6539\u8b8a\uff0c\u90a3\u9ebc\u6211\u5011\u8981\u601d\u8003\u7684\u662f\u554f\u984c\u662f\u5426\u5c31\u51fa\u65bc\u6587\u79d1\u4ed4\u7684\u8eab\u4e0a\uff1f \u6587\u79d1\u4ed4\u662f\u4eba\uff0c\u6211\u4e5f\u662f\u4eba\uff0c\u5927\u5bb6\u4e5f\u662f\u4eba\uff1a Text Only 1 \u4eba =: {\u6211\uff0c\u4f60\uff0c\u4ed6} \u5047\u8a2d\u4eba\u9b3c\u4e4b\u9593\u6709\u76f8\u4e92\u4f5c\u7528\uff0c\u5982\u679c\u5927\u5bb6\u90fd\u662f\u4eba\u7684\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u537b\u53ea\u6709\u6587\u79d1\u4ed4\u53ef\u4ee5\u898b\u5230\u9b3c\uff0c\u662f\u4e0d\u662f\u6587\u79d1\u4ed4\u51fa\u4e86\u554f\u984c\uff1f \u6211\u5011\u5f97\u77e5\u79d1\u5b78\u5100\u5668\u7684\u5728\u4e00\u5207\u7269\u7406\u74b0\u5883\u7684\u611f\u77e5\u80fd\u529b\u90fd\u6bd4\u4eba\u985e\u5f37\uff0c\u4f8b\u5982\u52a0\u901f\u5ea6\u3001\u8072\u6ce2\u3001\u5149\u6ce2\u3001\u96fb\u78c1\u6ce2\u3001\u91cd\u529b\u6ce2\uff0c\u5982\u679c\u9b3c\u7684\u5b58\u5728\u9019\u4e00\u5207\u7684\u7269\u7406\u6027\u8cea\u4e0a\u90fd\u4e0d\u80fd\u5920\u5f97\u4ee5\u53cd\u6620\u7684\u8a71\uff0c\u5c31\u662f\u8aaa\u53ef\u80fd\u6027\u53ea\u6709\u4e00\u500b\uff1a\u662f\u6587\u79d1\u4ed4\u51fa\u4e86\u554f\u984c\u3002 \u5982\u679c\u9b3c\u8207\u5176\u4ed6\u4e00\u5207\u4e8b\u60c5\u7686\u7121\u76f8\u4e92\u4f5c\u7528\uff0c\u53ea\u6709\u8ddf\u6587\u79d1\u4ed4\u7684\u8a8d\u77e5\u4e4b\u9593\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u8a71\uff0c\u7b54\u6848\u4e4b\u6709\u5169\u500b\uff1a Text Only 1 2 1. \u9019\u500b\u6587\u79d1\u4ed4\u662f\u88ab\u9078\u4e2d\u7684\uff0c\u503c\u5f97\u89e3\u5256\u7814\u7a76\u6709\u751a\u9ebc\u7279\u5225\u7684\u69cb\u9020 2. \u9019\u500b\u6587\u79d1\u4ed4\u60a3\u4e0a\u4e86\u601d\u89ba\u5931\u8abf \u793e\u6703\u79d1\u5b78\u662f\u79d1\u5b78\u55ce\uff1f \u00b6 \u4e0d\u662f\u3002\u56e0\u70ba\u793e\u6703\u79d1\u5b78\u6c92\u6709\u52aa\u529b\u53bb\u78ba\u4fdd\u5be6\u9a57\u74b0\u5883\u7684\u4e00\u81f4\uff0c\u5373\u4f7f\u4e0d\u4e00\u81f4\uff0c\u4e5f\u4ed6\u5011\u4e5f\u6c92\u6709\u904b\u7528\u591a\u8b8a\u6578\u5206\u6790\u624b\u6cd5\u548c\u5de5\u5177\u4f86\u5206\u96e2\u5404\u74b0\u5883\u56e0\u7d20\u548c\u7d50\u679c\u4e4b\u9593\u7684\u95dc\u4fc2\u3002\u6700\u57fa\u672c\uff0c\u7dda\u6027\u4ee3\u6578\u662f\u5fc5\u4fee\u7684\u3002 \u54f2\u5b78\u5728\u81ea\u7136\u79d1\u5b78\u4e0a\u7684\u5730\u4f4d\u6bd4\u7269\u7406\u3001\u5316\u5b78\u3001\u751f\u7269\u5b78\u7b49\u9ad8\u55ce\uff1f \u00b6 \u6587\u79d1\u4ed4\u7684\u8001\u751f\u5e38\u8ac7\u662f\u54f2\u5b78\u8d85\u7136\u65bc\u79d1\u5b78\u751a\u9ebc\u7684\uff0c\u7269\u7406\u5b78\u53ca\u4e0d\u4e0a\u54f2\u5b78\u751a\u9ebc\u7684\uff0c\u53c8\u6216\u8005\u662f\u54f2\u5b78\u6bd4\u81ea\u7136\u79d1\u5b78\u66f4\u63a5\u8fd1\u79d1\u5b78\u751a\u9ebc\u7684\u3002 \u4f46\u5373\u4f7f(\u5047\u8a2d)\u54f2\u5b78\u7684\u7814\u7a76\u65b9\u6cd5\u7b26\u5408\u4e86\u4ee5\u4e0a\u8ac7\u8ad6\u7684\u79d1\u5b78\u65b9\u6cd5\uff0c\u5176\u7814\u7a76\u5c0d\u8c61\u4e5f\u4e0d\u662f\u81ea\u7136\u73fe\u8c61\uff0c\u54f2\u5b78\u53ea\u662f\u5c0d\u5176\u4ed6\u54f2\u5b78\u5bb6\u7684\u8a71\u8a9e\u5167\u5bb9\u9032\u884c\u7814\u7a76\u800c\u5df2\u3002 \u7269\u7406\u3001\u5316\u5b78\u3001\u751f\u7269\u5b78\u6703\u6839\u64da\u81ea\u7136\u73fe\u8c61\u8a2d\u8a08\u5be6\u9a57\u3001\u9a57\u8b49\u7406\u8ad6\u3001\u7372\u5f97\u77e5\u8b58\u3002\u54f2\u5b78\u7cfb\u5728\u54ea\u88e1\uff1f\u5c0d\u81ea\u7136\u73fe\u8c61\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u54f2\u5b78\uff0c\u5728\u81ea\u7136\u79d1\u5b78\u7684\u7814\u7a76\u9ad4\u7cfb\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u300c\u5730\u4f4d\u300d\u4e4b\u985e\u7684\u6771\u897f\u3002 \u00b6 \u60f3\u5230\u518d\u88dc\u5145 \u00b6","title":"\u79d1\u5b78\u65b9\u6cd5"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_1","text":"\u672c\u6587\u7ae0\u4ee5\u975e\u4e3b\u6d41\u7684\u6578\u5b78\u516c\u7406\u7cfb\u7d71\u5b9a\u7fa9\u4e86\u79d1\u5b78\u65b9\u6cd5\uff0c\u540c\u6642\u63a2\u8a0e\u4e86\u4e00\u4e9b\u79d1\u5b78\u65b9\u6cd5\u7684\u904b\u7528\u60c5\u6cc1\u3002\u5047\u8a2d\u4e00\u500b\u8b8a\u6578\u5728\u6642\u9593\u3001\u7a7a\u9593\u3001\u5176\u4ed6\u689d\u4ef6\u7684\u6539\u8b8a\u4e4b\u4e0b\u4e5f\u96a8\u8457\u6539\u8b8a\uff0c\u79d1\u5b78\u63a2\u8a0e\u7684\u662f\u5176\u4e2d\u7684\u904e\u7a0b\u548c\u539f\u7406\u3002\u4f8b\u5982\u6642\u9593\u3001\u7a7a\u9593\u4f4d\u7f6e\u7684\u6539\u8b8a\u600e\u6a23\u5f71\u97ff\u5230\u8a72\u8b8a\u6578\u3002\u7576\u6709\u5f88\u591a\u74b0\u5883\u689d\u4ef6\u7684\u6642\u5019\uff0c\u6211\u5011\u9700\u8981\u501f\u52a9\u7dda\u6027\u4ee3\u6578\u4f86\u5206\u6790\uff0c\u5426\u5247\u53ea\u662f\u80e1\u9b27\u3002","title":"\u79d1\u5b78\u65b9\u6cd5"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_2","text":"\u6211\u767c\u73feGoogle\u5f88\u96e3\u627e\u5230\u300c\u79d1\u5b78\u65b9\u6cd5(scientific method)\u300d\u7684\u89e3\u8aaa\u3002\u53cd\u6620\u4e86\u4e2d\u6587\u4f7f\u7528\u8005\u666e\u904d\u7684\u79d1\u5b78\u6559\u80b2\u7a0b\u5ea6\u6975\u4f4e\uff0c\u5c31\u7b97\u6709\u4eba\u60f3\u5b78\u3001\u60f3\u8b58\uff0c\u4e5f\u5f88\u96e3\u627e\u5230\u5408\u9069\u53ef\u4fe1\u7684\u8cc7\u6599\uff0c\u56e0\u6b64\u6211\u8a8d\u70ba\u6709\u5fc5\u8981\u5beb\u4e00\u7bc7\u6587\u4f86\u89e3\u91cb\u79d1\u5b78\u65b9\u6cd5\u3002","title":"\u7de3\u8d77"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_3","text":"\u5047\u8a2d\u4e00\u500bA\u73fe\u8c61\u662f\u4e00\u500b\u8b8a\u6578\uff0c\u6703\u56e0\u70ba\u67d0\u4e9b\u74b0\u5883\u56e0\u7d20\u800c\u5448\u73fe\u65b0\u7684\u5f62\u8c61\u3002 A\u73fe\u8c61\u6240\u767c\u751f\u5728\u7684\u7a7a\u9593\u6709\u5f88\u591a\u74b0\u5883\u56e0\u7d20\uff0c\u4f8b\u5982\u5176\u81ea\u8eab\u7684\u4f4d\u7f6e\u3001\u5176\u4ed6\u73fe\u8c61\u7684\u4f4d\u7f6e\u3001\u73fe\u8c61\u767c\u751f\u7684\u6642\u9593\uff0c\u6211\u5011\u731c\u6e2c\u9019\u4e9b\u74b0\u5883\u56e0\u7d20\u7684\u6539\u8b8a\u6703\u4ee4A\u73fe\u8c61\u8b8a\u6a23\u3002 Text Only 1 2 3 4 5 6 7 8 - \u70ba\u751a\u9ebc\u8981\u9019\u6a23\u5047\u8a2d\uff1f - \u56e0\u70ba\u8981\u5148\u5b9a\u7fa9\u4e00\u500b\u79d1\u5b78\u7684\u7814\u7a76\u5c0d\u8c61 - \u70ba\u751a\u9ebc\u4e00\u5b9a\u8981\u662f\u8b8a\u6578\uff1f - \u5148\u5047\u8a2d\u662f\u4e00\u500b\u8b8a\u6578\u3002\u5982\u679c\u5f8c\u4f86\u767c\u73fe\u4e86\u7121\u8ad6\u74b0\u5883\u56e0\u7d20\u600e\u6a23\u6539\u8b8a\u3001A\u73fe\u8c61\u4e5f\u662f\u6046\u5b9a\u7684\u8a71\uff0c\u9019\u4e5f\u662f\u4e00\u500b\u65b0\u767c\u73fe\u3002 - \u751a\u9ebc\u662f\u74b0\u5883\u56e0\u7d20\uff1f - \u8a72\u73fe\u8c61\u672c\u9ad4\u4ee5\u5916\u7684\u6240\u6709\u6771\u897f\u3002\u908f\u8f2f\u5730\u8aaa\u5c31\u662fsubset[ not(\u8a72\u73fe\u8c61) ]\u3002","title":"\u8b8a\u6578"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_4","text":"\u6211\u5011\u95dc\u5fc3\u7684\u6709\u4e09\u4ef6\u4e8b\uff1a Text Only 1 2 3 1. \u5982\u679cA\u73fe\u8c61\u5728\u7269\u7406\u7a7a\u9593\u5167\u7684\u4f4d\u7f6e\u6539\u8b8a\u4e86\uff0c\u5b83\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 2. \u5982\u679cA\u73fe\u8c61\u767c\u751f\u7684\u6642\u9593\u6539\u8b8a\u4e86\uff0c\u5b83\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 3. \u5982\u679c\u5468\u570d\u7684\u5176\u4ed6\u73fe\u8c61\u6539\u8b8a\u4e86\uff0cA\u73fe\u8c61\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f \u6211\u5011\u95dc\u5fc3\u7684\u662f\u300c\u76f8\u4e92\u4f5c\u7528\u300d\u3002 Text Only 1 2 3 A\u73fe\u8c61 <==> \u7269\u7406\u7a7a\u9593 A\u73fe\u8c61 <==> \u6642\u9593 A\u73fe\u8c61 <==> \u5176\u4ed6\u73fe\u8c61 \u7576\u6211\u5011\u5c07\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u4e5f\u770b\u5f85\u6210\u70ba\u4e00\u7a2e\u73fe\u8c61\u7684\u8a71\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u9019\u6a23\u554f\uff1a Text Only 1 2 1. \u5982\u679cA\u73fe\u8c61\u6539\u8b8a\u4e86\uff0c\u7269\u7406\u7a7a\u9593\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 2. \u5982\u679cA\u73fe\u8c61\u6539\u8b8a\u4e86\uff0c\u6642\u9593\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f \u56e0\u6b64\uff0c\u76f8\u4e92\u4f5c\u7528\u5c31\u8b8a\u6210\u7c21\u55ae\u4e00\u500b\uff1a Text Only 1 A\u73fe\u8c61 <==> \u5176\u4ed6\u73fe\u8c61","title":"\u76f8\u4e92\u4f5c\u7528"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_5","text":"\u5982\u679cA\u73fe\u8c61\u548cB\u73fe\u8c61\u7684\u6027\u8cea\u4e00\u6a23\u7684\u8a71\uff0c\u6211\u5011\u53ef\u4ee5\u628a\u5b83\u5011\u7d44\u5408\u6210\u4e00\u500b\u985e\u578b\u3002 Text Only 1 2 A\u985e\u578b =: {A\u73fe\u8c61, B\u73fe\u8c61} C\u985e\u578b =: {C\u73fe\u8c61, D\u73fe\u8c61} A\u985e\u578b\u7684\u88cf\u9762\u5305\u542b\u4e86A\u73fe\u8c61\u548cB\u73fe\u8c61\u3002\u5982\u662f\u8005\u6211\u5011\u770b\u7684\u76f8\u4e92\u4f5c\u7528\u6703\u8b8a\u6210\u9019\u6a23\uff1a Text Only 1 A\u985e\u578b <==> \u5176\u4ed6\u985e\u578b A\u73fe\u8c61\u548cC\u73fe\u8c61\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u540c\u6642\u4e5f\u767c\u751f\u5728B\u73fe\u8c61\u548cD\u73fe\u8c61\u4e4b\u9593\u3002\u6211\u5011\u5c0dA\u73fe\u8c61\u548cC\u73fe\u8c61\u4e4b\u9593\u76f8\u4e92\u4f5c\u7528\u7684\u7406\u89e3\uff0c\u4e5f\u53ef\u4ee5\u9069\u7528\u65bc\u76f8\u540c\u985e\u578b\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\u3002","title":"\u96c6\u5408"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_6","text":"\u6211\u5011\u60f3\u7372\u77e5\u73fe\u8c61\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\u662f\u5982\u4f55\u767c\u751f\u7684\uff0c\u4ee5\u53ca\u5176\u539f\u7406\u3002\u70ba\u6b64\uff0c\u6211\u5011\u9700\u8981\u4ecb\u5165\u5176\u4e2d\uff0c\u523b\u610f\u53bb\u4ee4\u7814\u7a76\u5c0d\u8c61\u7684\u73fe\u8c61\u4e4b\u9593\u767c\u751f\u76f8\u4e92\u4f5c\u7528\uff0c\u9019\u884c\u70ba\u5c31\u53eb\u505a\u5be6\u9a57\u3002 \u4f8b\u5982\uff0c\u6211\u5011\u60f3\u77e5\u9053A\u73fe\u8c61\u548c\u6642\u9593\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u5011\u53ef\u4ee5\u7dad\u6301\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u90fd\u662f\u6046\u5b9a\u7684\u72c0\u614b\u4e4b\u4e0b\uff0c**\u5728\u4e0d\u540c\u7684\u6642\u9593\u91cd\u8986**\u4ee4A\u73fe\u8c61\u767c\u751f\uff0c\u7136\u5f8c\u89c0\u5bdfA\u73fe\u8c61\u6709\u5426\u6539\u8b8a\u3002 \u53c8\u4f8b\u5982\uff0c\u6211\u5011\u60f3\u77e5\u9053A\u73fe\u8c61\u548c\u7269\u7406\u7a7a\u9593\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u5011\u53ef\u4ee5\u7dad\u6301\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u90fd\u662f\u6046\u5b9a\u7684\u72c0\u614b\u4e4b\u4e0b\uff0c**\u5728\u4e0d\u540c\u7684\u4f4d\u7f6e\u540c\u6642**\u4ee4A\u73fe\u8c61\u767c\u751f\uff0c\u7136\u5f8c\u89c0\u5bdfA\u73fe\u8c61\u6709\u5426\u6539\u8b8a\u3002 \u5982\u679c\u7121\u6cd5\u975c\u6b62\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u7684\u8a71\uff0c\u5be6\u9a57\u4e5f\u53ef\u4ee5\u9032\u884c\uff0c\u53ea\u662f\u5728\u5206\u6790\u7d50\u679c\u7684\u6642\u5019\u6bd4\u8f03\u5403\u529b\u800c\u5df2\u3002\u6211\u5011\u9700\u8981\u4f7f\u7528\u591a\u8b8a\u6578\u7684\u5206\u6790\u5de5\u5177\uff0c\u5c24\u5176\u9700\u8981\u7dda\u6027\u4ee3\u6578\u7684\u77e5\u8b58(\u800c\u4e0d\u662f\u4eba\u6587\u5b78\u79d1\u7684\u77e5\u8b58)\u3002","title":"\u5be6\u9a57\u8207\u89c0\u5bdf"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_7","text":"\u89c0\u5bdf\u9019\u500b\u884c\u70ba\u4e5f\u662f\u4e00\u500b\u73fe\u8c61\u3002\u5982\u679c\u89c0\u5bdf\u884c\u70ba\u672c\u8eab\u5c31\u80fd\u5920\u6539\u8b8a\u4e86A\u73fe\u8c61\u7684\u6027\u8cea\uff0c\u6211\u5011\u5c31\u8981\u601d\u8003\u5982\u4f55\u6e1b\u8f15\u89c0\u5bdf\u6240\u5e36\u4f86\u7684\u6548\u679c\u3002 \u800c\u5be6\u9a57\u884c\u70ba\u672c\u8eab\u5e36\u4f86\u7684\u76f8\u4e92\u4f5c\u7528\u5c31\u662f\u6211\u5011\u671f\u671b\u7684\u6771\u897f\uff0c\u4e0d\u904e\u8981\u78ba\u8a8d\u7684\u662f\u5be6\u969b\u65bd\u884c\u7684\u6642\u5019\u662f\u4e0d\u662f\u8ddf\u539f\u5148\u8a08\u5283\u7684\u4e00\u6a23\u3002","title":"\u89c0\u5bdf\u4e5f\u662f\u4e00\u500b\u73fe\u8c61"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_8","text":"\u5982\u679cZ\u73fe\u8c61\u8207\u5176\u4ed6\u73fe\u8c61\u4e4b\u9593\u5b8c\u5168\u6c92\u6709\u4efb\u4f55\u76f8\u4e92\u4f5c\u7528\u7684\u8a71\uff0cZ\u73fe\u8c61\u53ef\u88ab\u770b\u5f85\u70ba\u4e0d\u5b58\u5728\uff0c\u4e8b\u5be6\u4e0a\u4ea6\u7b49\u540c\u65bc\u4e0d\u5b58\u5728\u3002\u539f\u56e0\u5982\u4e0b\uff1a Text Only 1 2 3 4 5 1. \u5b83\u4e0d\u80fd\u5920\u5f71\u97ff\u4efb\u4f55\u6771\u897f\u3002 - \u6709\u6c92\u6709Z\u73fe\u8c61\u4e5f\u6c92\u6709\u6240\u8b02\u3002\u53cd\u6b63\u90fd\u662f\u4e00\u6a23\u3002 2. \u4f60\u7121\u6cd5\u5f97\u77e5Z\u73fe\u8c61\u5b58\u5728\u3002 - Z\u73fe\u8c61\u7121\u6cd5\u5e72\u64fe\u5176\u4ed6\u73fe\u8c61\uff0c\u56e0\u6b64\u6211\u5011\u6c92\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u5f97\u77e5Z\u73fe\u8c61\u7684\u5b58\u5728\u3002\u55aa\u5931\u4e86\u300c\u5f97\u77e5\u300d\u7684\u9019\u4e00\u500b\u6e20\u9053\u3002","title":"\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u73fe\u8c61"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_9","text":"","title":"\u904b\u7528\u79d1\u5b78\u65b9\u6cd5"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_10","text":"\u5728\u5730\u7403\u8868\u9762\u4e0a\uff0c\u7269\u4ef6\u6703\u5411\u4e0b\u8dcc\u843d\u3002\u6211\u5011\u60f3\u77e5\u9053\u662f\u4e0d\u662f\u6240\u6709\u7684\u5730\u65b9\u90fd\u6703\u540c\u6a23\u5730\u767c\u751f\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u3002\u56e0\u6b64\u6211\u5011\u505a\u5be6\u9a57\uff0c\u5728\u4e0d\u540c\u7684\u5730\u65b9\u62ff\u8d77\u7269\u4ef6\u7136\u5f8c\u653e\u624b\uff0c\u7269\u4ef6\u90fd\u4e00\u6a23\u6703\u8dcc\u843d\u3002\u540c\u6642\u62ff\u8d77\u5169\u500b\u7269\u4ef6\uff0c\u540c\u6642\u653e\u624b\uff0c\u4e00\u9f4a\u8dcc\u843d\u3002\u6211\u5011\u5f97\u77e5\u56e0\u6b64\u300c\u8dcc\u843d\u300d\u7684\u9019\u500b\u73fe\u8c61\u662f\u4e0d\u53d7\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u6539\u8b8a\u7684\u5f71\u97ff\u3002 \u4f46\u662f\u6211\u5011\u8981\u4ed4\u7d30\u8003\u616e\u6240\u6709\u5be6\u9a57\u7d30\u7bc0\u548c\u74b0\u5883\u56e0\u7d20\u548c\u7d50\u679c\u7684\u7d30\u7bc0\u3002\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u767c\u751f\u7684\u300c\u8dcc\u843d\u300d\u73fe\u8c61\u90fd\u662f\u5b8c\u5168\u76f8\u540c\uff1f\u4f8b\u5982\u6211\u5011\u5fc5\u9808\u8981\u554f\uff0c\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u7684\u8dcc\u843d\u7684**\u901f\u5ea6**\u3001**\u52a0\u901f\u7387**\u90fd\u662f\u4e00\u6a23\uff1f \u540c\u6642\u6211\u5011\u53c8\u8981\u554f\uff0c\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u6703\u4e0d\u6703\u5f71\u97ff\u5230\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u672c\u8eab\uff1f\u800c\u7269\u4ef6\u672c\u8eab\u7684\u6027\u8cea\u53c8\u6703\u4e0d\u6703\u5f71\u97ff\u5230\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u7684\u904e\u7a0b\u548c\u7d50\u679c\u3002","title":"\u8b8a\u6578\u3001\u73fe\u8c61\u3001\u8207\u5176\u76f8\u4e92\u4f5c\u7528"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_11","text":"\u4e4b\u6240\u4ee5\u5404\u570b\u5718\u968a\u6703\u91cd\u8986\u505a\u540c\u4e00\u500b\u5be6\u9a57\uff0c\u662f\u56e0\u70ba\u8981\u78ba\u5b9a\u4e0d\u662f\u5be6\u9a57\u7d50\u679c\u4e0d\u662f\u56e0\u4eba\u800c\u7570\u3001\u56e0\u6642\u800c\u7570\u3001\u56e0\u5730\u800c\u7570\u3002\u5982\u679c\u8aaa\u4e00\u500b\u5e79\u7d30\u80de\u5be6\u9a57\uff0c\u7121\u8ad6\u5982\u4f55\u90fd\u7121\u8fa6\u6cd5\u91cd\u73fe\u7576\u521d\u7684\u7d50\u679c\uff0c\u6392\u9664\u5be6\u9a57\u8a2d\u8a08\u548c\u904e\u7a0b\u7684\u554f\u984c\u4e4b\u5f8c\uff0c\u9918\u4e0b\u4f86\u5c31\u662f\u9020\u5047\u7684\u53ef\u80fd\u6027\u4e86\u3002 \u5982\u679c\u4ed6\u8aaa\u90a3\u500b\u539f\u7406\u662f\u56e0\u5730\u800c\u7570\u7684\u8a71\uff0c\u7136\u800c\u4ed6\u81ea\u5df1\u4e5f\u4e0d\u80fd\u5920\u5728\u540c\u4e00\u500b\u5be6\u9a57\u5ba4\u91cd\u8986\u540c\u4e00\u500b\u5be6\u9a57\u7d50\u679c\uff0c\u554f\u984c\u5c31\u66f4\u5927\u4e86\u3002 \u5982\u679c\u4ed6\u8aaa\u90a3\u500b\u539f\u7406\u662f\u56e0\u6642\u800c\u7570\u7684\u8a71\uff0c\u90a3\u9ebc\u6211\u5011\u4e5f\u6c92\u6709\u8fa6\u6cd5\u5f97\u77e5\u662f\u751a\u9ebc\u6642\u5019\u624d\u80fd\u5920\u4ee4\u7d50\u679c\u518d\u73fe\uff0c\u5f88\u5927\u6a5f\u6703\u6839\u672c\u90a3\u500b\u53ea\u662f\u4e00\u6b21\u6027\u7684\u73fe\u8c61\uff0c\u53ea\u767c\u751f\u5728\u539f\u59cb\u5be6\u9a57\u7576\u6642\u7684\u90a3\u4e00\u523b\u3002\u5982\u679c\u5982\u662f\u7684\u8a71\uff0c\u90a3\u9ebc\u9019\u4e5f\u5c31\u662f\u300c\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u73fe\u8c61\u300d\u3002\u56e0\u70ba\u518d\u4e5f\u4e0d\u53ef\u80fd\u767c\u751f\u7b2c\u4e8c\u6b21\u7684\uff0c\u8207\u300c\u6c92\u6709\u9019\u7a2e\u6771\u897f\u300d\u662f\u4e00\u6a23\u7684\u3002","title":"\u79d1\u5b78\u80fd\u5920\u4f60\u8aaa\u4e86\u7b97\u55ce\uff1f"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_12","text":"\u6587\u79d1\u4ed4\u5e38\u898b\u7684\u300c\u8b49\u660e\u4e86\u4e16\u754c\u4e0a\u6709\u9b3c\u300d\u7684\u8faf\u8b49\u6cd5\u662f\u9019\u6a23\u7684\u3002 \u6211\u6709\u9670\u967d\u773c\uff0c\u7d93\u5e38\u898b\u5230\u9b3c\uff0c\u4f60\u770b\u4e0d\u898b\u4f46\u6211\u770b\u5f97\u898b\u3002\u79d1\u5b78\u5100\u5668\u4e0d\u80fd\u63a2\u6e2c\u5230\u9b3c\u7684\u5b58\u5728\uff0c\u4f46\u6211\u5c31\u662f\u53ef\u4ee5\u3002 \u5982\u679c\u4e00\u500b\u73fe\u8c61\u6709\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u548c\u5be6\u9a57\u7d30\u7bc0\u90fd\u662f\u6046\u5b9a\u7684\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u53ea\u6709\u5728\u6587\u79d1\u4ed4\u7684\u60c5\u6cc1\u6709\u6240\u6539\u8b8a\uff0c\u90a3\u9ebc\u6211\u5011\u8981\u601d\u8003\u7684\u662f\u554f\u984c\u662f\u5426\u5c31\u51fa\u65bc\u6587\u79d1\u4ed4\u7684\u8eab\u4e0a\uff1f \u6587\u79d1\u4ed4\u662f\u4eba\uff0c\u6211\u4e5f\u662f\u4eba\uff0c\u5927\u5bb6\u4e5f\u662f\u4eba\uff1a Text Only 1 \u4eba =: {\u6211\uff0c\u4f60\uff0c\u4ed6} \u5047\u8a2d\u4eba\u9b3c\u4e4b\u9593\u6709\u76f8\u4e92\u4f5c\u7528\uff0c\u5982\u679c\u5927\u5bb6\u90fd\u662f\u4eba\u7684\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u537b\u53ea\u6709\u6587\u79d1\u4ed4\u53ef\u4ee5\u898b\u5230\u9b3c\uff0c\u662f\u4e0d\u662f\u6587\u79d1\u4ed4\u51fa\u4e86\u554f\u984c\uff1f \u6211\u5011\u5f97\u77e5\u79d1\u5b78\u5100\u5668\u7684\u5728\u4e00\u5207\u7269\u7406\u74b0\u5883\u7684\u611f\u77e5\u80fd\u529b\u90fd\u6bd4\u4eba\u985e\u5f37\uff0c\u4f8b\u5982\u52a0\u901f\u5ea6\u3001\u8072\u6ce2\u3001\u5149\u6ce2\u3001\u96fb\u78c1\u6ce2\u3001\u91cd\u529b\u6ce2\uff0c\u5982\u679c\u9b3c\u7684\u5b58\u5728\u9019\u4e00\u5207\u7684\u7269\u7406\u6027\u8cea\u4e0a\u90fd\u4e0d\u80fd\u5920\u5f97\u4ee5\u53cd\u6620\u7684\u8a71\uff0c\u5c31\u662f\u8aaa\u53ef\u80fd\u6027\u53ea\u6709\u4e00\u500b\uff1a\u662f\u6587\u79d1\u4ed4\u51fa\u4e86\u554f\u984c\u3002 \u5982\u679c\u9b3c\u8207\u5176\u4ed6\u4e00\u5207\u4e8b\u60c5\u7686\u7121\u76f8\u4e92\u4f5c\u7528\uff0c\u53ea\u6709\u8ddf\u6587\u79d1\u4ed4\u7684\u8a8d\u77e5\u4e4b\u9593\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u8a71\uff0c\u7b54\u6848\u4e4b\u6709\u5169\u500b\uff1a Text Only 1 2 1. \u9019\u500b\u6587\u79d1\u4ed4\u662f\u88ab\u9078\u4e2d\u7684\uff0c\u503c\u5f97\u89e3\u5256\u7814\u7a76\u6709\u751a\u9ebc\u7279\u5225\u7684\u69cb\u9020 2. \u9019\u500b\u6587\u79d1\u4ed4\u60a3\u4e0a\u4e86\u601d\u89ba\u5931\u8abf","title":"\u795e\u9b3c\u8ad6\u8b49"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_13","text":"\u4e0d\u662f\u3002\u56e0\u70ba\u793e\u6703\u79d1\u5b78\u6c92\u6709\u52aa\u529b\u53bb\u78ba\u4fdd\u5be6\u9a57\u74b0\u5883\u7684\u4e00\u81f4\uff0c\u5373\u4f7f\u4e0d\u4e00\u81f4\uff0c\u4e5f\u4ed6\u5011\u4e5f\u6c92\u6709\u904b\u7528\u591a\u8b8a\u6578\u5206\u6790\u624b\u6cd5\u548c\u5de5\u5177\u4f86\u5206\u96e2\u5404\u74b0\u5883\u56e0\u7d20\u548c\u7d50\u679c\u4e4b\u9593\u7684\u95dc\u4fc2\u3002\u6700\u57fa\u672c\uff0c\u7dda\u6027\u4ee3\u6578\u662f\u5fc5\u4fee\u7684\u3002","title":"\u793e\u6703\u79d1\u5b78\u662f\u79d1\u5b78\u55ce\uff1f"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_14","text":"\u6587\u79d1\u4ed4\u7684\u8001\u751f\u5e38\u8ac7\u662f\u54f2\u5b78\u8d85\u7136\u65bc\u79d1\u5b78\u751a\u9ebc\u7684\uff0c\u7269\u7406\u5b78\u53ca\u4e0d\u4e0a\u54f2\u5b78\u751a\u9ebc\u7684\uff0c\u53c8\u6216\u8005\u662f\u54f2\u5b78\u6bd4\u81ea\u7136\u79d1\u5b78\u66f4\u63a5\u8fd1\u79d1\u5b78\u751a\u9ebc\u7684\u3002 \u4f46\u5373\u4f7f(\u5047\u8a2d)\u54f2\u5b78\u7684\u7814\u7a76\u65b9\u6cd5\u7b26\u5408\u4e86\u4ee5\u4e0a\u8ac7\u8ad6\u7684\u79d1\u5b78\u65b9\u6cd5\uff0c\u5176\u7814\u7a76\u5c0d\u8c61\u4e5f\u4e0d\u662f\u81ea\u7136\u73fe\u8c61\uff0c\u54f2\u5b78\u53ea\u662f\u5c0d\u5176\u4ed6\u54f2\u5b78\u5bb6\u7684\u8a71\u8a9e\u5167\u5bb9\u9032\u884c\u7814\u7a76\u800c\u5df2\u3002 \u7269\u7406\u3001\u5316\u5b78\u3001\u751f\u7269\u5b78\u6703\u6839\u64da\u81ea\u7136\u73fe\u8c61\u8a2d\u8a08\u5be6\u9a57\u3001\u9a57\u8b49\u7406\u8ad6\u3001\u7372\u5f97\u77e5\u8b58\u3002\u54f2\u5b78\u7cfb\u5728\u54ea\u88e1\uff1f\u5c0d\u81ea\u7136\u73fe\u8c61\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u54f2\u5b78\uff0c\u5728\u81ea\u7136\u79d1\u5b78\u7684\u7814\u7a76\u9ad4\u7cfb\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u300c\u5730\u4f4d\u300d\u4e4b\u985e\u7684\u6771\u897f\u3002","title":"\u54f2\u5b78\u5728\u81ea\u7136\u79d1\u5b78\u4e0a\u7684\u5730\u4f4d\u6bd4\u7269\u7406\u3001\u5316\u5b78\u3001\u751f\u7269\u5b78\u7b49\u9ad8\u55ce\uff1f"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_15","text":"","title":""},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_16","text":"","title":"\u60f3\u5230\u518d\u88dc\u5145"}]}
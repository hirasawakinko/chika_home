{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About this site \u00b6 Important Chika will never use non #000000 blackground in dark mode. Tips Chika believes list of information is more accessible than wall of text. Who is Chika? \u00b6 Info Check out this page to find out who is Chika! About Chika","title":"Home"},{"location":"#about-this-site","text":"Important Chika will never use non #000000 blackground in dark mode. Tips Chika believes list of information is more accessible than wall of text.","title":"About this site"},{"location":"#who-is-chika","text":"Info Check out this page to find out who is Chika! About Chika","title":"Who is Chika?"},{"location":"about/","text":"About Me \u00b6 Table of contents Name Age Language Education Self-taught Name \u00b6 Chika! Age \u00b6 Within the general age of university student. Language \u00b6 Chika is a trilingual in Chinese, Japanese, and English. Educational Background \u00b6 Studying abroad Bachelor degree of Human Geography High GPA Top-tier university in Japan Bachelor thesis: Geographic Information Science Urban morphology of Japan Limitations of map representation Broad interest across almost all disciplines Chika would like to know all of them literature to philosophy psychology to neuroscience geography to geology oceanology to meteorology zoology to microbiology astronomy to quantum-field-theory classical to quantum computing pure to applied mathematics However time is limited Chika chose to abandon the not-so-important parts disciplines that are no where science some how self-contradicting internally literature philosophy psychology Caution Don't ever think to argue with this. Chika had never lost a battle! Self-Taught \u00b6 Chika knows stuffs! Prealgebra Algebra Precalculus Single-Variable Calculus Multi-Variable Calculus Linear Algebra Group Theory (basics) Quantum Computering (basics) Programming (Python3) Algorithms IT support and Computer Hardware (studied for CompTIA A+) Geographic Information Science Physics (basics) Chemistry (basics) Astronomy (basics) 3D CAD (basics) Japanese Language (advanced) English (intermediate to advanced) Soldering and Reflowing (advanced) Flashlight Engineering (basics) Guitar (basics) Piano (basics) Violin (basics)","title":"About Me"},{"location":"about/#about-me","text":"Table of contents Name Age Language Education Self-taught","title":"About Me"},{"location":"about/#name","text":"Chika!","title":"Name"},{"location":"about/#age","text":"Within the general age of university student.","title":"Age"},{"location":"about/#language","text":"Chika is a trilingual in Chinese, Japanese, and English.","title":"Language"},{"location":"about/#educational-background","text":"Studying abroad Bachelor degree of Human Geography High GPA Top-tier university in Japan Bachelor thesis: Geographic Information Science Urban morphology of Japan Limitations of map representation Broad interest across almost all disciplines Chika would like to know all of them literature to philosophy psychology to neuroscience geography to geology oceanology to meteorology zoology to microbiology astronomy to quantum-field-theory classical to quantum computing pure to applied mathematics However time is limited Chika chose to abandon the not-so-important parts disciplines that are no where science some how self-contradicting internally literature philosophy psychology Caution Don't ever think to argue with this. Chika had never lost a battle!","title":"Educational Background"},{"location":"about/#self-taught","text":"Chika knows stuffs! Prealgebra Algebra Precalculus Single-Variable Calculus Multi-Variable Calculus Linear Algebra Group Theory (basics) Quantum Computering (basics) Programming (Python3) Algorithms IT support and Computer Hardware (studied for CompTIA A+) Geographic Information Science Physics (basics) Chemistry (basics) Astronomy (basics) 3D CAD (basics) Japanese Language (advanced) English (intermediate to advanced) Soldering and Reflowing (advanced) Flashlight Engineering (basics) Guitar (basics) Piano (basics) Violin (basics)","title":"Self-Taught"},{"location":"about_site/","text":"About This Site \u00b6 Build Tool \u00b6 Tool MkDocs Theme Material for MkDocs Programming Language Python3 Markdown Installation \u00b6 put this in terminal Text Only 1 pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-git-authors-plugin mkdocs-rss-plugin Custom Color Scheme \u00b6 Important You should check the following information before modifing default settings Offical Document of Material for MkDocs 1. insert a new file in as /docs/stylesheets/extra.css with the following css code \u00b6 /docs/stylesheets/extra.css CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 : root > * { --md-primary-fg-color : #b62172 ; --md-primary-fg-color--light : #c31176 ; --md-primary-fg-color--dark : #ec1e93 ; } [ data-md-color-scheme = \"slate\" ] { --md-hue : 330 ; // Default color shades --md-default-fg-color : hsla ( var ( --md-hue ), 75 % , 100 % , 1 ); --md-default-fg-color--light : hsla ( var ( --md-hue ), 75 % , 100 % , 0.85 ); --md-default-fg-color--lighter : hsla ( var ( --md-hue ), 75 % , 100 % , 0.65 ); --md-default-fg-color--lightest : hsla ( var ( --md-hue ), 75 % , 100 % , 0.35 ); --md-default-bg-color : hsla ( var ( --md-hue ), 5 % , 0 % , 1 ); --md-default-bg-color--light : hsla ( var ( --md-hue ), 5 % , 0 % , 0.80 ); --md-default-bg-color--lighter : hsla ( var ( --md-hue ), 5 % , 0 % , 0.40 ); --md-default-bg-color--lightest : hsla ( var ( --md-hue ), 5 % , 0 % , 0.20 ); // Code color shades --md-code-fg-color : hsla ( var ( --md-hue ), 18 % , 90 % , 1 ); --md-code-bg-color : hsla ( var ( --md-hue ), 0 % , 8 % , 1 ); // Code highlighting color shades --md-code-hl-color : hsla ( 90 , 100 % , 50 % , 1 ); --md-code-hl-number-color : hsla ( 180 , 100 % , 70 % , 1 ); --md-code-hl-special-color : hsla ( 300 , 100 % , 50 % , 1 ); --md-code-hl-function-color : hsla ( 200 , 100 % , 50 % , 1 ); --md-code-hl-constant-color : hsla ( 180 , 100 % , 70 % , 1 ); --md-code-hl-keyword-color : hsla ( 30 , 100 % , 70 % , 1 ); --md-code-hl-string-color : hsla ( 30 , 100 % , 70 % , 1 ); --md-code-hl-name-color : var ( --md-default-fg-color ); --md-code-hl-operator-color : hsla ( 180 , 100 % , 50 % , 1 ); --md-code-hl-punctuation-color : var ( --md-default-fg-color ); --md-code-hl-comment-color : hsla ( 150 , 100 % , 50 % , 1 ); --md-code-hl-generic-color : var ( --md-default-fg-color ); --md-code-hl-variable-color : var ( --md-default-fg-color ); // Admonition color shades --md-admonition-fg-color : var ( --md-default-fg-color ); --md-admonition-bg-color : var ( --md-default-bg-color ); // Footer color shades --md-footer-bg-color : hsla ( var ( --md-hue ), 10 % , 0 % , 1 ); --md-footer-bg-color--dark : hsla ( var ( --md-hue ), 10 % , 0 % , 1 ); } . md-grid { max-width : initial ; } 2. insert the following option into /mkdocs.yml . \u00b6 /mkdocs.yml Text Only 1 2 extra_css: - stylesheets/extra.css Configuration \u00b6 Here is my configuration file. You fill in your informations. /mkdocs.yml Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 site_name: _______ copyright: _______ repo_name: _______ repo_url: _______ edit_uri: _______ nav: - _______ - _______ - _______ plugins: - search - git-authors: show_contribution: true - git-revision-date-localized: enable_creation_date: true type: iso_date theme: name: material logo: favicon_io/android-chrome-512x512.png favicon: favicon_io/favicon-32x32.png icon: repo: fontawesome/brands/github palette: # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-7 name: Switch to light mode # Palette toggle for light mode - scheme: default toggle: icon: material/weather-night name: Switch to dark mode language: en features: - navigation.instant - navigation.tracking - navigation.tabs - navigation.tabs.sticky - navigation.expand - navigation.prune - navigation.indexes - navigation.top - search.suggest - search.highlight - header.autohide - content.code.annotate - content.tabs.link - toc.integrate - toc.follow extra_css: - stylesheets/extra.css extra: social: - icon: fontawesome/brands/github link: https://github.com/ _______ name: Visit My _______ 's Github repository markdown_extensions: # Python Markdown - abbr - admonition - attr_list - def_list - footnotes - md_in_html - toc: permalink: true # Python Markdown Extensions - pymdownx.arithmatex: generic: true - pymdownx.betterem: smart_enable: all - pymdownx.caret - pymdownx.details - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji emoji_generator: !!python/name:materialx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.tilde - pymdownx.snippets","title":"About This Site"},{"location":"about_site/#about-this-site","text":"","title":"About This Site"},{"location":"about_site/#build-tool","text":"Tool MkDocs Theme Material for MkDocs Programming Language Python3 Markdown","title":"Build Tool"},{"location":"about_site/#installation","text":"put this in terminal Text Only 1 pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-git-authors-plugin mkdocs-rss-plugin","title":"Installation"},{"location":"about_site/#custom-color-scheme","text":"Important You should check the following information before modifing default settings Offical Document of Material for MkDocs","title":"Custom Color Scheme"},{"location":"about_site/#1-insert-a-new-file-in-as-docsstylesheetsextracss-with-the-following-css-code","text":"/docs/stylesheets/extra.css CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 : root > * { --md-primary-fg-color : #b62172 ; --md-primary-fg-color--light : #c31176 ; --md-primary-fg-color--dark : #ec1e93 ; } [ data-md-color-scheme = \"slate\" ] { --md-hue : 330 ; // Default color shades --md-default-fg-color : hsla ( var ( --md-hue ), 75 % , 100 % , 1 ); --md-default-fg-color--light : hsla ( var ( --md-hue ), 75 % , 100 % , 0.85 ); --md-default-fg-color--lighter : hsla ( var ( --md-hue ), 75 % , 100 % , 0.65 ); --md-default-fg-color--lightest : hsla ( var ( --md-hue ), 75 % , 100 % , 0.35 ); --md-default-bg-color : hsla ( var ( --md-hue ), 5 % , 0 % , 1 ); --md-default-bg-color--light : hsla ( var ( --md-hue ), 5 % , 0 % , 0.80 ); --md-default-bg-color--lighter : hsla ( var ( --md-hue ), 5 % , 0 % , 0.40 ); --md-default-bg-color--lightest : hsla ( var ( --md-hue ), 5 % , 0 % , 0.20 ); // Code color shades --md-code-fg-color : hsla ( var ( --md-hue ), 18 % , 90 % , 1 ); --md-code-bg-color : hsla ( var ( --md-hue ), 0 % , 8 % , 1 ); // Code highlighting color shades --md-code-hl-color : hsla ( 90 , 100 % , 50 % , 1 ); --md-code-hl-number-color : hsla ( 180 , 100 % , 70 % , 1 ); --md-code-hl-special-color : hsla ( 300 , 100 % , 50 % , 1 ); --md-code-hl-function-color : hsla ( 200 , 100 % , 50 % , 1 ); --md-code-hl-constant-color : hsla ( 180 , 100 % , 70 % , 1 ); --md-code-hl-keyword-color : hsla ( 30 , 100 % , 70 % , 1 ); --md-code-hl-string-color : hsla ( 30 , 100 % , 70 % , 1 ); --md-code-hl-name-color : var ( --md-default-fg-color ); --md-code-hl-operator-color : hsla ( 180 , 100 % , 50 % , 1 ); --md-code-hl-punctuation-color : var ( --md-default-fg-color ); --md-code-hl-comment-color : hsla ( 150 , 100 % , 50 % , 1 ); --md-code-hl-generic-color : var ( --md-default-fg-color ); --md-code-hl-variable-color : var ( --md-default-fg-color ); // Admonition color shades --md-admonition-fg-color : var ( --md-default-fg-color ); --md-admonition-bg-color : var ( --md-default-bg-color ); // Footer color shades --md-footer-bg-color : hsla ( var ( --md-hue ), 10 % , 0 % , 1 ); --md-footer-bg-color--dark : hsla ( var ( --md-hue ), 10 % , 0 % , 1 ); } . md-grid { max-width : initial ; }","title":"1. insert a new file in as /docs/stylesheets/extra.css with the following css code"},{"location":"about_site/#2-insert-the-following-option-into-mkdocsyml","text":"/mkdocs.yml Text Only 1 2 extra_css: - stylesheets/extra.css","title":"2. insert the following option into /mkdocs.yml."},{"location":"about_site/#configuration","text":"Here is my configuration file. You fill in your informations. /mkdocs.yml Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 site_name: _______ copyright: _______ repo_name: _______ repo_url: _______ edit_uri: _______ nav: - _______ - _______ - _______ plugins: - search - git-authors: show_contribution: true - git-revision-date-localized: enable_creation_date: true type: iso_date theme: name: material logo: favicon_io/android-chrome-512x512.png favicon: favicon_io/favicon-32x32.png icon: repo: fontawesome/brands/github palette: # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-7 name: Switch to light mode # Palette toggle for light mode - scheme: default toggle: icon: material/weather-night name: Switch to dark mode language: en features: - navigation.instant - navigation.tracking - navigation.tabs - navigation.tabs.sticky - navigation.expand - navigation.prune - navigation.indexes - navigation.top - search.suggest - search.highlight - header.autohide - content.code.annotate - content.tabs.link - toc.integrate - toc.follow extra_css: - stylesheets/extra.css extra: social: - icon: fontawesome/brands/github link: https://github.com/ _______ name: Visit My _______ 's Github repository markdown_extensions: # Python Markdown - abbr - admonition - attr_list - def_list - footnotes - md_in_html - toc: permalink: true # Python Markdown Extensions - pymdownx.arithmatex: generic: true - pymdownx.betterem: smart_enable: all - pymdownx.caret - pymdownx.details - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji emoji_generator: !!python/name:materialx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.tilde - pymdownx.snippets","title":"Configuration"},{"location":"learn_japanese/","text":"Sample \u00b6 Just testing some functionalities. A sample Code is Below Text Only 1 2 3 4 5 def func(): for n in range(10): print(n) print(\"wow\")","title":"Sample"},{"location":"learn_japanese/#sample","text":"Just testing some functionalities. A sample Code is Below Text Only 1 2 3 4 5 def func(): for n in range(10): print(n) print(\"wow\")","title":"Sample"},{"location":"library/","text":"Chika's Library \u00b6 Big List \u00b6 This is Chika's library! Name Description By Who? Url OpenStax free and super thick college level textbooks Rice University https://openstax.org/subjects Open Textbook Library a hub of many university level free textbook University of Minnesota https://open.umn.edu/opentextbooks/ Open Textbook a hub of many university level free textbook BCcampus https://collection.bccampus.ca Open Library acient books can be found here InternetArchive.org https://openlibrary.org NAP Library Nation Academies of Sciences Engineering Medicine of USA anything published by the USA academies can be found here super board cover of topics state of arts knowledge for the general public totally free https://nap.nationalacademies.org/topic/?browse=1 OECD Library research results from international institution focus on regional or national issues some books are open access university usually paid for the subscription OECD https://www.oecd-ilibrary.org/books LibreTexts textbooks that being used inside university campus unintuitive website University of California Davis https://libretexts.org MIT OCW advanced contents sometime they will upload a whole textbook Massachusetts Institute of Technology https://ocw.mit.edu PSU Library focus on Geographic Information Science many topics that get you to graduate level Penn State University https://roam.libraries.psu.edu/resources Springer Open Access high quality advanced topics Springer https://link.springer.com/search?package=openaccess Nature Communications science journal inspiration on research topics Nature https://www.nature.com/ncomms/","title":"Chika's Library"},{"location":"library/#chikas-library","text":"","title":"Chika's Library"},{"location":"library/#big-list","text":"This is Chika's library! Name Description By Who? Url OpenStax free and super thick college level textbooks Rice University https://openstax.org/subjects Open Textbook Library a hub of many university level free textbook University of Minnesota https://open.umn.edu/opentextbooks/ Open Textbook a hub of many university level free textbook BCcampus https://collection.bccampus.ca Open Library acient books can be found here InternetArchive.org https://openlibrary.org NAP Library Nation Academies of Sciences Engineering Medicine of USA anything published by the USA academies can be found here super board cover of topics state of arts knowledge for the general public totally free https://nap.nationalacademies.org/topic/?browse=1 OECD Library research results from international institution focus on regional or national issues some books are open access university usually paid for the subscription OECD https://www.oecd-ilibrary.org/books LibreTexts textbooks that being used inside university campus unintuitive website University of California Davis https://libretexts.org MIT OCW advanced contents sometime they will upload a whole textbook Massachusetts Institute of Technology https://ocw.mit.edu PSU Library focus on Geographic Information Science many topics that get you to graduate level Penn State University https://roam.libraries.psu.edu/resources Springer Open Access high quality advanced topics Springer https://link.springer.com/search?package=openaccess Nature Communications science journal inspiration on research topics Nature https://www.nature.com/ncomms/","title":"Big List"},{"location":"algorithms/","text":"Algorithms \u00b6 Largest Consecutive Interval \u00b6","title":"Algorithms"},{"location":"algorithms/#algorithms","text":"","title":"Algorithms"},{"location":"algorithms/#largest-consecutive-interval","text":"","title":"Largest Consecutive Interval"},{"location":"algorithms/Largest%20Consecutive%20Interval/","text":"Largest Consecutive Interval \u00b6 Contents \u00b6 Data Structure Divide and Conquer Wrap Everything Up Real Maxium Interval General Maxium Interval Problem: Given a list of intervals, find the largest consecutive interval For Example: 1, 4 9, 10 15, 20 3, 15 This seems easy, you can make a full-length list to keep tract of the frequency of elements from the smallest to the largest. But let say one interval is (1,1e18), then you must make a 1e18-long list to do the task. This doesn't sound efficient. Therefore in order to implement this algorithm efficiently, you have to work directly with intervals. Data Structure \u00b6 I choose list for the sake of simplicity. Since the intervals are just number pairs, you can encode them in a list. Text Only 1 2 3 [ (a b) (c d) ] Here you have a list length=4, contains number of intervals=2 Therefore you can make use of the property of a plain list, you can do binary search, also slicing on it. For example: Text Only 1 2 3 A = [ (1 4) (7 9) ] next interval = (3, 6) = (lo, hi) Lets consider 3=lo. We need know where should 3 belongs to A, namely, is 3 within some interval or outside of any interval. Here you use binary search to find the point of insert. Python 1 2 3 >>> from bisect import bisect as find >>> insert_point = find ( A , 3 ) 1 This is a odd number. odd number means it is within the interval at index 0~1. Because: Text Only 1 2 3 4 5 6 intervals = [ (a b) (c d) ... ] index = [ 0 1 2 3 ... ] index is odd even odd even... odd insert index ==means==> after a even index ==means==> (start, insert, end) Thus by finding whether the index returned by find() is even or edd. You also know whether it is being inserted within or outside a particular interval. That is: Text Only 1 2 3 4 5 A = [ (1 4) (7 9) ] next = (3 6) for 3: find(A, 3) => 1 => odd => within particaular interval for 6: find(A, 6) => 2 => even => outside of any interval As 3 is within particular interval, it is overlapped with that particular interval, thus is consecutive. Therefore you can combine them as one single interval. Text Only 1 new_A = [ (1 6) (7,9) ] This is the basic idea of this algorithm. Here is the implementation. Divide and Conquer \u00b6 But there is more to think about. What about boundary case? How is that exactly to combine intervals and update the list? First of all, let's break things down into smaller parts. Consider the same list as previous section, Text Only 1 2 3 4 A = [ (1 4) (7 9) ] # For arbitrary interval next interval = (lo, hi) combine intervals and update the list \u00b6 Before going into the details of handling lo and hi, first you need to know how to do the finishing task. Let say this is the result. (1, 4) combine with (lo, hi), to form a new (1, hi) interval, replacing the old one. Text Only 1 2 3 4 A = [ (1 4) (7 9) ] next = (lo hi) new_A = [ (1 hi) (7 9) ] In general case, there you can divide the list into three parts: Text Only 1 2 3 [ <left intervals> <combined intervals> <righ intervals> ] [ <left intervals> ( 1 lo 4 hi ) <righ intervals> ] What you need to do is to split the list into three parts, replace the middle part with combined intervals, and then put these three parts back together as the new list. In order to achive this, you have to find out the lower and upper limits for slicing. For example, for a completely disjointed new interval: Python 1 2 3 4 5 6 7 8 from bisect import bisect as find A = [ 1 , 4 , 9 , 10 ] new_interval = [ 6 , 7 ] lo_limit = find ( A , 6 ) up_limit = find ( A , 7 ) new_A = A [: lo_limit ] + new_interval + A [ up_limit :] # new_A = A[:2] + new_interval + A[2:] This is only for the case of completely disjointed new interval. The others have different lower and uppper limits. However no matter which cases, the goal is in fact finding the slicing indices of the combined intervals. Text Only 1 2 3 4 5 index = 0 1 1 2 2 3 #------------------------------ # [ (1, lo, 4, hi) (7 9) ] => A[0:2] = combined_intervals in case of lo \u00b6 First deal with lo. There are 3 location where lo is possibly being inserted. That is: Text Only 1 2 3 4 5 6 7 (1 4) ^ ^ ^ a b c a = left b = middle c = right case a: even lo <= 1 case b: odd 1 <= lo < 4 case c even 4 <= lo Nevertheless, you should ask whether each position indicates consecutiveness or not. Also, where should it be the new lowest point of the interval (lo, hi). Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) i = find ( A , lo ) if i % 2 : # i is odd # case b # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ] else : # i is even # case a # if lo==1, this is True. # if lo<1, this is also True. # if lo<1, it means that (1, 4) is inside (lo, hi), # so the lowest point is lo. if lo <= A [ i ]: lowest = lo # case c else : # A[i-1] < lo # disjoint if A [ i - 1 ] < lo : lowest = lo # connected else : lowest = A [ i - 2 ] boundary case \u00b6 What if lo is the smallest number and find(A, lo)==0 ? There is a output value of A[i-1], when i=1, it become A[-1] and this is a bug. Also You have to cover this boundary case. Text Only 1 2 3 4 if i==0: # do something else: # do other things Becase of this bisection, situations that you have to included in the else is the following: Text Only 1 2 3 4 5 6 (1 4) ^ ^ b c b = middle c = right case b: odd 1 <= lo < 4 case c even 4 <= lo This means that either connected or disjointed. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ] # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo # connected else : lowest = A [ i - 2 ] return lowest slicing index \u00b6 And this is not enough. After finding the lowest and highest point, you have to combine intervals and update the list. Therefore it is necessary to output the lower and upper limits for slicing in the same time. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest >>> find_lowest ( A , 0 ) ( 0 , 0 ) >>> find_lowest ( A , 1 ) ( 1 , 0 ) >>> find_lowest ( A , 3 ) ( 3 , 0 ) >>> find_lowest ( A , 4 ) ( 4 , 0 ) >>> find_lowest ( A , 5 ) ( 5 , 2 ) in case of hi \u00b6 hi is almost the same. There are 3 location where lo is possibly being inserted. That is: Text Only 1 2 3 4 5 6 (7 9) ^ ^ a b a = left b = middle case a: even hi < 7 case b: odd 7 <= hi < 9 Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi < A [ i ]: # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest >>> find_highest ( A , 6 ) ( 6 , 2 ) >>> find_right_lowest ( A , 7 ) ( 7 , 3 ) >>> find_right_lowest ( A , 8 ) ( 8 , 3 ) >>> find_right_lowest ( A , 9 ) ( 9 , 3 ) >>> find_right_lowest ( A , 10 ) ( 10 , 4 ) find maximun length \u00b6 You have to loop through the list of intervals. Check if one interval can combine with the others. During the process, you keep track of the length of the combined interval to see if it has maximun length. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : # process the new_interval here is_this_max = combined_interval [ - 1 ] - combined_interval [ 0 ] if is_this_max > maximun : maximum = is_this_max return i Wrap Everything Up \u00b6 Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 from bisect import bisect as find def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi < A [ i ]: # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals lo , lo_limit = find_lowest ( A , lo ) hi , up_limit = find_highest ( A , hi ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> find_maximum_len ( intervals ) 5 # (5 6 7 8 9) Real Maxium Interval \u00b6 However there is a problem. Everything before is saying that [1,2,3,4] is not consecutive with [5,6,7,8]. But they are actually consecutive. See, [1,2,3,4,5,6,7,8]. Thus the algorithm need some refinement. For any arbitrary interval (lo, hi), you should also consider if (lo-1, hi+1) is consecutive with any other intervals. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 from bisect import bisect as find def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo - 1 : #--- now comparing with lo-1 lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi + 1 < A [ i ]: #--- now comparing with hi+1 # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals lo , lo_limit = find_lowest ( A , lo ) hi , up_limit = find_highest ( A , hi ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> find_maximum_len ( intervals ) 9 # (1 2 3 4 5 6 7 8 9) General Maxium Interval \u00b6 In the previous section you can see that there is only 2 point where we have +-some value to incooperate with the idea of interval-width of 1 . Therefore this can be parameterize and process any arbitrary interval-width. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 from bisect import bisect as find def find_lowest ( A , lo , r = 1 ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo - r : #--- parametrize lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi , r = 1 ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi + r < A [ i ]: #--- parametrize # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def low_and_high ( A , lo , hi , r = 1 ): return find_lowest ( A , lo , r ), find_highest ( A , hi , r ) def find_maximum_len ( intervals , r = 1 ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals ( lo , lo_limit ), ( hi , up_limit ) = low_and_high ( A , lo , hi , r ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> r = 1 >>> find_maximum_len ( intervals , r ) 9 # (1 2 3 4 5 6 7 8 9)","title":"Largest Consecutive Interval"},{"location":"algorithms/Largest%20Consecutive%20Interval/#largest-consecutive-interval","text":"","title":"Largest Consecutive Interval"},{"location":"algorithms/Largest%20Consecutive%20Interval/#contents","text":"Data Structure Divide and Conquer Wrap Everything Up Real Maxium Interval General Maxium Interval Problem: Given a list of intervals, find the largest consecutive interval For Example: 1, 4 9, 10 15, 20 3, 15 This seems easy, you can make a full-length list to keep tract of the frequency of elements from the smallest to the largest. But let say one interval is (1,1e18), then you must make a 1e18-long list to do the task. This doesn't sound efficient. Therefore in order to implement this algorithm efficiently, you have to work directly with intervals.","title":"Contents"},{"location":"algorithms/Largest%20Consecutive%20Interval/#data-structure","text":"I choose list for the sake of simplicity. Since the intervals are just number pairs, you can encode them in a list. Text Only 1 2 3 [ (a b) (c d) ] Here you have a list length=4, contains number of intervals=2 Therefore you can make use of the property of a plain list, you can do binary search, also slicing on it. For example: Text Only 1 2 3 A = [ (1 4) (7 9) ] next interval = (3, 6) = (lo, hi) Lets consider 3=lo. We need know where should 3 belongs to A, namely, is 3 within some interval or outside of any interval. Here you use binary search to find the point of insert. Python 1 2 3 >>> from bisect import bisect as find >>> insert_point = find ( A , 3 ) 1 This is a odd number. odd number means it is within the interval at index 0~1. Because: Text Only 1 2 3 4 5 6 intervals = [ (a b) (c d) ... ] index = [ 0 1 2 3 ... ] index is odd even odd even... odd insert index ==means==> after a even index ==means==> (start, insert, end) Thus by finding whether the index returned by find() is even or edd. You also know whether it is being inserted within or outside a particular interval. That is: Text Only 1 2 3 4 5 A = [ (1 4) (7 9) ] next = (3 6) for 3: find(A, 3) => 1 => odd => within particaular interval for 6: find(A, 6) => 2 => even => outside of any interval As 3 is within particular interval, it is overlapped with that particular interval, thus is consecutive. Therefore you can combine them as one single interval. Text Only 1 new_A = [ (1 6) (7,9) ] This is the basic idea of this algorithm. Here is the implementation.","title":"Data Structure"},{"location":"algorithms/Largest%20Consecutive%20Interval/#divide-and-conquer","text":"But there is more to think about. What about boundary case? How is that exactly to combine intervals and update the list? First of all, let's break things down into smaller parts. Consider the same list as previous section, Text Only 1 2 3 4 A = [ (1 4) (7 9) ] # For arbitrary interval next interval = (lo, hi)","title":"Divide and Conquer"},{"location":"algorithms/Largest%20Consecutive%20Interval/#combine-intervals-and-update-the-list","text":"Before going into the details of handling lo and hi, first you need to know how to do the finishing task. Let say this is the result. (1, 4) combine with (lo, hi), to form a new (1, hi) interval, replacing the old one. Text Only 1 2 3 4 A = [ (1 4) (7 9) ] next = (lo hi) new_A = [ (1 hi) (7 9) ] In general case, there you can divide the list into three parts: Text Only 1 2 3 [ <left intervals> <combined intervals> <righ intervals> ] [ <left intervals> ( 1 lo 4 hi ) <righ intervals> ] What you need to do is to split the list into three parts, replace the middle part with combined intervals, and then put these three parts back together as the new list. In order to achive this, you have to find out the lower and upper limits for slicing. For example, for a completely disjointed new interval: Python 1 2 3 4 5 6 7 8 from bisect import bisect as find A = [ 1 , 4 , 9 , 10 ] new_interval = [ 6 , 7 ] lo_limit = find ( A , 6 ) up_limit = find ( A , 7 ) new_A = A [: lo_limit ] + new_interval + A [ up_limit :] # new_A = A[:2] + new_interval + A[2:] This is only for the case of completely disjointed new interval. The others have different lower and uppper limits. However no matter which cases, the goal is in fact finding the slicing indices of the combined intervals. Text Only 1 2 3 4 5 index = 0 1 1 2 2 3 #------------------------------ # [ (1, lo, 4, hi) (7 9) ] => A[0:2] = combined_intervals","title":"combine intervals and update the list"},{"location":"algorithms/Largest%20Consecutive%20Interval/#in-case-of-lo","text":"First deal with lo. There are 3 location where lo is possibly being inserted. That is: Text Only 1 2 3 4 5 6 7 (1 4) ^ ^ ^ a b c a = left b = middle c = right case a: even lo <= 1 case b: odd 1 <= lo < 4 case c even 4 <= lo Nevertheless, you should ask whether each position indicates consecutiveness or not. Also, where should it be the new lowest point of the interval (lo, hi). Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) i = find ( A , lo ) if i % 2 : # i is odd # case b # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ] else : # i is even # case a # if lo==1, this is True. # if lo<1, this is also True. # if lo<1, it means that (1, 4) is inside (lo, hi), # so the lowest point is lo. if lo <= A [ i ]: lowest = lo # case c else : # A[i-1] < lo # disjoint if A [ i - 1 ] < lo : lowest = lo # connected else : lowest = A [ i - 2 ]","title":"in case of lo"},{"location":"algorithms/Largest%20Consecutive%20Interval/#boundary-case","text":"What if lo is the smallest number and find(A, lo)==0 ? There is a output value of A[i-1], when i=1, it become A[-1] and this is a bug. Also You have to cover this boundary case. Text Only 1 2 3 4 if i==0: # do something else: # do other things Becase of this bisection, situations that you have to included in the else is the following: Text Only 1 2 3 4 5 6 (1 4) ^ ^ b c b = middle c = right case b: odd 1 <= lo < 4 case c even 4 <= lo This means that either connected or disjointed. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ] # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo # connected else : lowest = A [ i - 2 ] return lowest","title":"boundary case"},{"location":"algorithms/Largest%20Consecutive%20Interval/#slicing-index","text":"And this is not enough. After finding the lowest and highest point, you have to combine intervals and update the list. Therefore it is necessary to output the lower and upper limits for slicing in the same time. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest >>> find_lowest ( A , 0 ) ( 0 , 0 ) >>> find_lowest ( A , 1 ) ( 1 , 0 ) >>> find_lowest ( A , 3 ) ( 3 , 0 ) >>> find_lowest ( A , 4 ) ( 4 , 0 ) >>> find_lowest ( A , 5 ) ( 5 , 2 )","title":"slicing index"},{"location":"algorithms/Largest%20Consecutive%20Interval/#in-case-of-hi","text":"hi is almost the same. There are 3 location where lo is possibly being inserted. That is: Text Only 1 2 3 4 5 6 (7 9) ^ ^ a b a = left b = middle case a: even hi < 7 case b: odd 7 <= hi < 9 Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from bisect import bisect as find A = [ ( 1 4 ) ( 7 9 ) ] new = ( lo , hi ) def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi < A [ i ]: # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest >>> find_highest ( A , 6 ) ( 6 , 2 ) >>> find_right_lowest ( A , 7 ) ( 7 , 3 ) >>> find_right_lowest ( A , 8 ) ( 8 , 3 ) >>> find_right_lowest ( A , 9 ) ( 9 , 3 ) >>> find_right_lowest ( A , 10 ) ( 10 , 4 )","title":"in case of hi"},{"location":"algorithms/Largest%20Consecutive%20Interval/#find-maximun-length","text":"You have to loop through the list of intervals. Check if one interval can combine with the others. During the process, you keep track of the length of the combined interval to see if it has maximun length. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : # process the new_interval here is_this_max = combined_interval [ - 1 ] - combined_interval [ 0 ] if is_this_max > maximun : maximum = is_this_max return i","title":"find maximun length"},{"location":"algorithms/Largest%20Consecutive%20Interval/#wrap-everything-up","text":"Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 from bisect import bisect as find def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo : lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi < A [ i ]: # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals lo , lo_limit = find_lowest ( A , lo ) hi , up_limit = find_highest ( A , hi ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> find_maximum_len ( intervals ) 5 # (5 6 7 8 9)","title":"Wrap Everything Up"},{"location":"algorithms/Largest%20Consecutive%20Interval/#real-maxium-interval","text":"However there is a problem. Everything before is saying that [1,2,3,4] is not consecutive with [5,6,7,8]. But they are actually consecutive. See, [1,2,3,4,5,6,7,8]. Thus the algorithm need some refinement. For any arbitrary interval (lo, hi), you should also consider if (lo-1, hi+1) is consecutive with any other intervals. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 from bisect import bisect as find def find_lowest ( A , lo ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo - 1 : #--- now comparing with lo-1 lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi + 1 < A [ i ]: #--- now comparing with hi+1 # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def find_maximum_len ( intervals ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals lo , lo_limit = find_lowest ( A , lo ) hi , up_limit = find_highest ( A , hi ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> find_maximum_len ( intervals ) 9 # (1 2 3 4 5 6 7 8 9)","title":"Real Maxium Interval"},{"location":"algorithms/Largest%20Consecutive%20Interval/#general-maxium-interval","text":"In the previous section you can see that there is only 2 point where we have +-some value to incooperate with the idea of interval-width of 1 . Therefore this can be parameterize and process any arbitrary interval-width. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 from bisect import bisect as find def find_lowest ( A , lo , r = 1 ): i = find ( A , lo ) # boundary case if i == 0 : lowest = 0 , 0 # limit@0 else : # i is odd, case b if i % 2 : # since lo is within the interval, # the lowest point is left boundary of that interval lowest = A [ i - 1 ], i - 1 # i is even, case c else : # disjoint if A [ i - 1 ] < lo - r : #--- parametrize lowest = lo , i # connected else : lowest = A [ i - 2 ], i - 2 return lowest def find_highest ( A , hi , r = 1 ): i = find ( A , hi ) # boundary case if i == len ( A ): highest = hi , len ( A ) else : # i is odd, case b if i % 2 : # since hi is within the interval, # the highest point is right boundary of that interval highest = A [ i ], i # be careful with python indexing # i is even, case a else : if hi + r < A [ i ]: #--- parametrize # disjointed highest = hi , i else : highest = A [ i + 1 ], i + 2 # be careful with python indexing # [ ... hi 7 9 ... ] # ^ find(A,i) return index:i of this position return highest def low_and_high ( A , lo , hi , r = 1 ): return find_lowest ( A , lo , r ), find_highest ( A , hi , r ) def find_maximum_len ( intervals , r = 1 ): maximun = 0 A = [] for new_interval in intervals : lo , hi = new_interval # combine intervals ( lo , lo_limit ), ( hi , up_limit ) = low_and_high ( A , lo , hi , r ) # update the list A = A [: lo_limit ] + [ lo , hi ] + A [ up_limit :] # is this the largest consecutive interval? leng = lo - hi if leng > maximun : maximum = leng return maximun + 1 >>> intervals = [( 1 , 4 ), ( 7 , 9 ), ( 5 , 8 )] >>> r = 1 >>> find_maximum_len ( intervals , r ) 9 # (1 2 3 4 5 6 7 8 9)","title":"General Maxium Interval"},{"location":"blog/","text":"Blog Index \u00b6","title":"Blog"},{"location":"blog/#blog-index","text":"","title":"Blog Index"},{"location":"how_to/","text":"How To Do That? \u00b6 How to setup Animate4K \u00b6","title":"How to"},{"location":"how_to/#how-to-do-that","text":"","title":"How To Do That?"},{"location":"how_to/#how-to-setup-animate4k","text":"","title":"How to setup Animate4K"},{"location":"how_to/How%20to%20Anime4K/","text":"How To Setup Animate4K \u00b6 Animate4K is a AI anime upsampling plugin for video player, its usage is not limited by anime, you can use it on other material although not optimized. Herer I documented how I installed this thing mainly to serve myself. Then i think this may also benefit you. So here it is. 1. Download mpv.net player \u00b6 https://github.com/stax76/mpv.net/releases/ 2. Download Anime4K shader files \u00b6 https://github.com/bloc97/Anime4K/releases 3. Set key bindings for Anime4K \u00b6 Open mpv.net player right click -> Settings -> Open Config Folders Create a new folder named 'shaders' in this config folder Put everything in Anime4K.zip into the root of the folder 'shaders' Edit the input.conf by text editor Insert code in scetion4 to the end of the input.conf ( Here I changed the original key binding CTRL+NUM to CTRL+Alt+NUM to avoid collision ) After that you can use CTRL+Alt+1 , CTRL+Alt+2, CTRL+Alt+3 to toggle Anime4K You can use CTRL+Alt+0 to disable Anime4K 4. Code You need to insert to configuration file \u00b6 Optimized shaders for higher-end GPU Optimized shaders for lower-end GPU (Eg. GTX 1080, RTX 2070, RTX 3060, RX 590, Vega 56, 5700XT, 6600XT) 1 2 3 4 5 6 7 8 CTRL+Alt+1 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode A (HQ)\" CTRL+Alt+2 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode B (HQ)\" CTRL+Alt+3 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode C (HQ)\" CTRL+Alt+4 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode A+A (HQ)\" CTRL+Alt+5 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode B+B (HQ)\" CTRL+Alt+6 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode C+A (HQ)\" CTRL+Alt+0 no-osd change-list glsl-shaders clr \"\"; show-text \"GLSL shaders cleared\" (Eg. GTX 980, GTX 1060, RX 570) 1 2 3 4 5 6 7 8 CTRL+Alt+1 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode A (Fast)\" CTRL+Alt+2 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode B (Fast)\" CTRL+Alt+3 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode C (Fast)\" CTRL+Alt+4 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_Restore_CNN_S.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode A+A (Fast)\" CTRL+Alt+5 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_S.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode B+B (Fast)\" CTRL+Alt+6 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_S.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode C+A (Fast)\" CTRL+Alt+0 no-osd change-list glsl-shaders clr \"\"; show-text \"GLSL shaders cleared\"","title":"How To Setup Animate4K"},{"location":"how_to/How%20to%20Anime4K/#how-to-setup-animate4k","text":"Animate4K is a AI anime upsampling plugin for video player, its usage is not limited by anime, you can use it on other material although not optimized. Herer I documented how I installed this thing mainly to serve myself. Then i think this may also benefit you. So here it is.","title":"How To Setup Animate4K"},{"location":"how_to/How%20to%20Anime4K/#1-download-mpvnet-player","text":"https://github.com/stax76/mpv.net/releases/","title":"1. Download mpv.net player"},{"location":"how_to/How%20to%20Anime4K/#2-download-anime4k-shader-files","text":"https://github.com/bloc97/Anime4K/releases","title":"2. Download Anime4K shader files"},{"location":"how_to/How%20to%20Anime4K/#3-set-key-bindings-for-anime4k","text":"Open mpv.net player right click -> Settings -> Open Config Folders Create a new folder named 'shaders' in this config folder Put everything in Anime4K.zip into the root of the folder 'shaders' Edit the input.conf by text editor Insert code in scetion4 to the end of the input.conf ( Here I changed the original key binding CTRL+NUM to CTRL+Alt+NUM to avoid collision ) After that you can use CTRL+Alt+1 , CTRL+Alt+2, CTRL+Alt+3 to toggle Anime4K You can use CTRL+Alt+0 to disable Anime4K","title":"3. Set key bindings for Anime4K"},{"location":"how_to/How%20to%20Anime4K/#4-code-you-need-to-insert-to-configuration-file","text":"Optimized shaders for higher-end GPU Optimized shaders for lower-end GPU (Eg. GTX 1080, RTX 2070, RTX 3060, RX 590, Vega 56, 5700XT, 6600XT) 1 2 3 4 5 6 7 8 CTRL+Alt+1 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode A (HQ)\" CTRL+Alt+2 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode B (HQ)\" CTRL+Alt+3 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode C (HQ)\" CTRL+Alt+4 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode A+A (HQ)\" CTRL+Alt+5 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode B+B (HQ)\" CTRL+Alt+6 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl\"; show-text \"Anime4K: Mode C+A (HQ)\" CTRL+Alt+0 no-osd change-list glsl-shaders clr \"\"; show-text \"GLSL shaders cleared\" (Eg. GTX 980, GTX 1060, RX 570) 1 2 3 4 5 6 7 8 CTRL+Alt+1 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode A (Fast)\" CTRL+Alt+2 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode B (Fast)\" CTRL+Alt+3 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode C (Fast)\" CTRL+Alt+4 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_Restore_CNN_S.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode A+A (Fast)\" CTRL+Alt+5 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_M.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_S.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode B+B (Fast)\" CTRL+Alt+6 no-osd change-list glsl-shaders set \"~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_M.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Restore_CNN_S.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_S.glsl\"; show-text \"Anime4K: Mode C+A (Fast)\" CTRL+Alt+0 no-osd change-list glsl-shaders clr \"\"; show-text \"GLSL shaders cleared\"","title":"4. Code You need to insert to configuration file"},{"location":"python/Optimising%20Python/","text":"Optimising Python Loops \u00b6 Never Write Recursion \u00b6 Recursion come with cost. Every time you call a function, new resources needed to be allocated. Here is a comparsion of recursive and loop version of the same fibonacci function. First lets see the recursive one. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def recursive_fibonacci(x): return ( recursive_fibonacci(x-1) + recursive_fibonacci(x-2) if x>=2 else 1 if x==1 else 0 if x == 0 else -1 ) recursive_coode = \"\"\" x = [recursive_fibonacci(n) for n in range(30)] \"\"\" import cProfile cProfile.run(recursive_coode) >>> 4356590 function calls (34 primitive calls) in 7.765 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 7.765 7.765 <string>:1(<module>) 1 0.000 0.000 7.765 7.765 <string>:2(<listcomp>) 4356586/30 7.765 0.000 7.765 0.259 Fibonancci.py:6(recursive_fibonacci) 1 0.000 0.000 7.765 7.765 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} And here is the loop one. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def loop_fibonacci(x): # Split the domain of input into 3 parts # x<0 | 0<=x<2 | 2<=x # For each case: if x<2: return 0 if x==0 else 1 if x==1 else -1 # Minimun return from here is x==2 total = 0 one_less = 1 # fibonacci(1) two_less = 0 # fibonacci(0) i = 2 while i <= x: one_less, two_less = one_less + two_less, one_less i += 1 else: return one_less loop_code = \"\"\" y = [loop_fibonacci(n) for n in range(30)] \"\"\" import cProfile cProfile.run(loop_code) >>> 34 function calls in 0.001 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.000 0.000 :1( ) 1 0.000 0.000 0.000 0.000 :2( ) 30 0.000 0.000 0.000 0.000 Fibonancci.py:19(loop_fibonacci) 1 0.000 0.000 0.001 0.001 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Immediately you can see the difference. Loop version takes so little time compare to the recursive one. Because of that, I need to increase the number to where they are costing the same time. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 loop_code = \"\"\" y = [loop_fibonacci(n) for n in range(3750)] \"\"\" import cProfile cProfile.run(loop_code) >>> 3754 function calls in 7.659 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 7.659 7.659 <string>:1(<module>) 1 0.009 0.009 7.659 7.659 <string>:2(<listcomp>) 3750 7.650 0.002 7.650 0.002 Fibonancci.py:19(loop_fibonacci) 1 0.000 0.000 7.659 7.659 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} It shows that loop fibonacci function can make a 3575-element long series while recursive one can only make a 30-element long in the same time span. Let's analysis that. Each function call on any fibonacci, say fibonacci(k), it needs to recalculate everything from 0 to k. Obviously this is a waste. Because we have already obtained some numbers in previous iterations isn't it? Driven by this thought, here is another tips to optimise your loop. Store The Results If You Are Going To Reuse It \u00b6 If you know you are going to reuse a calculation result, you have better store that somewhere! Below is the fibonacci function implemented. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # We have to wrap the fibonacci function into nested loop def loop_fibonacci_series(count_to): book = {0: 0, 1: 1, } # Handle exceptional case first if count_to < 0: return [-1] result = [] put = result.append # Preload the function to speedup for x in range(count_to): if x in book: put(book[x]) else: book[x] = temp = book[x-1] + book[x-2] put(temp) return result loop_series_code = \"\"\" z = [loop_fibonacci_series(3750)] \"\"\" import cProfile cProfile.run(loop_series_code) >>> 3754 function calls in 0.018 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.017 0.017 :1( ) 1 0.015 0.015 0.017 0.017 Fibonancci.py:52(loop_fibonacci_series) 1 0.000 0.000 0.018 0.018 {built-in method builtins.exec} 3750 0.002 0.000 0.002 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} As you can see, the time span reduced a lot. It is almost a million times faster than the recursive version from there! But, still there are rooms for improvement. Preallocating Memory \u00b6 List and Dict in Python are flexble sized. It will grow into bigger size when you need more. But that growing also takes time. As you append more and more items into the list, or the dict, soon it may again fulled and need another growth. When this happens a lot, it takes a lot of time to deal with the memory space arrangement. Therefore given that you know how many resources you need, you can preallocate that amount of memory. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # We have to wrap the fibonacci function into nested loop def loop_fibonacci_series(count_to): book = {n:None for n in range(count_to)} book.update({ 0: 0, 1: 1, }) # Handle exceptional case first if count_to < 0: return [-1] result = [None for n in range(count_to)] # Preallocate memory put = result.append # Preload the function to speedup for x in range(count_to): if x in book: put(book[x]) else: book[x] = temp = book[x-1] + book[x-2] put(temp) return result loop_series_code = f\"\"\" z = [loop_fibonacci_series(count_to)] \"\"\" import cProfile cProfile.run(loop_series_code) >>> 3757 function calls in 0.009 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.009 0.009 :1( ) 1 0.005 0.005 0.009 0.009 Fibonancci.py:86(loop_fibonacci_series) 1 0.001 0.001 0.001 0.001 Fibonancci.py:88( ) 1 0.001 0.001 0.001 0.001 Fibonancci.py:98( ) 1 0.000 0.000 0.009 0.009 {built-in method builtins.exec} 3750 0.002 0.000 0.002 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} 1 0.000 0.000 0.000 0.000 {method 'update' of 'dict' objects} You can see that this is even faster! Say Goodbye To itertools.combinations \u00b6 Let say you need the combinations of some sort of arrangement as the input. Text Only 1 2 def some_func(x, y, z): pass The standard the to use itertools.combinations to do it. For example, Text Only 1 2 3 4 from itertools import combinations for x,y,z in combinations(X, Y, Z): print(some_func(x,y,z)) However this is unoptimised because x and y must reset in every iteration. Despite that say you are counting combinations of numbers. Text Only 1 000 001 010 011 ... You see the value in x rarely changed. This leads to the dicision that nested for loop is still the recommented way to do it right. Combinations: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def use_combinations(count_to): from itertools import combinations f = loop_fibonacci # from previous code result = [] put = result.append for x,y,z in combinations(range(count_to), r=3): # Let say we somehow need to do a little manipluation to the value. # Because x,y,z value reset everytime, you need to calculate this again and again. fx, fy, fz = f(x), f(y), f(z) put((fx, fy, fz)) return result import cProfile cProfile.run(\"use_combinations(100)\") >>> 646804 function calls in 13.517 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.036 0.036 13.516 13.516 <string>:1(<module>) 1 0.769 0.769 13.481 13.481 Fibonancci.py:147(use_combinations) 485100 12.622 0.000 12.622 0.000 Fibonancci.py:20(loop_fibonacci) 1 0.000 0.000 13.517 13.517 {built-in method builtins.exec} 161700 0.089 0.000 0.089 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Nested Loop: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def use_nest(count_to): X = range(count_to) f = loop_fibonacci result = [] put = result.append for x in (X): # Let say we somehow need to do a little manipluation to the value. # It will just stay until the next iteration, before that, never gonna changed. # Thus save us a significant amount of time. fx = f(x) for y in range(x+1, count_to): fy = f(y) for z in range(y+1, count_to): fz = f(z) put((fx, fy, fz)) import cProfile cProfile.run(\"use_nest(100)\") >>> 328454 function calls in 7.097 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.030 0.030 7.097 7.097 <string>:1(<module>) 1 0.413 0.413 7.067 7.067 Fibonancci.py:122(use_nest) 166750 6.565 0.000 6.565 0.000 Fibonancci.py:20(loop_fibonacci) 1 0.000 0.000 7.097 7.097 {built-in method builtins.exec} 161700 0.088 0.000 0.088 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Well, the time span speaks for itself.","title":"Optimising Python Loops"},{"location":"python/Optimising%20Python/#optimising-python-loops","text":"","title":"Optimising Python Loops"},{"location":"python/Optimising%20Python/#never-write-recursion","text":"Recursion come with cost. Every time you call a function, new resources needed to be allocated. Here is a comparsion of recursive and loop version of the same fibonacci function. First lets see the recursive one. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def recursive_fibonacci(x): return ( recursive_fibonacci(x-1) + recursive_fibonacci(x-2) if x>=2 else 1 if x==1 else 0 if x == 0 else -1 ) recursive_coode = \"\"\" x = [recursive_fibonacci(n) for n in range(30)] \"\"\" import cProfile cProfile.run(recursive_coode) >>> 4356590 function calls (34 primitive calls) in 7.765 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 7.765 7.765 <string>:1(<module>) 1 0.000 0.000 7.765 7.765 <string>:2(<listcomp>) 4356586/30 7.765 0.000 7.765 0.259 Fibonancci.py:6(recursive_fibonacci) 1 0.000 0.000 7.765 7.765 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} And here is the loop one. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def loop_fibonacci(x): # Split the domain of input into 3 parts # x<0 | 0<=x<2 | 2<=x # For each case: if x<2: return 0 if x==0 else 1 if x==1 else -1 # Minimun return from here is x==2 total = 0 one_less = 1 # fibonacci(1) two_less = 0 # fibonacci(0) i = 2 while i <= x: one_less, two_less = one_less + two_less, one_less i += 1 else: return one_less loop_code = \"\"\" y = [loop_fibonacci(n) for n in range(30)] \"\"\" import cProfile cProfile.run(loop_code) >>> 34 function calls in 0.001 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.000 0.000 :1( ) 1 0.000 0.000 0.000 0.000 :2( ) 30 0.000 0.000 0.000 0.000 Fibonancci.py:19(loop_fibonacci) 1 0.000 0.000 0.001 0.001 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Immediately you can see the difference. Loop version takes so little time compare to the recursive one. Because of that, I need to increase the number to where they are costing the same time. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 loop_code = \"\"\" y = [loop_fibonacci(n) for n in range(3750)] \"\"\" import cProfile cProfile.run(loop_code) >>> 3754 function calls in 7.659 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 7.659 7.659 <string>:1(<module>) 1 0.009 0.009 7.659 7.659 <string>:2(<listcomp>) 3750 7.650 0.002 7.650 0.002 Fibonancci.py:19(loop_fibonacci) 1 0.000 0.000 7.659 7.659 {built-in method builtins.exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} It shows that loop fibonacci function can make a 3575-element long series while recursive one can only make a 30-element long in the same time span. Let's analysis that. Each function call on any fibonacci, say fibonacci(k), it needs to recalculate everything from 0 to k. Obviously this is a waste. Because we have already obtained some numbers in previous iterations isn't it? Driven by this thought, here is another tips to optimise your loop.","title":"Never Write Recursion"},{"location":"python/Optimising%20Python/#store-the-results-if-you-are-going-to-reuse-it","text":"If you know you are going to reuse a calculation result, you have better store that somewhere! Below is the fibonacci function implemented. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # We have to wrap the fibonacci function into nested loop def loop_fibonacci_series(count_to): book = {0: 0, 1: 1, } # Handle exceptional case first if count_to < 0: return [-1] result = [] put = result.append # Preload the function to speedup for x in range(count_to): if x in book: put(book[x]) else: book[x] = temp = book[x-1] + book[x-2] put(temp) return result loop_series_code = \"\"\" z = [loop_fibonacci_series(3750)] \"\"\" import cProfile cProfile.run(loop_series_code) >>> 3754 function calls in 0.018 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.017 0.017 :1( ) 1 0.015 0.015 0.017 0.017 Fibonancci.py:52(loop_fibonacci_series) 1 0.000 0.000 0.018 0.018 {built-in method builtins.exec} 3750 0.002 0.000 0.002 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} As you can see, the time span reduced a lot. It is almost a million times faster than the recursive version from there! But, still there are rooms for improvement.","title":"Store The Results If You Are Going To Reuse It"},{"location":"python/Optimising%20Python/#preallocating-memory","text":"List and Dict in Python are flexble sized. It will grow into bigger size when you need more. But that growing also takes time. As you append more and more items into the list, or the dict, soon it may again fulled and need another growth. When this happens a lot, it takes a lot of time to deal with the memory space arrangement. Therefore given that you know how many resources you need, you can preallocate that amount of memory. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # We have to wrap the fibonacci function into nested loop def loop_fibonacci_series(count_to): book = {n:None for n in range(count_to)} book.update({ 0: 0, 1: 1, }) # Handle exceptional case first if count_to < 0: return [-1] result = [None for n in range(count_to)] # Preallocate memory put = result.append # Preload the function to speedup for x in range(count_to): if x in book: put(book[x]) else: book[x] = temp = book[x-1] + book[x-2] put(temp) return result loop_series_code = f\"\"\" z = [loop_fibonacci_series(count_to)] \"\"\" import cProfile cProfile.run(loop_series_code) >>> 3757 function calls in 0.009 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.009 0.009 :1( ) 1 0.005 0.005 0.009 0.009 Fibonancci.py:86(loop_fibonacci_series) 1 0.001 0.001 0.001 0.001 Fibonancci.py:88( ) 1 0.001 0.001 0.001 0.001 Fibonancci.py:98( ) 1 0.000 0.000 0.009 0.009 {built-in method builtins.exec} 3750 0.002 0.000 0.002 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} 1 0.000 0.000 0.000 0.000 {method 'update' of 'dict' objects} You can see that this is even faster!","title":"Preallocating Memory"},{"location":"python/Optimising%20Python/#say-goodbye-to-itertoolscombinations","text":"Let say you need the combinations of some sort of arrangement as the input. Text Only 1 2 def some_func(x, y, z): pass The standard the to use itertools.combinations to do it. For example, Text Only 1 2 3 4 from itertools import combinations for x,y,z in combinations(X, Y, Z): print(some_func(x,y,z)) However this is unoptimised because x and y must reset in every iteration. Despite that say you are counting combinations of numbers. Text Only 1 000 001 010 011 ... You see the value in x rarely changed. This leads to the dicision that nested for loop is still the recommented way to do it right. Combinations: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def use_combinations(count_to): from itertools import combinations f = loop_fibonacci # from previous code result = [] put = result.append for x,y,z in combinations(range(count_to), r=3): # Let say we somehow need to do a little manipluation to the value. # Because x,y,z value reset everytime, you need to calculate this again and again. fx, fy, fz = f(x), f(y), f(z) put((fx, fy, fz)) return result import cProfile cProfile.run(\"use_combinations(100)\") >>> 646804 function calls in 13.517 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.036 0.036 13.516 13.516 <string>:1(<module>) 1 0.769 0.769 13.481 13.481 Fibonancci.py:147(use_combinations) 485100 12.622 0.000 12.622 0.000 Fibonancci.py:20(loop_fibonacci) 1 0.000 0.000 13.517 13.517 {built-in method builtins.exec} 161700 0.089 0.000 0.089 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Nested Loop: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def use_nest(count_to): X = range(count_to) f = loop_fibonacci result = [] put = result.append for x in (X): # Let say we somehow need to do a little manipluation to the value. # It will just stay until the next iteration, before that, never gonna changed. # Thus save us a significant amount of time. fx = f(x) for y in range(x+1, count_to): fy = f(y) for z in range(y+1, count_to): fz = f(z) put((fx, fy, fz)) import cProfile cProfile.run(\"use_nest(100)\") >>> 328454 function calls in 7.097 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.030 0.030 7.097 7.097 <string>:1(<module>) 1 0.413 0.413 7.067 7.067 Fibonancci.py:122(use_nest) 166750 6.565 0.000 6.565 0.000 Fibonancci.py:20(loop_fibonacci) 1 0.000 0.000 7.097 7.097 {built-in method builtins.exec} 161700 0.088 0.000 0.088 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} Well, the time span speaks for itself.","title":"Say Goodbye To itertools.combinations"},{"location":"review_book/","text":"Book Review \u00b6 Mathematics \u00b6 Title Edition Author Pages Review URL Engineering Mathematics 8 K.A. Stroud, Dexter J. Booth 1180","title":"Book Review"},{"location":"review_book/#book-review","text":"","title":"Book Review"},{"location":"review_book/#mathematics","text":"Title Edition Author Pages Review URL Engineering Mathematics 8 K.A. Stroud, Dexter J. Booth 1180","title":"Mathematics"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/","text":"Engineering Mathematics by Booth and Stroud - A Pedagogic Approach Toward Mathematical Maturity \u00b6 I spended 1.5 month reading and working out this 1100-pages book: Title \u00b6 Engineering Mathematics by Booth and Stroud. Here is what I think about this book. Coverage \u00b6 The book has a broad coverage across a lot of topics. precalculus addition, multiplication, associativity, distributivity, commutativity, linearity identity, inverse bin, oct, dec, hex number system and their manipulations sin, cos, tan, cosec, sec, cotan, sinh, cosh, tanh, and their inverse binomial expansion complex number and e^ix = cos(x) + isin(x) complex trigonomatric functino(sin and sinh are connected!!) linear algebra vector, linearity, linear combination matrix, determinant Eigenvalue and eigenvector Hamilton-Caley theorem calculus limt (no delta epsilon theorem) derivative, partial derivative and their applications integral, multiple integral and theor applications first-order, second-order differential equation LaPalace Transform and n-order differential equation sequences and series, converge and diverge numerical methods such as the usage of binomial and taylor expansion in integration statics mean, mode, median deviation, standard variation Bernoulli distribution, Pisson distribution, and their relationship standard normal possibility distribution What made this book extrodinaly? \u00b6 real self-contained \u00b6 The authors put a great effort into the book to make it as pagmatic and pedagogic as possible. So far I have never seen a book can reach this level of completeness, namely, self-contained and pain-free. But this judgement might have a bias due to the fact that this is my second expose to calculus. And in fact in some topics the authors are just throwing equations to the readers without explaining them. I think real beginers might find confusion in those topics. Still, including those sections in the mist, the book as a whole no doubt reached a unpreccedented level of self-containness. How many of students in the world is suffering in the abyss of \"the proof is left as exercise\"? That is a awful attitude in writing a book, especially a textbook. First is because student have already paid the money for the tution, or the cost of the book, still, those unfriendly, selfish and greedy authors want more from the students. Second, this approach is proven not helpful at all and its existence should be elinminated. For further details, take a look at this 2010 research. Alfieri, L., Brooks, P. J., Aldrich, N. J., & Tenenbaum, H. R. (2011). Does discovery-based instruction enhance learning? Journal of Educational Psychology, 103(1), 1\u201318. Discovery learning approaches to education have recently come under scrutiny... The findings suggest that unassisted discovery does not benefit learners, whereas feedback, worked examples, scaffolding, and elicited explanations do. A mathematician has created a teaching method that\u2019s proving there\u2019s no such thing as a bad math student no-bullshit proofs \u00b6 Greatfully, there is no such do-your-exercise bullshit in this book. Proofs and answers are all worked out by the authors . Student can follow these learning material with ease. Also proofs provided are simple and intuitive as hell. Some not-so-important proof are completely omited from the text. Which avoid digress from the main storyline. This will be discussed later. learn through examples \u00b6 Unlike those exampleless math textbooks, this textbook is basically composited by a ton of worked out examples. Starting with some simple ones, then some variation of the patterns, and then introducing more advanced concept and skill through more examples. Usually 3 examples for 1 concept. The answers are all step-by-step guide. I believe that human learn better with examples rather than boring text and axioms. Just like researchs failed in making artifical intellegence in the early days, but then they gain a great success these days as soon as they realise that it is the matter of the volume of examples i.e. training data, and iterations. Most textbook failed at teaching anything but this book is different. barrier-free \u00b6 But I would argue that the examples and problems are a bit too easy. If you are pusuring competitive exams, this may not for you. But think of this, what is the point of making examples and problems insanely difficult to a beginer? Books for beginers should help student to build their confidence and attitude toware the subject instead of torturing. It is meaningless to make the learning curve so steep. It can only be a barrier instead of a ladder. You are doing so to keep people out from knowledge and keep the unknowledged and poverty. chapters are ordered structurally \u00b6 Obviously the authors sorted the chapters intentionally just like the my favorite mentioned above. I can see there is a clear dependence tree made behind the scene. In particular, You don't need to know integral before you do partital derivative. Also you need to know both integral and derivative to do differential equation. And there is another consideration: clustering the related topics so that reader will can carry on to more advance topic before they forget. This is the order of chapters after considering the dependence tree: derivative partial derivative integral multiple integral differential equation While other \"formal\" calculus is like: derivative integral differential equation partial derivative multiple integral differential equation This kind of ordering obviously did not account for the memory loss nature of human readers. And in fact this happens to me. I almost forget anything from the derivative while I was looking at partial derivate, after the lengthy chapter of integral and applications of integral. almost typo-free \u00b6 I worked out almost pages and the examples, found almost no typo. Except where placese should be \"cosecant\", are left empty. Mystery. What is lacking in the book? \u00b6 Obviously there are handful of advanced topics are absent from this book. Especiallly those you are able to find in other commersial university calculus textbook. rigious establishment of the concept \"limit\" and Delta-Epsilon-Theorem but I will argue that this is totally unnecessary since the concept of limit is easy, it is just the mathematical definition is written ugly. the fundamental theorem of calculus but the authurs does introduc it conceptually and without the name of it. I would say acceptible. My favorite \u00b6 The introduction to complex number and the following hyperbolic function are fantasic. First they introduce trigonometry function such as sin cos tan. Then complex number. After that there is the Taylor Expansion of sin cos. So reader will know that complex number can be expressed in the form of Text Only 1 r[ cos(x) + isin(x) ]. Next, they introduce the concept of add and even function. Gradually carry to the point that hyperbolic sine and cosine is the odd and even part of e^ix. This conneced complex number to hyperboic functions. Lastly, what if we do sinh(ix) instead of sinh(x)? After working out, turn out hyperbolic function with a complex number being inputed is normal trigonometry. The author spend a great effor to show me that Text Only 1 [trigonometry - complex number - hyperbolic function] are all connected. At the end I am shocked by this discovery. Now I feel I finally understand what a hyperbolic function is. This is a Ah-Ha moment that other formal calculus book fail to gave me. Summary \u00b6 Engineering Mathematic by Booth and Stroud is a epic unconventional book for you to learn and refresh the basics of college level mathematics. It covers a lot of topics and kindly provides insane amount of worked example for readers. This book is the corner stone in math pedagogy. No one can unsee this book after seeing it.","title":"Engineering Mathematics by Booth and Stroud - A Pedagogic Approach Toward Mathematical Maturity"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#engineering-mathematics-by-booth-and-stroud-a-pedagogic-approach-toward-mathematical-maturity","text":"I spended 1.5 month reading and working out this 1100-pages book:","title":"Engineering Mathematics by Booth and Stroud - A Pedagogic Approach Toward Mathematical Maturity"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#title","text":"Engineering Mathematics by Booth and Stroud. Here is what I think about this book.","title":"Title"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#coverage","text":"The book has a broad coverage across a lot of topics. precalculus addition, multiplication, associativity, distributivity, commutativity, linearity identity, inverse bin, oct, dec, hex number system and their manipulations sin, cos, tan, cosec, sec, cotan, sinh, cosh, tanh, and their inverse binomial expansion complex number and e^ix = cos(x) + isin(x) complex trigonomatric functino(sin and sinh are connected!!) linear algebra vector, linearity, linear combination matrix, determinant Eigenvalue and eigenvector Hamilton-Caley theorem calculus limt (no delta epsilon theorem) derivative, partial derivative and their applications integral, multiple integral and theor applications first-order, second-order differential equation LaPalace Transform and n-order differential equation sequences and series, converge and diverge numerical methods such as the usage of binomial and taylor expansion in integration statics mean, mode, median deviation, standard variation Bernoulli distribution, Pisson distribution, and their relationship standard normal possibility distribution","title":"Coverage"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#what-made-this-book-extrodinaly","text":"","title":"What made this book extrodinaly?"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#real-self-contained","text":"The authors put a great effort into the book to make it as pagmatic and pedagogic as possible. So far I have never seen a book can reach this level of completeness, namely, self-contained and pain-free. But this judgement might have a bias due to the fact that this is my second expose to calculus. And in fact in some topics the authors are just throwing equations to the readers without explaining them. I think real beginers might find confusion in those topics. Still, including those sections in the mist, the book as a whole no doubt reached a unpreccedented level of self-containness. How many of students in the world is suffering in the abyss of \"the proof is left as exercise\"? That is a awful attitude in writing a book, especially a textbook. First is because student have already paid the money for the tution, or the cost of the book, still, those unfriendly, selfish and greedy authors want more from the students. Second, this approach is proven not helpful at all and its existence should be elinminated. For further details, take a look at this 2010 research. Alfieri, L., Brooks, P. J., Aldrich, N. J., & Tenenbaum, H. R. (2011). Does discovery-based instruction enhance learning? Journal of Educational Psychology, 103(1), 1\u201318. Discovery learning approaches to education have recently come under scrutiny... The findings suggest that unassisted discovery does not benefit learners, whereas feedback, worked examples, scaffolding, and elicited explanations do. A mathematician has created a teaching method that\u2019s proving there\u2019s no such thing as a bad math student","title":"real self-contained"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#no-bullshit-proofs","text":"Greatfully, there is no such do-your-exercise bullshit in this book. Proofs and answers are all worked out by the authors . Student can follow these learning material with ease. Also proofs provided are simple and intuitive as hell. Some not-so-important proof are completely omited from the text. Which avoid digress from the main storyline. This will be discussed later.","title":"no-bullshit proofs"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#learn-through-examples","text":"Unlike those exampleless math textbooks, this textbook is basically composited by a ton of worked out examples. Starting with some simple ones, then some variation of the patterns, and then introducing more advanced concept and skill through more examples. Usually 3 examples for 1 concept. The answers are all step-by-step guide. I believe that human learn better with examples rather than boring text and axioms. Just like researchs failed in making artifical intellegence in the early days, but then they gain a great success these days as soon as they realise that it is the matter of the volume of examples i.e. training data, and iterations. Most textbook failed at teaching anything but this book is different.","title":"learn through examples"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#barrier-free","text":"But I would argue that the examples and problems are a bit too easy. If you are pusuring competitive exams, this may not for you. But think of this, what is the point of making examples and problems insanely difficult to a beginer? Books for beginers should help student to build their confidence and attitude toware the subject instead of torturing. It is meaningless to make the learning curve so steep. It can only be a barrier instead of a ladder. You are doing so to keep people out from knowledge and keep the unknowledged and poverty.","title":"barrier-free"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#chapters-are-ordered-structurally","text":"Obviously the authors sorted the chapters intentionally just like the my favorite mentioned above. I can see there is a clear dependence tree made behind the scene. In particular, You don't need to know integral before you do partital derivative. Also you need to know both integral and derivative to do differential equation. And there is another consideration: clustering the related topics so that reader will can carry on to more advance topic before they forget. This is the order of chapters after considering the dependence tree: derivative partial derivative integral multiple integral differential equation While other \"formal\" calculus is like: derivative integral differential equation partial derivative multiple integral differential equation This kind of ordering obviously did not account for the memory loss nature of human readers. And in fact this happens to me. I almost forget anything from the derivative while I was looking at partial derivate, after the lengthy chapter of integral and applications of integral.","title":"chapters are ordered structurally"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#almost-typo-free","text":"I worked out almost pages and the examples, found almost no typo. Except where placese should be \"cosecant\", are left empty. Mystery.","title":"almost typo-free"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#what-is-lacking-in-the-book","text":"Obviously there are handful of advanced topics are absent from this book. Especiallly those you are able to find in other commersial university calculus textbook. rigious establishment of the concept \"limit\" and Delta-Epsilon-Theorem but I will argue that this is totally unnecessary since the concept of limit is easy, it is just the mathematical definition is written ugly. the fundamental theorem of calculus but the authurs does introduc it conceptually and without the name of it. I would say acceptible.","title":"What is lacking in the book?"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#my-favorite","text":"The introduction to complex number and the following hyperbolic function are fantasic. First they introduce trigonometry function such as sin cos tan. Then complex number. After that there is the Taylor Expansion of sin cos. So reader will know that complex number can be expressed in the form of Text Only 1 r[ cos(x) + isin(x) ]. Next, they introduce the concept of add and even function. Gradually carry to the point that hyperbolic sine and cosine is the odd and even part of e^ix. This conneced complex number to hyperboic functions. Lastly, what if we do sinh(ix) instead of sinh(x)? After working out, turn out hyperbolic function with a complex number being inputed is normal trigonometry. The author spend a great effor to show me that Text Only 1 [trigonometry - complex number - hyperbolic function] are all connected. At the end I am shocked by this discovery. Now I feel I finally understand what a hyperbolic function is. This is a Ah-Ha moment that other formal calculus book fail to gave me.","title":"My favorite"},{"location":"review_book/Engineering%20Mathematics%20By%20K.A.%20Stroud%2C%20Dexter%20J.%20Booth/#summary","text":"Engineering Mathematic by Booth and Stroud is a epic unconventional book for you to learn and refresh the basics of college level mathematics. It covers a lot of topics and kindly provides insane amount of worked example for readers. This book is the corner stone in math pedagogy. No one can unsee this book after seeing it.","title":"Summary"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/","text":"\u8b80\u66f8\u5831\u544a\uff1a\u6467\u6bc0\u7d93\u6fdf\uff0c\u523b\u4e0d\u5bb9\u7de9 \u00b6 National Academy of Sciences. 2020. Climate Change: Evidence and Causes: Update 2020. Washington, DC: The National Academies Press. https://doi.org/10.17226/25733. \u6587\u79d1\u4ed4\u6700\u597d\u60f3\u770b\u5230\u7684\u8b49\u64da\u767c\u751f\u4e86\uff01\uff01\uff01\u90a3\u5c31\u662f\u8b49\u660e\u4e86\u4eba\u985e\u4e26\u6c92\u6709\u4ee4\u4e16\u754c\u8b8a\u5f97\u66f4\u597d\u7684\u9019\u500b\u4e8b\u5be6\uff0c\u76f4\u63a5\u64bc\u52d5\u4e86\u4eba\u6587\u5b78\u79d1\u7684\u5b97\u6559\u6839\u57fa\u3002 \u9019\u662f\u7f8e\u570b\u570b\u5bb6\u79d1\u5b78\u9662\u806f\u540c\u82f1\u570b\u7687\u5bb6\u5b78\u6703\u5171\u540c\u51fa\u7248\u768420\u9801\u5c0f\u518a\u5b50\uff0c\u5716\u6587\u4e26\u8302\u5730\u89e3\u91cb\u4e86\u4eba\u70ba\u6c23\u5019\u8b8a\u5316\u7684\u524d\u56e0\u5f8c\u679c\uff0c\u7576\u4e2d\u53cd\u99c1\u4e86\u5f88\u591a\u7591\u60d1\u3002 1. \u5168\u7403\u6696\u5316\u662f\u5426\u7576\u771f\uff1f \u00b6 \u81ea1850\u5e74\u958b\u59cb\u7684\u6c23\u6eab\u76e3\u5bdf\u6578\u64da\u6307\u51fa\u4e86\u660e\u78ba\u7684\u6c23\u6eab\u4e0a\u6607\u30021950\u5e74\u4ee3\u81ea\u4eca\u7684\u5e73\u5747\u6c23\u6eab\u5df2\u7d93\u4e0a\u5347\u4e86\u651d\u6c0f1.0\u5ea6\u3002\u5168\u7403\u6696\u5316\u5df2\u662f\u7121\u5bb9\u7f6e\u7591\u3002 2. \u4f60\u9ede\u77e5\u4f60\u4eba\u70ba\u5168\u7403\u6696\u5316\uff1f\u8b1b\u5c31\u4fc2\uff1f \u00b6 \u79d1\u5b78\u5bb6\u85c9\u7531\u7269\u7406\u6cd5\u5247\u3001\u6c23\u5019\u6a21\u578b\u4ee5\u53ca\u89c0\u5bdf\u6578\u64da\u7b49\u5f97\u4ee5\u78ba\u8a8d\u5728\u5168\u7403\u6696\u5316\u4e00\u4e8b\u4e4b\u4e0a\uff0c\u4eba\u70ba\u56e0\u7d20\u4f54\u4e86\u5f88\u91cd\u8981\u7684\u90e8\u4efd\u3002 \u81ea19\u4e16\u7d00\u4e2d\u8449\uff0c\u79d1\u5b78\u5bb6\u5df2\u7d93\u77e5\u9053CO2\u70ba\u6eab\u5ba4\u6c23\u9ad4\u3002\u5728\u76f4\u63a5\u4ee5\u53ca\u9593\u63a5\u5730\u6e2c\u91cf\u51b0\u5c64\u4e2d\u7684CO2\u542b\u91cf\uff0c\u79d1\u5b78\u5bb6\u5f97\u77e5\u5f9e1800\u5e74\u81f3\u4eca\u5927\u6c23\u4e2dCO2\u6fc3\u5ea6\u4e0a\u5347\u4e8640%\u3002\u540c\u4f4d\u7d20\u7684\u5206\u6790\u986f\u793a\u662f\u9019\u662f\u4eba\u70ba\u7684\u3002 \u7531\u81ea\u7136\u767c\u751f\u6703\u5c0e\u81f4\u6c23\u5019\u8b8a\u5316\u7684\u592a\u967d\u529f\u7387\u3001\u706b\u5c71\u7206\u767c\u3001\u62c9\u59ae\u5a1c\u73fe\u8c61\u7b49\u7b49\uff0c\u90fd\u7121\u6cd5\u89e3\u91cb\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u73fe\u8c61\u3002 3. CO2\u4e00\u5411\u90fd\u97ff\u5927\u6c23\u5165\u9762\uff0c\u95dc\u6211\u54a9\u4e8b\uff1f \u00b6 \u751f\u7269\u6b7b\u7269\u90fd\u727d\u6d89\u5728CO2\u7684\u751f\u6210\u548c\u56fa\u5b9a\u4e4b\u4e0a\u3002\u706b\u5c71\u7206\u767c\u770b\u8d77\u4f86\u4f54\u5f88\u5927\u4efd\u984d\uff0c\u4f46\u6bd4\u8d77\u5316\u77f3\u71c3\u6599\u7684\u6392\u653e\uff0c\u539f\u4f86\u706b\u5c71\u7206\u767c\u53ea\u67091%\u7684\u898f\u6a21\u3002 \u5728\u81ea\u7136\u754c\uff0c\u672c\u8eabCO2\u5c31\u6703\u4ee5\u751f\u5316\u6a5f\u5236\u4f86\u8abf\u7bc0\uff0c\u4f8b\u5982\u6709\u5b54\u87f2\u5438\u53d6CO2\u4f86\u5f62\u6210\u78b3\u9178\u9223\u5916\u6bbc\uff0c\u5f9e\u9762\u300c\u56fa\u78b3\u300d\u3002 \u4f46\u4e8b\u5be6\u986f\u793aCO2\u6fc3\u5ea6\u4e0a\u5347\u7684\u5927\u90e8\u4efd\u90fd\u662f\u4f86\u81ea\u65bc1970\u5e74\u4e4b\u5f8c\u7684\u6642\u671f\uff0c\u6b63\u6b63\u4e5f\u662f\u5168\u7403\u80fd\u6e90\u6d88\u8017\u6025\u5347\u7684\u6642\u671f\u3002\u89c0\u5bdf\u7576\u4e2dC13 C14\u7684\u540c\u4f4d\u7d20\u6bd4\u4f8b\uff0c\u4ee5\u53ca\u5927\u6c23\u4e2d\u6c27\u6c23\u542b\u91cf\u7684\u4e0b\u964d\uff0c\u79d1\u5b78\u5bb6\u53ef\u4ee5\u80af\u5b9a\u90a3\u4e9bCO2\u90fd\u4e0d\u662f\u4f86\u81ea\u65bc\u81ea\u7136\u754c\u7684\u3002 \u5728\u6975\u5730\u51b0\u5c64\u62bd\u82af\u7684\u5316\u9a5f\u7d50\u679c\u66f4\u52a0\u986f\u793a\uff0c\u73fe\u5728\u7684CO2\u6fc3\u5ea6\u70ba\u904e\u53bb80\u842c\u5e74\u9593\u6700\u9ad8\u7684\u6c34\u5e73\u3002 4. \u592a\u967d\u5728\u5168\u7403\u6696\u5316\u4e0a\u626e\u6f14\u4e00\u500b\u91cd\u8981\u89d2\u8272\u3002 \u00b6 \u592a\u967d\u8f38\u51fa\u529f\u7387\u6709\u4e00\u500b\u4ee511\u5e74\u70ba\u671f\u7684\u8d77\u4f0f\uff0c\u4f46\u90fd\u4e0d\u8db3\u4ee5\u89e3\u91cb\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u3002\u56e0\u70ba\u592a\u967d\u8f38\u51fa\u7684\u8d77\u4f0f\u5341\u5206\u7a69\u5b9a\uff0c\u5c31\u4ee5\u904e\u53bb\u5e7e\u5341\u5e74\u79d1\u5b78\u5bb6\u4ee5\u885b\u661f\u76f4\u63a5\u89c0\u5bdf\u592a\u967d\u6240\u7d2f\u7a4d\u7684\u6578\u64da\uff0c\u90fd\u7121\u767c\u73fe\u6709\u7dda\u6027\u5411\u4e0a\u7684\u6301\u7e8c\u589e\u52a0\u8da8\u52e2\u3002\u66f4\u4e0d\u7528\u8aaa\u7684\u662f\uff0c\u90a3\u529f\u7387\u8d77\u4f0f\u7684\u9ad8\u4f4e\u53ea\u67090.1%\u5dee\u8ddd\u3002 \u800c\u64da\u79d1\u5b78\u5bb6\u5c0d\u5927\u6c23\u7684\u4e86\u89e3\uff0c\u5982\u679c\u592a\u967d\u529f\u7387\u5c0e\u81f4\u5168\u7403\u6696\u5316\u7684\u8a71\uff0c\u5e73\u6d41\u5c64\u4ee5\u4e0a\u6574\u9ad4\u7684\u5927\u6c23\u6eab\u5ea6\u4e00\u5b9a\u6703\u63d0\u9ad8\u3002\u4f46\u73fe\u5728\u4e8b\u5be6\u662f\u53ea\u6709\u5c0d\u6d41\u5c64\u3001\u5927\u6c23\u6700\u5e95\u5c64\u7684\u6eab\u5ea6\u63d0\u9ad8\u800c\u5df2\uff0c\u9019\u73fe\u8c61\u6b63\u6b63\u543b\u5408\u4e86\u4eba\u70ba\u5168\u7403\u6696\u5316\u7684\u300c\u6307\u7d0b\u300d\u3002 5. \u6c23\u5019\u5728\u5730\u7403\u6b77\u53f2\u4e0a\u4e00\u76f4\u90fd\u5728\u8b8a\u5316\uff0c\u6709\u54a9\u503c\u5f97\u95dc\u6ce8\uff1f \u00b6 \u91cd\u9ede\u4e0d\u662f\u300c\u6703\u300d\u8b8a\u5316\uff0c\u800c\u662f\u8b8a\u5316\u7684\u300c\u901f\u5ea6\u300d\u3002\u73fe\u5728\u5730\u7403\u6b63\u8655\u65bc\u51b0\u6cb3\u6642\u671f\uff0c\u7576\u523b\u662f10\u842c\u5e74\u5bd2\u51b7\u671f\u904e\u5f8c\u77ed\u66ab\u76841\u842c\u5e74\u9593\u51b0\u671f\uff0c\u4f46\u4e0d\u4ee3\u8868\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u7684\u6b63\u5e38\u3002\u9593\u51b0\u671f\u524d\u5f8c\u7684\u5e73\u5747\u6c23\u6eab\u6709\u651d\u6c0f4\u81f35\u5ea6\u843d\u5dee\uff0c\u9019\u662f\u57281\u842c\u5e74\u9593\u7684\u8b8a\u5316\u3002\u4f46\u73fe\u5728\u5de5\u696d\u9769\u547d\u5f8c\u7684200\u5e74\u5c31\u5df2\u7d93\u4e0a\u5347\u4e861\u5ea6\uff0cCO2\u6fc3\u5ea6\u4ea6\u4e86\u589e\u52a040%\uff0c\u9019\u7d55\u4e0d\u300c\u81ea\u7136\u300d\u3002 \u6975\u5730\u51b0\u5c64\u62bd\u82af\u7d50\u679c\u986f\u793a\uff0c\u904e\u53bb80\u842c\u5e74\u9593\u7684CO2\u6fc3\u5ea6\u90fd\u7dad\u6301\u5728170\u5230300ppm\u4e4b\u9593\uff0c\u7136\u800c\u4eba\u985e\u53ea\u7528\u4e86200\u5e74\u5c31\u628a\u5b83\u63d0\u5347\u81f3400ppm\u4e86\u3002\u7e31\u4f7f500\u842c\u5e74\u524d\u5730\u7403\u7684CO2\u6fc3\u5ea6\u66fe\u70ba1000ppm\uff0c\u4f46\u7576\u6642\u7684\u5e73\u5747\u6c23\u6eab\u6bd4\u73fe\u5728\u9ad810\u5ea6\uff0c\u6d77\u5e73\u9762\u9ad860\u7c73\uff0c\u4f60\u78ba\u5b9a\u80fd\u5920\u5b58\u6d3b\u5728\u9019\u7a2e\u6c23\u5019\u55ce\uff1f 6. \u7269\u6975\u5fc5\u53cd\uff0c\u66f4\u591a\u7684CO2\u4e0d\u4ee3\u8868\u66f4\u9ad8\u7684\u6c23\u6eab\u3002 \u00b6 \u5b8c\u5168\u8352\u8b2c\u3002\u6eab\u5ba4\u6c23\u9ad4\u5438\u6536\u7d05\u5916\u7dda\u4f86\u5132\u71b1\uff0c\u66f4\u591a\u7684\u6eab\u5ba4\u6c23\u9ad4\u53ea\u662f\u4ee3\u8868\u4e86\u5b83\u80fd\u5920\u5438\u66f4\u591a\u71b1\u3002 7. \u51ac\u5929\u4ecd\u7136\u5f88\u51cd\uff0c\u8aaa\u597d\u7684\u5168\u7403\u6696\u5316\u5462\uff1f \u00b6 \u6c23\u5019\u8b8a\u5316\u4e0d\u55ae\u6b62\u662f\u5e73\u5747\u6c23\u6eab\uff0c\u4ea6\u6709\u6539\u8b8a\u4e86\u5927\u6c23\u5faa\u74b0\uff0c\u56e0\u6b64\u5e36\u4f86\u4e86\u66f4\u591a\u7684\u6975\u7aef\u6c23\u5019\uff0c\u4f8b\u5982\u5bd2\u6d41\u3001\u71b1\u6d6a\u3001\u66b4\u96e8\u7b49\u7b49\u3002 \u5e73\u5747\u6c23\u6eab\u4e0a\u5347\uff0c\u4ee4\u5927\u6c23\u6c34\u84b8\u6c23\u7684\u6700\u5927\u5bb9\u91cf\u63d0\u9ad8\uff0c\u56e0\u6b64\u66b4\u96e8\u548c\u53f0\u98a8\u4e4b\u985e\u7684\u6c23\u8c61\u6703\u66f4\u5e38\u898b\u3002 8. \u7531\u9019\u4e00\u523b\u958b\u59cb\u96f6\u6392\u653e\uff0c\u53ef\u80fd\u626d\u8f49\u5c40\u9762\u55ce\uff1f \u00b6 \u4e0d\u53ef\u80fd\u3002\u56e0\u70ba\u81ea\u7136\u754c\u7684CO2\u5faa\u74b0\u662f\u6975\u5176\u7de9\u6162\u7684\u904e\u7a0b\uff0c\u5373\u4f7f2020\u5e74\u5f8c\u5168\u4e16\u754c\u96f6\u6392\u653e\uff0c\u4ea6\u9700\u8981\u5e7e\u5343\u5e74\u7684\u6642\u9593\u624d\u56de\u5230\u5de5\u696d\u9769\u547d\u4e4b\u524d\u7684\u6c34\u5e73\u3002 \u4f46\u5982\u679c\u79d1\u6280\u767c\u5c55\u5230\u80fd\u5920\u8ca0\u6392\u653e\u7684\u8a71\uff0c\u6216\u8005\u4e5f\u9700\u8981300\u81f31000\u5e74\u3002 \u4f38\u5ef6\u95b1\u8b80\uff1a \u00b6 \u79d1\u5b78\u5bb6\u8b66\u544a\u6240\u8b02\u300c\u53ef\u6301\u7e8c\u767c\u5c55\u300d\u53ea\u662f\u81ea\u6b3a\u6b3a\u4eba\uff0c\u4eba\u985e\u7d55\u4e0d\u80fd\u5920\u518d\u300c\u767c\u5c55\u300d\u4e0b\u53bb \u7d93\u6fdf\u589e\u9577\u6210\u70ba\u4e86\u7d93\u6fdf\u5b78\u7684\u6700\u9ad8\u4fe1\u689d\uff0c\u6b64\u8207\u74b0\u4fdd\u7406\u5ff5\u7d50\u5408\u800c\u6210\u300c\u53ef\u6301\u7e8c\u767c\u5c55\u300d\u3002 \u7136\u800c\u7121\u8ad6\u5982\u4f55\uff0c\u9019\u500b\u76ee\u6a19\u7d42\u7a76\u53ea\u662f\u8352\u8b2c\u7684\uff0c\u56e0\u70ba\u6700\u7d42\u8a08\u7b97\u4e0b\u4f86\u7684\u7e3d\u6392\u653e\u4e26\u4e0d\u6703\u6e1b\u5c11\uff0c\u8207\u6b64\u540c\u6642\u79d1\u6280\u767c\u5c55\u8ffd\u4e0d\u4e0a\u7d93\u6fdf\u589e\u9577\u7684\u901f\u5ea6\uff0c\u6c23\u5019\u5e73\u8861\u5fc5\u4ee5\u5d29\u6f70\u3002 \u771f\u6b63\u7684\u53ef\u6301\u7e8c\uff0c\u5c31\u662f\u7576\u4eba\u985e\u5fb9\u5e95\u653e\u68c4\u300c\u589e\u9577\u300d\u3001\u300c\u767c\u5c55\u300d\u4e4b\u6642\u3002 Wiedmann, T., Lenzen, M., Key\u00dfer, L.T. et al. Scientists\u2019 warning on affluence. Nat Commun 11, 3107 (2020). https://doi.org/10.1038/s41467-020-16941-y","title":"\u8b80\u66f8\u5831\u544a\uff1a\u6467\u6bc0\u7d93\u6fdf\uff0c\u523b\u4e0d\u5bb9\u7de9"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#_1","text":"National Academy of Sciences. 2020. Climate Change: Evidence and Causes: Update 2020. Washington, DC: The National Academies Press. https://doi.org/10.17226/25733. \u6587\u79d1\u4ed4\u6700\u597d\u60f3\u770b\u5230\u7684\u8b49\u64da\u767c\u751f\u4e86\uff01\uff01\uff01\u90a3\u5c31\u662f\u8b49\u660e\u4e86\u4eba\u985e\u4e26\u6c92\u6709\u4ee4\u4e16\u754c\u8b8a\u5f97\u66f4\u597d\u7684\u9019\u500b\u4e8b\u5be6\uff0c\u76f4\u63a5\u64bc\u52d5\u4e86\u4eba\u6587\u5b78\u79d1\u7684\u5b97\u6559\u6839\u57fa\u3002 \u9019\u662f\u7f8e\u570b\u570b\u5bb6\u79d1\u5b78\u9662\u806f\u540c\u82f1\u570b\u7687\u5bb6\u5b78\u6703\u5171\u540c\u51fa\u7248\u768420\u9801\u5c0f\u518a\u5b50\uff0c\u5716\u6587\u4e26\u8302\u5730\u89e3\u91cb\u4e86\u4eba\u70ba\u6c23\u5019\u8b8a\u5316\u7684\u524d\u56e0\u5f8c\u679c\uff0c\u7576\u4e2d\u53cd\u99c1\u4e86\u5f88\u591a\u7591\u60d1\u3002","title":"\u8b80\u66f8\u5831\u544a\uff1a\u6467\u6bc0\u7d93\u6fdf\uff0c\u523b\u4e0d\u5bb9\u7de9"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#1","text":"\u81ea1850\u5e74\u958b\u59cb\u7684\u6c23\u6eab\u76e3\u5bdf\u6578\u64da\u6307\u51fa\u4e86\u660e\u78ba\u7684\u6c23\u6eab\u4e0a\u6607\u30021950\u5e74\u4ee3\u81ea\u4eca\u7684\u5e73\u5747\u6c23\u6eab\u5df2\u7d93\u4e0a\u5347\u4e86\u651d\u6c0f1.0\u5ea6\u3002\u5168\u7403\u6696\u5316\u5df2\u662f\u7121\u5bb9\u7f6e\u7591\u3002","title":"1. \u5168\u7403\u6696\u5316\u662f\u5426\u7576\u771f\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#2","text":"\u79d1\u5b78\u5bb6\u85c9\u7531\u7269\u7406\u6cd5\u5247\u3001\u6c23\u5019\u6a21\u578b\u4ee5\u53ca\u89c0\u5bdf\u6578\u64da\u7b49\u5f97\u4ee5\u78ba\u8a8d\u5728\u5168\u7403\u6696\u5316\u4e00\u4e8b\u4e4b\u4e0a\uff0c\u4eba\u70ba\u56e0\u7d20\u4f54\u4e86\u5f88\u91cd\u8981\u7684\u90e8\u4efd\u3002 \u81ea19\u4e16\u7d00\u4e2d\u8449\uff0c\u79d1\u5b78\u5bb6\u5df2\u7d93\u77e5\u9053CO2\u70ba\u6eab\u5ba4\u6c23\u9ad4\u3002\u5728\u76f4\u63a5\u4ee5\u53ca\u9593\u63a5\u5730\u6e2c\u91cf\u51b0\u5c64\u4e2d\u7684CO2\u542b\u91cf\uff0c\u79d1\u5b78\u5bb6\u5f97\u77e5\u5f9e1800\u5e74\u81f3\u4eca\u5927\u6c23\u4e2dCO2\u6fc3\u5ea6\u4e0a\u5347\u4e8640%\u3002\u540c\u4f4d\u7d20\u7684\u5206\u6790\u986f\u793a\u662f\u9019\u662f\u4eba\u70ba\u7684\u3002 \u7531\u81ea\u7136\u767c\u751f\u6703\u5c0e\u81f4\u6c23\u5019\u8b8a\u5316\u7684\u592a\u967d\u529f\u7387\u3001\u706b\u5c71\u7206\u767c\u3001\u62c9\u59ae\u5a1c\u73fe\u8c61\u7b49\u7b49\uff0c\u90fd\u7121\u6cd5\u89e3\u91cb\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u73fe\u8c61\u3002","title":"2. \u4f60\u9ede\u77e5\u4f60\u4eba\u70ba\u5168\u7403\u6696\u5316\uff1f\u8b1b\u5c31\u4fc2\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#3-co2","text":"\u751f\u7269\u6b7b\u7269\u90fd\u727d\u6d89\u5728CO2\u7684\u751f\u6210\u548c\u56fa\u5b9a\u4e4b\u4e0a\u3002\u706b\u5c71\u7206\u767c\u770b\u8d77\u4f86\u4f54\u5f88\u5927\u4efd\u984d\uff0c\u4f46\u6bd4\u8d77\u5316\u77f3\u71c3\u6599\u7684\u6392\u653e\uff0c\u539f\u4f86\u706b\u5c71\u7206\u767c\u53ea\u67091%\u7684\u898f\u6a21\u3002 \u5728\u81ea\u7136\u754c\uff0c\u672c\u8eabCO2\u5c31\u6703\u4ee5\u751f\u5316\u6a5f\u5236\u4f86\u8abf\u7bc0\uff0c\u4f8b\u5982\u6709\u5b54\u87f2\u5438\u53d6CO2\u4f86\u5f62\u6210\u78b3\u9178\u9223\u5916\u6bbc\uff0c\u5f9e\u9762\u300c\u56fa\u78b3\u300d\u3002 \u4f46\u4e8b\u5be6\u986f\u793aCO2\u6fc3\u5ea6\u4e0a\u5347\u7684\u5927\u90e8\u4efd\u90fd\u662f\u4f86\u81ea\u65bc1970\u5e74\u4e4b\u5f8c\u7684\u6642\u671f\uff0c\u6b63\u6b63\u4e5f\u662f\u5168\u7403\u80fd\u6e90\u6d88\u8017\u6025\u5347\u7684\u6642\u671f\u3002\u89c0\u5bdf\u7576\u4e2dC13 C14\u7684\u540c\u4f4d\u7d20\u6bd4\u4f8b\uff0c\u4ee5\u53ca\u5927\u6c23\u4e2d\u6c27\u6c23\u542b\u91cf\u7684\u4e0b\u964d\uff0c\u79d1\u5b78\u5bb6\u53ef\u4ee5\u80af\u5b9a\u90a3\u4e9bCO2\u90fd\u4e0d\u662f\u4f86\u81ea\u65bc\u81ea\u7136\u754c\u7684\u3002 \u5728\u6975\u5730\u51b0\u5c64\u62bd\u82af\u7684\u5316\u9a5f\u7d50\u679c\u66f4\u52a0\u986f\u793a\uff0c\u73fe\u5728\u7684CO2\u6fc3\u5ea6\u70ba\u904e\u53bb80\u842c\u5e74\u9593\u6700\u9ad8\u7684\u6c34\u5e73\u3002","title":"3. CO2\u4e00\u5411\u90fd\u97ff\u5927\u6c23\u5165\u9762\uff0c\u95dc\u6211\u54a9\u4e8b\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#4","text":"\u592a\u967d\u8f38\u51fa\u529f\u7387\u6709\u4e00\u500b\u4ee511\u5e74\u70ba\u671f\u7684\u8d77\u4f0f\uff0c\u4f46\u90fd\u4e0d\u8db3\u4ee5\u89e3\u91cb\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u3002\u56e0\u70ba\u592a\u967d\u8f38\u51fa\u7684\u8d77\u4f0f\u5341\u5206\u7a69\u5b9a\uff0c\u5c31\u4ee5\u904e\u53bb\u5e7e\u5341\u5e74\u79d1\u5b78\u5bb6\u4ee5\u885b\u661f\u76f4\u63a5\u89c0\u5bdf\u592a\u967d\u6240\u7d2f\u7a4d\u7684\u6578\u64da\uff0c\u90fd\u7121\u767c\u73fe\u6709\u7dda\u6027\u5411\u4e0a\u7684\u6301\u7e8c\u589e\u52a0\u8da8\u52e2\u3002\u66f4\u4e0d\u7528\u8aaa\u7684\u662f\uff0c\u90a3\u529f\u7387\u8d77\u4f0f\u7684\u9ad8\u4f4e\u53ea\u67090.1%\u5dee\u8ddd\u3002 \u800c\u64da\u79d1\u5b78\u5bb6\u5c0d\u5927\u6c23\u7684\u4e86\u89e3\uff0c\u5982\u679c\u592a\u967d\u529f\u7387\u5c0e\u81f4\u5168\u7403\u6696\u5316\u7684\u8a71\uff0c\u5e73\u6d41\u5c64\u4ee5\u4e0a\u6574\u9ad4\u7684\u5927\u6c23\u6eab\u5ea6\u4e00\u5b9a\u6703\u63d0\u9ad8\u3002\u4f46\u73fe\u5728\u4e8b\u5be6\u662f\u53ea\u6709\u5c0d\u6d41\u5c64\u3001\u5927\u6c23\u6700\u5e95\u5c64\u7684\u6eab\u5ea6\u63d0\u9ad8\u800c\u5df2\uff0c\u9019\u73fe\u8c61\u6b63\u6b63\u543b\u5408\u4e86\u4eba\u70ba\u5168\u7403\u6696\u5316\u7684\u300c\u6307\u7d0b\u300d\u3002","title":"4. \u592a\u967d\u5728\u5168\u7403\u6696\u5316\u4e0a\u626e\u6f14\u4e00\u500b\u91cd\u8981\u89d2\u8272\u3002"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#5","text":"\u91cd\u9ede\u4e0d\u662f\u300c\u6703\u300d\u8b8a\u5316\uff0c\u800c\u662f\u8b8a\u5316\u7684\u300c\u901f\u5ea6\u300d\u3002\u73fe\u5728\u5730\u7403\u6b63\u8655\u65bc\u51b0\u6cb3\u6642\u671f\uff0c\u7576\u523b\u662f10\u842c\u5e74\u5bd2\u51b7\u671f\u904e\u5f8c\u77ed\u66ab\u76841\u842c\u5e74\u9593\u51b0\u671f\uff0c\u4f46\u4e0d\u4ee3\u8868\u73fe\u5728\u7684\u5168\u7403\u6696\u5316\u7684\u6b63\u5e38\u3002\u9593\u51b0\u671f\u524d\u5f8c\u7684\u5e73\u5747\u6c23\u6eab\u6709\u651d\u6c0f4\u81f35\u5ea6\u843d\u5dee\uff0c\u9019\u662f\u57281\u842c\u5e74\u9593\u7684\u8b8a\u5316\u3002\u4f46\u73fe\u5728\u5de5\u696d\u9769\u547d\u5f8c\u7684200\u5e74\u5c31\u5df2\u7d93\u4e0a\u5347\u4e861\u5ea6\uff0cCO2\u6fc3\u5ea6\u4ea6\u4e86\u589e\u52a040%\uff0c\u9019\u7d55\u4e0d\u300c\u81ea\u7136\u300d\u3002 \u6975\u5730\u51b0\u5c64\u62bd\u82af\u7d50\u679c\u986f\u793a\uff0c\u904e\u53bb80\u842c\u5e74\u9593\u7684CO2\u6fc3\u5ea6\u90fd\u7dad\u6301\u5728170\u5230300ppm\u4e4b\u9593\uff0c\u7136\u800c\u4eba\u985e\u53ea\u7528\u4e86200\u5e74\u5c31\u628a\u5b83\u63d0\u5347\u81f3400ppm\u4e86\u3002\u7e31\u4f7f500\u842c\u5e74\u524d\u5730\u7403\u7684CO2\u6fc3\u5ea6\u66fe\u70ba1000ppm\uff0c\u4f46\u7576\u6642\u7684\u5e73\u5747\u6c23\u6eab\u6bd4\u73fe\u5728\u9ad810\u5ea6\uff0c\u6d77\u5e73\u9762\u9ad860\u7c73\uff0c\u4f60\u78ba\u5b9a\u80fd\u5920\u5b58\u6d3b\u5728\u9019\u7a2e\u6c23\u5019\u55ce\uff1f","title":"5. \u6c23\u5019\u5728\u5730\u7403\u6b77\u53f2\u4e0a\u4e00\u76f4\u90fd\u5728\u8b8a\u5316\uff0c\u6709\u54a9\u503c\u5f97\u95dc\u6ce8\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#6-co2","text":"\u5b8c\u5168\u8352\u8b2c\u3002\u6eab\u5ba4\u6c23\u9ad4\u5438\u6536\u7d05\u5916\u7dda\u4f86\u5132\u71b1\uff0c\u66f4\u591a\u7684\u6eab\u5ba4\u6c23\u9ad4\u53ea\u662f\u4ee3\u8868\u4e86\u5b83\u80fd\u5920\u5438\u66f4\u591a\u71b1\u3002","title":"6. \u7269\u6975\u5fc5\u53cd\uff0c\u66f4\u591a\u7684CO2\u4e0d\u4ee3\u8868\u66f4\u9ad8\u7684\u6c23\u6eab\u3002"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#7","text":"\u6c23\u5019\u8b8a\u5316\u4e0d\u55ae\u6b62\u662f\u5e73\u5747\u6c23\u6eab\uff0c\u4ea6\u6709\u6539\u8b8a\u4e86\u5927\u6c23\u5faa\u74b0\uff0c\u56e0\u6b64\u5e36\u4f86\u4e86\u66f4\u591a\u7684\u6975\u7aef\u6c23\u5019\uff0c\u4f8b\u5982\u5bd2\u6d41\u3001\u71b1\u6d6a\u3001\u66b4\u96e8\u7b49\u7b49\u3002 \u5e73\u5747\u6c23\u6eab\u4e0a\u5347\uff0c\u4ee4\u5927\u6c23\u6c34\u84b8\u6c23\u7684\u6700\u5927\u5bb9\u91cf\u63d0\u9ad8\uff0c\u56e0\u6b64\u66b4\u96e8\u548c\u53f0\u98a8\u4e4b\u985e\u7684\u6c23\u8c61\u6703\u66f4\u5e38\u898b\u3002","title":"7. \u51ac\u5929\u4ecd\u7136\u5f88\u51cd\uff0c\u8aaa\u597d\u7684\u5168\u7403\u6696\u5316\u5462\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#8","text":"\u4e0d\u53ef\u80fd\u3002\u56e0\u70ba\u81ea\u7136\u754c\u7684CO2\u5faa\u74b0\u662f\u6975\u5176\u7de9\u6162\u7684\u904e\u7a0b\uff0c\u5373\u4f7f2020\u5e74\u5f8c\u5168\u4e16\u754c\u96f6\u6392\u653e\uff0c\u4ea6\u9700\u8981\u5e7e\u5343\u5e74\u7684\u6642\u9593\u624d\u56de\u5230\u5de5\u696d\u9769\u547d\u4e4b\u524d\u7684\u6c34\u5e73\u3002 \u4f46\u5982\u679c\u79d1\u6280\u767c\u5c55\u5230\u80fd\u5920\u8ca0\u6392\u653e\u7684\u8a71\uff0c\u6216\u8005\u4e5f\u9700\u8981300\u81f31000\u5e74\u3002","title":"8. \u7531\u9019\u4e00\u523b\u958b\u59cb\u96f6\u6392\u653e\uff0c\u53ef\u80fd\u626d\u8f49\u5c40\u9762\u55ce\uff1f"},{"location":"review_book/%5B%E9%96%B1%E8%AE%80%E5%A0%B1%E5%91%8A%5D%20%E6%91%A7%E6%AF%80%E7%B6%93%E6%BF%9F%EF%BC%8C%E5%88%BB%E4%B8%8D%E5%AE%B9%E7%B7%A9/#_2","text":"\u79d1\u5b78\u5bb6\u8b66\u544a\u6240\u8b02\u300c\u53ef\u6301\u7e8c\u767c\u5c55\u300d\u53ea\u662f\u81ea\u6b3a\u6b3a\u4eba\uff0c\u4eba\u985e\u7d55\u4e0d\u80fd\u5920\u518d\u300c\u767c\u5c55\u300d\u4e0b\u53bb \u7d93\u6fdf\u589e\u9577\u6210\u70ba\u4e86\u7d93\u6fdf\u5b78\u7684\u6700\u9ad8\u4fe1\u689d\uff0c\u6b64\u8207\u74b0\u4fdd\u7406\u5ff5\u7d50\u5408\u800c\u6210\u300c\u53ef\u6301\u7e8c\u767c\u5c55\u300d\u3002 \u7136\u800c\u7121\u8ad6\u5982\u4f55\uff0c\u9019\u500b\u76ee\u6a19\u7d42\u7a76\u53ea\u662f\u8352\u8b2c\u7684\uff0c\u56e0\u70ba\u6700\u7d42\u8a08\u7b97\u4e0b\u4f86\u7684\u7e3d\u6392\u653e\u4e26\u4e0d\u6703\u6e1b\u5c11\uff0c\u8207\u6b64\u540c\u6642\u79d1\u6280\u767c\u5c55\u8ffd\u4e0d\u4e0a\u7d93\u6fdf\u589e\u9577\u7684\u901f\u5ea6\uff0c\u6c23\u5019\u5e73\u8861\u5fc5\u4ee5\u5d29\u6f70\u3002 \u771f\u6b63\u7684\u53ef\u6301\u7e8c\uff0c\u5c31\u662f\u7576\u4eba\u985e\u5fb9\u5e95\u653e\u68c4\u300c\u589e\u9577\u300d\u3001\u300c\u767c\u5c55\u300d\u4e4b\u6642\u3002 Wiedmann, T., Lenzen, M., Key\u00dfer, L.T. et al. Scientists\u2019 warning on affluence. Nat Commun 11, 3107 (2020). https://doi.org/10.1038/s41467-020-16941-y","title":"\u4f38\u5ef6\u95b1\u8b80\uff1a"},{"location":"review_book/invitation%20to%20computer%20science/","text":"\u8b80\u66f8\u5831\u544a\uff1a\u96fb\u8166\u79d1\u5b78\u5165\u9580 \u00b6 Invitation to Computer Science https://www.cengage.co.uk/books/9781337561914/ \u9019\u672c\u66f8\u662f\u7f8e\u570b\u5927\u5b78\u7684\u96fb\u8166\u79d1\u5b78\u7684\u5165\u9580\u8ab2\u7a0b\u6559\u79d1\u66f8\uff0c\u7a0b\u5ea6\u8f03\u6dfa\uff0c\u8986\u84cb\u6975\u5ee3\u3002\u7531\u8a08\u7b97\u6a5f\u6b77\u53f2\u958b\u59cb\u8b1b\uff0c\u8b1b\u5230\u6f14\u7b97\u6cd5algorithm\u8a2d\u8a08\u3001\u96fb\u8166\u786c\u4ef6\u67b6\u69cb\u3001\u8edf\u4ef6\u67b6\u69cb\u548c\u958b\u767c\u5468\u671f\u3001\u4e92\u806f\u7db2\u7684\u7d50\u69cb\u3001\u96fb\u8166\u79d1\u5b78\u7684\u61c9\u7528\u3001\u8a08\u7b97\u6a21\u578b\u3001\u5716\u9748\u6a5f\u548c\u96fb\u8166\u6975\u9650\u3001\u4eba\u5de5\u667a\u80fd\u3002\u7531\u6df1\u5165\u6dfa\uff0c\u5927\u5305\u570d\u4e86\u96fb\u8166\u76f8\u95dc\u7684\u5404\u7a2e\u77e5\u8b58\u3002 \u9019\u672c\u53ef\u8b02\u662f\u6559\u79d1\u66f8\u7684\u5178\u7bc4\u3002\u9664\u975e\u4f60\u7570\u5e38\u5730\u60f3\u52d5\u4e00\u52d5\u8166\u7b4b\u6311\u6230\u81ea\u5df1\uff0c\u5426\u5247\u4f60\u53ef\u4ee5\u5b8c\u5168\u5ffd\u7565\u8ab2\u6587\u4e2d\u548c\u8ab2\u6587\u5f8c\u7684\u554f\u984c\u96c6\u800c\u4e0d\u5f71\u97ff\u95b1\u8b80\u9ad4\u9a57\u3002\u7576\u7136\u4e5f\u6c92\u6709\u751a\u9ebc\u72d7\u5c4e\u5783\u573e\u300c\u8ab2\u5802\u5167\u5bb9\u7684\u4e00\u90e8\u4efd\u5728\u7df4\u7fd2\u984c\u7576\u4e2d\u300d\uff0c\u5fc5\u9808\u7684\u77e5\u8b58\u5168\u90fd\u5305\u542b\u5728\u8ab2\u6587\u88cf\u9762\u3002 \u8a08\u7b97\u6a5f\u6b77\u53f2 \u00b6 \u73fe\u4ee3\u96fb\u8166\u767c\u5c55\u53f2\u96e2\u4e0d\u958b\u8ecd\u4e8b\u7528\u9014\u3002\u4f46\u66f4\u65e9\u7684\u662f\u57281900\u5e74\u4ee3\u3002\u7576\u6642\u7f8e\u570b\u7684\u79fb\u6c11\u6f6e\u5c0e\u81f4\u4eba\u53e3\u6025\u901f\u500d\u589e(\u7b46\u8005\u70ba\u5730\u7406\u5b78\u5c08\u696d\uff0c\u6709\u4fee\u904e\u7f8e\u570b\u79fb\u6c11\u53f2)\uff0c\u5728\u6700\u9ad8\u5cf0\u76841900\u20131910\u5e74\u9593\uff0c\u6709800\u842c\u7684\u65b0\u589e\u79fb\u6c11\u4eba\u53e3\u3002\u800c\u5728\u66f4\u95ca\u7684\u6642\u9593\u9ede\u4e0a\uff0c1880\u20131920\u5e74\u9593\uff0c\u7e3d\u5171\u589e\u52a0\u4e862700\u842c\u65b0\u79fb\u6c11\u3002\u4eba\u6578\u4e4b\u591a\uff0c\u4e0d\u50c5\u4ee4\u653f\u5e9c\u5927\u70ba\u982d\u75db\u800c\u6025\u65bc\u4fee\u6539\u79fb\u6c11\u6cd5\u4ee41930\u5e74\u4ee5\u5f8c\u7684\u79fb\u6c11\u4eba\u6578\u5927\u6e1b\uff0c\u540c\u6642\u65b0\u79fb\u6c11\u4e5f\u5e36\u4f86\u4e86\u5f88\u591a\u793e\u6703\u554f\u984c\u3002 \u4f46\u666e\u904d\u6587\u79d1\u4ed4\u5c31\u53ea\u6703\u8457\u58a8\u65bc\u9019\u4e9b\u4eba\u985e\u751a\u9ebc\u7684\u3001\u793e\u6703\u751a\u9ebc\u7684\uff0c\u6587\u79d1\u4ed4\u6240\u5ffd\u8996\u7684\u662f\uff0c\u570b\u5bb6\u4eba\u53e3\u6025\u589e\u6240\u76f4\u63a5\u5c0e\u81f4\u7684\u662f\uff0c\u4ee5\u5f80\u7684\u4eba\u53e3\u7d71\u8a08\u65b9\u6cd5\u8ad6\u5168\u76e4\u74e6\u89e3\u3002\u57fa\u672c\u4e0a\u7576\u4f60\u5b8c\u62101910\u5e74\u7684\u4eba\u53e3\u7d71\u8a08\u7684\u6642\u5019\uff0c\u6708\u66c6\u5df2\u7d93\u8981\u7ffb\u5230\u53bb1918\u5e74\u4e86\u3002\u5982\u662f\u8005\u7d71\u8a08\u5c40\u6700\u6025\u5148\u8981\u8655\u7406\u7684\u662f\u4eba\u53e3\u7d71\u8a08\u7684\u6a5f\u68b0\u5316\u3002\u7f8e\u570b\u806f\u90a6\u7d71\u8a08\u5c40\u90e8\u9577\u767c\u660e\u4e86\u6a5f\u5668\u4f86\u505a\u9019\u4ef6\u4e8b\uff0c\u5e7e\u5e74\u5f8c\u4ed6\u81ea\u7acb\u9580\u6236\uff0c\u9019\u9593\u516c\u53f8\u5c31\u662f\u73fe\u5728\u5bb6\u55bb\u6236\u66c9\u7684IBM\u3002 \u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6230\u524d\u5f8c\uff0c\u6b50\u7f8e\u5404\u570b\u5176\u5be6\u90fd\u5728\u5dee\u4e0d\u591a\u4e00\u6a23\u7684\u6642\u9593\uff0c\u76f8\u7e7c\u7368\u7acb\u5730\u7814\u767c\u96fb\u8166\uff0c\u4e0d\u53ea\u662f\u82f1\u570b\u7528\u96fb\u8166\u4f86\u7834\u89e3\u5fb7\u570b\u7684\u6697\u865f\uff0c\u7f8e\u8ecd\u4e5f\u6709\u5176\u96fb\u8166\u7814\u7a76\u3002 \u5f8c\u4f86\u79d1\u5b78\u5bb6\u958b\u59cb\u8a2d\u8a08\u51fa\u96fb\u8166\u4e4b\u9593\u7684\u6e9d\u901a\u4ea6\u5373\u662f\u5167\u806f\u7db2\u3002\u8d77\u521d\u662f\u7531\u5927\u5b78\u7814\u7a76\u6240\u4e4b\u9593\u7684\u5b78\u8853\u4ea4\u6d41\u4e4b\u7528\uff0c\u662f\u7c92\u5b50\u7269\u7406\u5b78\u5bb6\u5bb6\u7684\u73a9\u610f\uff0c\u5f8c\u4f86\u4e0d\u5c11\u5176\u4ed6\u7814\u7a76\u6240\u548c\u4f01\u696d\u4e4b\u9593\u4e5f\u5efa\u7acb\u8d77\u81ea\u5df1\u7684\u5167\u806f\u7db2\u3002\u5f8c\u4f86\u7f8e\u570b\u570b\u5bb6\u79d1\u5b78\u9662\u63a5\u624b\uff0c\u7d71\u4e00\u4e86\u6797\u6797\u7a2e\u7a2e\u4e0d\u540c\u7684\u7db2\u7d61\u67b6\u69cb\uff0c\u4f7f\u5927\u5bb6\u90fd\u80fd\u4e92\u76f8\u4ea4\u6d41\uff0c\u90a3\u5c31\u662f\u4e92\u806f\u7db2\u3002 \u4e92\u806f\u7db2\u7684\u6838\u5fc3\u662fTCP/IP\uff0cSSL\u7b49\u7684\u5354\u8b70\u3002\u78ba\u4fdd\u4e86\u5927\u5bb6\u8aaa\u7684\u90fd\u662f\u540c\u4e00\u7a2e\u8a9e\u8a00\u3002\u6211\u5011\u61c9\u8a72\u6176\u5e78\u4e92\u806f\u7db2\u7684\u5efa\u8a2d\u7576\u4e2d\u6c92\u6709\u6587\u79d1\u4ed4\u7684\u53c3\u8207\u3002\u4e00\u65e6\u5982\u679c\u6709\u6587\u79d1\u4ed4\u4ecb\u5165\uff0c\u4e92\u806f\u7db2\u5c31\u6703\u8b8a\u6210\u98db\u9d3f\u50b3\u66f8\uff0c\u8aaa\u751a\u9ebc\u6a5f\u68b0\u592a\u51b7\u6f20\u6c92\u6709\u6eab\u5ea6\uff0cIP\u5730\u5740\u7684\u89e3\u6790\u53ea\u5728\u4e4e\u89c0\u9ede\u8207\u89d2\u5ea6\u4e91\u4e91\u7684\u3002 \u5716\u9748\u6a5f\u548c\u96fb\u8166\u6975\u9650 \u00b6 \u6587\u79d1\u8aaa\uff1a\u4e0d\u80fd\u6240\u6709\u6771\u897f\u90fd\u53ef\u4ee5\u79d1\u5b78\u5730\u770b\uff0c\u4e0d\u662f\u6240\u6709\u6771\u897f\u90fd\u53ef\u4ee5\u8a08\u7b97\u5f97\u6e05\u6e05\u695a\u695a\u3002 \u4f46\u6587\u79d1\u4ed4\u771f\u7684\u77e5\u9053\u751a\u9ebc\u662f\u300c\u8a08\u7b97\u300d\u55ce\uff1f\u54f2\u5b78\u4e0a\u5206\u6790\u300c\u8a08\u7b97\u300d\u7684\u601d\u60f3\u6846\u67b6\u662f\u5716\u9748\u6a5f\u3002\u5c31\u662f\u8aaa\uff0c\u6240\u6709\u7684\u8a08\u7b97\u90fd\u4e0d\u5916\u4e4e\u662f(\u6975\u7c97\u7565\u5730)\u8f38\u5165\u8cc7\u6599\u3001\u8655\u7406\u5668\u3001\u8655\u7406\u7d50\u679c\u7684\u8a18\u9304\uff0c\u9019\u4e09\u4ef6\u6771\u897f\u3002\u62ff\u8457\u9019\u4e9b\u6771\u897f\uff0c\u4f60\u53ef\u4ee5\u505a\u51fa\u6240\u6709\u7684\u904b\u7b97\u3002 \u4f46\u540c\u6642\u6709\u4e9b\u6771\u897f\u4e0d\u80fd\u8a08\u7b97(non computable)\uff0c\u90a3\u5c31\u662f\u81ea\u76f8\u77db\u76fe\u7684\u6771\u897f\u3002\u66f8\u4e2d\u8209\u7684\u4f8b\u5b50\u662f\uff1a \u5047\u8a2d\u6709\u4e00\u500b\u8655\u7406\u5668\uff0c\u7576\u9019\u500b\u8655\u7406\u5668\u5075\u6e2c\u5230\u73fe\u5728\u7684\u8a08\u7b97\u662f\u6c38\u7121\u6b62\u5883\u7684\u8a71\uff0c\u5b83\u5c31\u6703\u81ea\u52d5\u505c\u4e0b\uff0c\u76f8\u53cd\u5247\u7e7c\u7e8c\u904b\u884c\u3002 \u5982\u679c\u4f60\u5c07\u9019\u500b\u8655\u7406\u5668\u548c\u5b83\u7684\u529f\u80fd\u8f38\u5165\u5230\u5176\u81ea\u8eab\uff0c\u4f86\u6aa2\u6e2c\u4e00\u4e0b\u5b83\u81ea\u5df1\u662f\u4e0d\u662f\u6c38\u7121\u6b62\u5883\u5730\u8a08\u7b97\uff0c\u77db\u76fe\u5c31\u6703\u56e0\u6b64\u800c\u8d77\u3002 \u5982\u679c\u6211(\u8655\u7406\u5668)\u6703\u6c38\u7121\u6b62\u5883\u5730\u8a08\u4e0b\u53bb\u7684\u8a71\uff0c\u6211\u6703\u81ea\u52d5\u505c\u4e0b(\uff1f\uff1f\uff1f) \u6587\u79d1\u4eba\u770b\u5230\u9019\u4e9b\u8cc7\u8a0a\u662f\uff0c\u5c31\u6703\u6436\u8457\u8aaa\u6240\u4ee5\u4eba\u6587\u95dc\u61f7\u5f88\u91cd\u8981\uff0c\u96fb\u8166\u505a\u4e0d\u5230\u7684\u5c31\u8981\u9760\u4eba\u6587\u4f86\u5f4c\u88dc\u4e91\u4e91\u3002 \u4f46\u4f60\u60f3\u4e00\u60f3\uff0c\u73fe\u5728\u8aaa\u662f\u300c\u6240\u6709\u7684\u8a08\u7b97\u300d\u3002\u7406\u8ad6\u96fb\u8166\u4e5f\u4e0d\u80fd\u89e3\u6c7a\u7684\u4e8b\uff0c\u4f60\u96a8\u4fbf\u8b80\u500b\u6587\u5b78\u5b78\u4f4d\u5c31\u6703\u5ffd\u7136\u89e3\u6c7a\u5f97\u5230\uff1f\u53ea\u6709\u5169\u500b\u53ef\u80fd\u6027\uff1a 1 \u4f60\u4e0d\u662f\u7528\u300c\u8a08\u7b97\u300d\u7684\u65b9\u6cd5\u4f86\u8a08\u7b97\uff0c\u662f\u7528\u9b54\u6cd5 2 \u4f60\u662f\u767d\u75f4 \u6240\u4ee5\u8aaa\u908f\u8f2f\u5f88\u91cd\u8981\uff0c\u4f46\u908f\u8f2f\u662f\u4e0d\u80fd\u5f9e\u5b78\u7fd2\u6587\u79d1\u800c\u7372\u5f97\u3002 \u7576\u7136\u9019\u500b\u5716\u9748\u6a5f\u7684\u505c\u6a5f\u554f\u984c(halt problem)\u53ea\u662f\u4e00\u500b\u6578\u5b78\u8b49\u660e\u3002\u8b49\u660e\u4e86\u4e0d\u662f\u300c\u6240\u6709\u300d\u6771\u897f\u90fd\u53ef\u4ee5\u8a08\u7b97\u51fa\u4f86\u3002\u56e0\u70ba\u6578\u5b78\u5bb6\u80fd\u5920\u8209\u51fa\u4e00\u500b\u53cd\u8b49\uff0c\u5c31\u662f\u4e0a\u9762\u90a3\u90e8\u6703\u81ea\u76f8\u77db\u76fe\u7684\u8655\u7406\u5668\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u7576\u4f60\u7684\u8655\u7406\u5668\u548c\u5b83\u7684\u529f\u80fd\u662f\u540c\u4e0a\u9762\u4e00\u6a23\u7684\u8a71\uff0c\u9019\u500b\u8655\u7406\u5668\u662f\u5ee2\u7684\uff0c\u4e0d\u80fd\u89e3\u6c7a\u554f\u984c\u3002\u53ea\u8981\u4f60\u7684\u8655\u7406\u5668\u8207\u4e0a\u9762\u4f8b\u5b50\u4e0d\u540c\uff0c\u4f60\u5927\u53ef\u4ee5\u5b89\u5fc3\u8a08\u6578\u3002 \u6f14\u7b97\u6cd5 \u00b6 \u96fb\u8166\u79d1\u5b78\u7684\u7cbe\u9ad3\u5728\u65bc\u6f14\u7b97\u6cd5\u3002\u6f14\u7b97\u6cd5\u6c7a\u5b9a\u4e86\u4eba\u985e\u6587\u660e\u7684\u9032\u6b65\u7a7a\u9593\u3002 \u6587\u79d1\u4ed4\u6703\u554f\uff0c\u6211\u5011\u771f\u7684\u9700\u8981\u505a\u4e8b\u9019\u9ebc\u5feb\u55ce\uff1f\u4e0d\u80fd\u653e\u6162\u4e00\u9ede\uff0c\u5e36\u9ede\u6eab\u5ea6\uff0c\u5e36\u9ede\u611f\u60c5\uff0c\u6b23\u8cde\u4e00\u4e0b\u904e\u7a0b\u4e2d\u7684\u7f8e\uff0c\u66f4\u6dfb\u4e00\u9ede\u4eba\u6587\u96c5\u81f4\u3002 \u6211\u6709\u5f88\u591a\u53ef\u4ee5\u8b93\u4f60\u8a08\u5230\u4e0b\u4e00\u6b21\u5b87\u5b99\u5927\u7206\u70b8\u90fd\u672a\u66fe\u8a08\u5b8c\u7684\u8a08\u7b97\u5b78\u96e3\u984c\u3002\u4f60\u6587\u79d1\u4ed4\u8981\u8a66\u4e00\u8a66\u8a08\u4e00\u8a08\u55ce\uff1f \u8a08\u7b97\u4e4b\u4e0a\uff0c\u6548\u7387\u5c31\u662f\u552f\u4e00\u771f\u7406\u3002\u6f14\u7b97\u6cd5\u5c31\u662f\u947d\u7814\u600e\u6a23\u66f4\u5feb\u7684\u5b78\u554f\u3002\u6700\u7c21\u55ae\u7684\u901f\u5ea6\u63d0\u5347\u662fbinary search\u3002\u524d\u63d0\u662f\u4f60\u6709\u4e00\u672c\u4f9d\u7167abc\u6392\u5217\u7684\u96fb\u8a71\u7c3f\u3002\u4f60\u60f3\u77e5\u9053\u9673\u5c0f\u660e(Chan)\u96fb\u8a71\uff0c\u4f60\u4e0d\u6703\u75311\u958b\u59cb\u9010\u9801\u63ed\uff0c\u800c\u662f\u6253\u958b\u4e2d\u9593\uff0c\u4e00\u770b\u4e0d\u662fC\u9801\uff0c\u65bc\u662f\u4f60\u77e5\u9053\u4f60\u53ef\u4ee5\u5b8c\u5168\u4e0d\u9700\u8981\u770b\u4e4b\u5f8c\u7684\u9801\u6578\u3002\u56e0\u70baM\u6bd4C\u5927\uff0cC\u4e0d\u53ef\u80fd\u5728\u66f4\u5f8c\u7684\u9801\u6578\u88cf\u9762\u3002\u5982\u662f\u8005\u4f60\u9700\u8981\u641c\u5c0b\u7684\u7bc4\u570d\u5c31\u7531800\u9801\u8b8a\u6210400\u9801\u3002\u91cd\u8986\u5e7e\u6b21\u76f8\u540c\u6b65\u9a5f: 800->400->200->100->50->25->12->6->3->2->1 \u5f88\u5feb\u4f60\u5c31\u627e\u5230\u9673\u5c0f\u660e\u3002 \u96fb\u8166\u67b6\u69cb \u00b6 \u96fb\u8166\u7684\u4e2d\u5fc3\u662f\u8655\u7406\u5668\uff0c\u9664\u6b64\u4e4b\u5916\u5c31\u662f\u8a18\u61b6\u9ad4\u3002\u4f60\u8981\u6709\u300c\u8cc7\u6599\u300d\u624d\u80fd\u5f97\u8655\u7406\u3002\u5c31\u5982\u5f88\u591a\u6587\u79d1\u4ed4\u6703\u8aaa\u79d1\u5b78\u65b9\u6cd5\u6bd4\u79d1\u5b78\u77e5\u8b58\u91cd\u8981\uff0c\u8aaa\u9019\u4e9b\u6771\u897f\u7684\u4eba\u53ea\u6703\u662f\u5730\u5e73\u8ad6\u8005\u3002\u4e8b\u5be6\u4f60\u5fc5\u9808\u8981\u6709\u76f8\u540c\u5206\u91cf\u7684\u8655\u7406\u80fd\u529b\u548c\u786c\u77e5\u8b58\uff0c\u4f60\u8981\u77e5\u9053\u751a\u9ebc\u662ffact\u3002\u63a8\u8ad6\u548c\u601d\u8003\u65b9\u6cd5\u662f\u4e0d\u80fd\u5e36\u7d66\u4f60fact\u7684\u3002 \u8a18\u61b6\u9ad4\u6709\u901f\u5ea6\u4e4b\u5206\u3002\u65e9\u671f\u7684\u96fb\u8166\u8655\u7406\u5668\u901f\u5ea6\u6162\uff0c\u8655\u7406\u4e0d\u4e86\u4e0d\u591a\u8cc7\u6599\uff0c\u5f88\u591a\u6642\u5019\u662f100%\u4f54\u7528\u7387\u3002\u73fe\u5728\u7684\u8655\u7406\u5668\u901f\u5ea6\u6975\u5feb\uff0c\u8a08\u7b97\u7684\u6a3d\u9838\u5f9e\u8655\u7406\u5668\u8b8a\u6210\u8a18\u61b6\u9ad4\uff0c\u5c31\u662f\u8aaa\u7b49\u4e86\u5f88\u4e45\u4e5f\u672a\u7b49\u5230\u60f3\u8981\u7684\u8cc7\u6599\uff0c\u767d\u767d\u6d6a\u8cbb\u6642\u9593\u3002\u65bc\u662f\u4e4e\u5c31\u51fa\u73fe\u4e86\u66f4\u5feb\u7684\u8a18\u61b6\u9ad4\u53ebcache\uff0c\u518d\u5feb\u7684\u53ebregister\u3002\u4e00\u500b\u6bd4\u4e00\u500b\u5feb\uff0c\u4f46\u4e00\u500b\u6bd4\u4e00\u500b\u7d30\u5c0f\u3002 \u901f\u5ea6 RAM < L3 cache < L2 cache < L1 cache < register \u5bb9\u91cf RAM > L3 cache > L2 cache > L1 cache > register \u8655\u7406\u5668\u9996\u5148\u6703\u770b\u770b\u60f3\u8981\u7684\u8cc7\u6599\u6709\u6c92\u6709\u5728register\uff0c\u6c92\u6709\u7684\u8a71\u5c31\u770b\u6709\u6c92\u6709\u5728cache\uff0c\u518d\u6c92\u6709\u7684\u8a71\u5c31\u770b\u6709\u6c92\u6709\u5728RAM\uff0c\u6709\u7684\u8a71\u5c31\u6703\u5f9eRAM\u8abf\u52d5\u5230register\u3002\u554f\u984c\u662fRAM\u5f88\u6162\uff0c\u62d6\u5ef6\u4e86\u8655\u7406\u901f\u5ea6\u3002\u5982\u679c\u4e00\u958b\u59cb\u5c07\u8981\u7528\u5230\u7684\u8cc7\u6599\u8981\u653e\u5728cache\u7684\u8a71\u6703\u5feb\u5f88\u591a\u3002\u8cb7CPU\u7684\u6642\u5019\u9664\u4e86\u770bcache\u5bb9\u91cf\u7684\u6642\u5019\u4e5f\u8981\u770bcache\u901f\u5ea6\u3002 \u8edf\u4ef6\u67b6\u69cb \u00b6 \u7a0b\u5f0f\u8a9e\u8a00\u4e5f\u5206\u5e7e\u500b\u5c64\u6b21\u3002\u7531\u6700\u5e95\u5c64\u7684\u8aaa\u8d77\uff1a 1 Machine Language 2 Assembly Language 3 High Level Programming Language Machine Language\u5c31\u662f\u96fb\u8166\u8655\u7406\u5668\u771f\u6b63\u80fd\u5920\u770b\u5f97\u61c2\u7684\u6771\u897f\uff0c\u662f\u4e00\u5806010101100110\u3002\u5167\u5bb9\u5c31\u662f\u8aaa\u8981\u5c0d\u751a\u9ebc\u8a18\u61b6\u9ad4\u7684\u8cc7\u6599\u4f5c\u51fa\u751a\u9ebc\u64cd\u4f5c\uff0c\u4f8b\u5982\u662f\u52a0\u6e1b\u4e58\u9664\u3002 \u5c07Assembly Language\u8f49\u8b6f\u6210Machine Language Assembly Language\u5c31\u662f\u4eba\u770b\u5f97\u61c2\u7684Machine Language\u3002\u4f8b\u5982\u300c\u52a0\u300d\u7684\u6307\u4ee4\u4e0d\u662f01001\uff0c\u800c\u662fSUM\u3002\u65e9\u671f\u7684\u96fb\u8166\u7a0b\u5f0f\u7528\u9019\u7a2e\u8a9e\u8a00\u4f86\u7de8\u5beb\u3002 \u5c07High Level Programming Language\u8f49\u8b6f\u6210Assembly Language High Level Programming Language\u7684\u7528\u5bb6\u4e0d\u7528\u518d\u53bb\u601d\u8003\u751a\u9ebc\u8a18\u61b6\u9ad4\u7684\u3002\u53ef\u4ee5\u6709\u66f4\u591a\u7a7a\u9593\u53bb\u601d\u8003\u66f4\u8907\u96dc\u7684\u904b\u7b97\u3002\u4f8b\u5982\u4f60\u5c07\u5169\u500b\u540d\u55ae\u7684\u6578\u5b57\u76f8\u52a0\u7684\u6642\u5019\uff0c\u518d\u4e0d\u9700\u8981\u9010\u500b\u8a18\u61b6\u9ad4\u4f86\u52a0\uff0c\u800c\u53ea\u9700\u8981A\u540d\u55ae+B\u540d\u55ae\u5c31\u53ef\u4ee5\u4e86\u3002\u96fb\u8166\u6703\u5728\u80cc\u5f8c\u5e6b\u4f60\u88dc\u4e0a\u5be6\u969b\u4e0a\u9700\u8981\u7684\u6e05\u6670\u660e\u78ba\u7684\u6307\u4ee4\u3002 \u4f46\u73fe\u5be6\u4e0a\u96fb\u8166\u7684\u786c\u4ef6\u5404\u6709\u4e0d\u540c\uff0c\u4ee4\u5230\u5404\u5ee0\u724c\u4e4b\u9593\u7684Machine Language\u548cAssembly Language\u90fd\u662f\u4e0d\u540c\u3002\u4f60\u5fc5\u9808\u8981\u70ba\u6bcf\u4e00\u90e8\u96fb\u8166\u53bb\u91cd\u65b0\u7de8\u7a0b\u3002High Level Programming Language\u7684\u597d\u8655\u5c31\u662f\u4f60\u4e0d\u7528\u64d4\u5fc3\u9019\u500b\u554f\u984c\uff0c\u540c\u4e00\u500b\u7a0b\u5f0f\u53ef\u4ee5\u7528\u4e0d\u540c\u7684compiler\u4f86\u5c0d\u61c9\u4e0d\u540c\u7684\u786c\u4ef6\uff0c\u907f\u514d\u4e86\u91cd\u65b0\u7de8\u7a0b\u7684\u5927\u5de5\u7a0b\u3002\u4f8b\u5982Java\u548cC#\uff0c\u6a19\u699c\u7684\u5c31\u662f\u9019\u7a2e\u591a\u5e73\u53f0\u7684\u517c\u5bb9\u6027\u3002 \u6587\u79d1\u4ed4\u8981\u7559\u610f\u7684\u662f\uff0c\u96fb\u8166\u7a0b\u5e8f\u7684\u8f49\u8b6f\u5de5\u4f5c\u662f\u5168\u81ea\u52d5\u7684\u3002compiler\u7684\u8a2d\u8a08\u6975\u70ba\u8907\u96dc\uff0c\u9700\u8981\u5224\u65b7\u7a0b\u5f0f\u54e1\u7684\u610f\u5716\u800c\u5beb\u51fa\u6e96\u78ba\u7684Assemble Language\u3002\u4f60\u4e0d\u80fd\u5920\u6709\u534a\u9ede\u542b\u7cca\u3002\u96fb\u8166(\u908f\u8f2f\u771f\u7406not/and/or)\u7684\u4e16\u754c\u7684\u4e0d\u5bb9\u7d0d\u6587\u79d1\u7684\u3002 \u96fb\u8166\u79d1\u5b78\u7684\u61c9\u7528 \u00b6 \u96fb\u8166\u904a\u6232\u662f\u8003\u9a57\u96fb\u8166\u7684\u6027\u80fd\u7d42\u6975\u6307\u6a19\u3002\u56e0\u70ba\u4f60\u5fc5\u9808\u8981\u5728\u6975\u77ed\u7684\u6642\u9593\u4f86\u5b8c\u6210\u6240\u6709\u8a08\u7b97\uff0c\u624d\u80fd\u5c55\u73fe\u7d66\u7528\u5bb6\u6d41\u66a2\u800c\u7cbe\u7f8e\u7684\u756b\u9762\u3002 \u4f8b\u5982\u8aaa1920*1080\u7684\u756b\u9762\u5373200\u842c\u50cf\u7d20\uff0c\u6bcf\u500b\u50cf\u7d20\u90fd\u670910\u500b\u56e0\u7d20\u5f71\u97ff\u5176\u984f\u8272\u3002\u6bcf\u79d2\u9700\u8981\u7522\u751f60\u5f35\u756b\u9762\uff0c\u4f60\u6bcf\u79d2\u5c31\u9700\u8981\u9032\u884c12\u6b21\u5be6\u6642\u904b\u7b97\u3002\u70ba\u751a\u9ebc\u8aaa\u5be6\u6642\uff0c\u56e0\u70ba\u96fb\u8166\u4e0d\u80fd\u9810\u77e5\u4e0b\u4e00\u79d2\u73a9\u5bb6\u6703\u4f5c\u51fa\u751a\u9ebc\u884c\u70ba\uff0c\u56e0\u6b64\u5c31\u53ea\u80fd\u5920\u5728\u73a9\u5bb6\u505a\u51fa\u8209\u52d5\u4e4b\u5f8c\u624d\u80fd\u4f5c\u51fa\u53cd\u61c9\u3002\u96fb\u8166\u57280.016\u79d2\u4e4b\u5167\u5fc5\u9808\u8981\u5b8c\u6210\u5de5\u4f5c\uff0c\u5426\u5247\u5c31\u53ea\u662f\u5783\u573e\u3002 \u6587\u79d1\u5de5\u4f5c\u662f\u4e0d\u9700\u8981\u5230\u9019\u9ebc\u7dca\u6e4a\u7684\u6642\u9593\u63a7\u5236\u3002\u4f8b\u5982\u751a\u9ebc\u526a\u7247\uff0c\u7528\u5e7e\u500b\u9418\u4f86\u7522\u751f\u4e00\u5f35\u5716\uff0c\u8ab0\u6703\u53bb\u7406\u75313\u5c0f\u6642\u548c2\u5c0f\u6642\u7684\u5206\u5225\uff1f\u4f46\u73fe\u5be6\u6211\u5011\u9700\u8981\u66f4\u591a\u7684\u662f\u5be6\u6642\u7cfb\u7d71\u3002\u4f8b\u5982\u822a\u7a7a\u7ba1\u5236\u3001\u5929\u6c23\u4e88\u5831\u3001\u8eca\u6d41\u76e3\u6e2c\u3001\u7db2\u8def\u6578\u64da\u5206\u6790\u3002\u6587\u79d1\u7684\u5de5\u4f5c\u548c\u601d\u60f3\uff0c\u53cd\u800c\u63a5\u8fd1\u96f6\u9700\u8981\u3002 \u4eba\u5de5\u667a\u80fd \u00b6 \u9019\u672c\u66f8\u6703\u5e36\u80fd\u4f60\u6700\u57fa\u672c\u7684Machine Learning\u548cDeep Learning\u77e5\u8b58\u3002\u4f46\u8981\u771f\u6b63\u660e\u767d\u7684\u8a71\uff0c\u9084\u662f\u5148\u53bb\u8b80Linear Algebra\u5427\u3002","title":"\u8b80\u66f8\u5831\u544a\uff1a\u96fb\u8166\u79d1\u5b78\u5165\u9580"},{"location":"review_book/invitation%20to%20computer%20science/#_1","text":"Invitation to Computer Science https://www.cengage.co.uk/books/9781337561914/ \u9019\u672c\u66f8\u662f\u7f8e\u570b\u5927\u5b78\u7684\u96fb\u8166\u79d1\u5b78\u7684\u5165\u9580\u8ab2\u7a0b\u6559\u79d1\u66f8\uff0c\u7a0b\u5ea6\u8f03\u6dfa\uff0c\u8986\u84cb\u6975\u5ee3\u3002\u7531\u8a08\u7b97\u6a5f\u6b77\u53f2\u958b\u59cb\u8b1b\uff0c\u8b1b\u5230\u6f14\u7b97\u6cd5algorithm\u8a2d\u8a08\u3001\u96fb\u8166\u786c\u4ef6\u67b6\u69cb\u3001\u8edf\u4ef6\u67b6\u69cb\u548c\u958b\u767c\u5468\u671f\u3001\u4e92\u806f\u7db2\u7684\u7d50\u69cb\u3001\u96fb\u8166\u79d1\u5b78\u7684\u61c9\u7528\u3001\u8a08\u7b97\u6a21\u578b\u3001\u5716\u9748\u6a5f\u548c\u96fb\u8166\u6975\u9650\u3001\u4eba\u5de5\u667a\u80fd\u3002\u7531\u6df1\u5165\u6dfa\uff0c\u5927\u5305\u570d\u4e86\u96fb\u8166\u76f8\u95dc\u7684\u5404\u7a2e\u77e5\u8b58\u3002 \u9019\u672c\u53ef\u8b02\u662f\u6559\u79d1\u66f8\u7684\u5178\u7bc4\u3002\u9664\u975e\u4f60\u7570\u5e38\u5730\u60f3\u52d5\u4e00\u52d5\u8166\u7b4b\u6311\u6230\u81ea\u5df1\uff0c\u5426\u5247\u4f60\u53ef\u4ee5\u5b8c\u5168\u5ffd\u7565\u8ab2\u6587\u4e2d\u548c\u8ab2\u6587\u5f8c\u7684\u554f\u984c\u96c6\u800c\u4e0d\u5f71\u97ff\u95b1\u8b80\u9ad4\u9a57\u3002\u7576\u7136\u4e5f\u6c92\u6709\u751a\u9ebc\u72d7\u5c4e\u5783\u573e\u300c\u8ab2\u5802\u5167\u5bb9\u7684\u4e00\u90e8\u4efd\u5728\u7df4\u7fd2\u984c\u7576\u4e2d\u300d\uff0c\u5fc5\u9808\u7684\u77e5\u8b58\u5168\u90fd\u5305\u542b\u5728\u8ab2\u6587\u88cf\u9762\u3002","title":"\u8b80\u66f8\u5831\u544a\uff1a\u96fb\u8166\u79d1\u5b78\u5165\u9580"},{"location":"review_book/invitation%20to%20computer%20science/#_2","text":"\u73fe\u4ee3\u96fb\u8166\u767c\u5c55\u53f2\u96e2\u4e0d\u958b\u8ecd\u4e8b\u7528\u9014\u3002\u4f46\u66f4\u65e9\u7684\u662f\u57281900\u5e74\u4ee3\u3002\u7576\u6642\u7f8e\u570b\u7684\u79fb\u6c11\u6f6e\u5c0e\u81f4\u4eba\u53e3\u6025\u901f\u500d\u589e(\u7b46\u8005\u70ba\u5730\u7406\u5b78\u5c08\u696d\uff0c\u6709\u4fee\u904e\u7f8e\u570b\u79fb\u6c11\u53f2)\uff0c\u5728\u6700\u9ad8\u5cf0\u76841900\u20131910\u5e74\u9593\uff0c\u6709800\u842c\u7684\u65b0\u589e\u79fb\u6c11\u4eba\u53e3\u3002\u800c\u5728\u66f4\u95ca\u7684\u6642\u9593\u9ede\u4e0a\uff0c1880\u20131920\u5e74\u9593\uff0c\u7e3d\u5171\u589e\u52a0\u4e862700\u842c\u65b0\u79fb\u6c11\u3002\u4eba\u6578\u4e4b\u591a\uff0c\u4e0d\u50c5\u4ee4\u653f\u5e9c\u5927\u70ba\u982d\u75db\u800c\u6025\u65bc\u4fee\u6539\u79fb\u6c11\u6cd5\u4ee41930\u5e74\u4ee5\u5f8c\u7684\u79fb\u6c11\u4eba\u6578\u5927\u6e1b\uff0c\u540c\u6642\u65b0\u79fb\u6c11\u4e5f\u5e36\u4f86\u4e86\u5f88\u591a\u793e\u6703\u554f\u984c\u3002 \u4f46\u666e\u904d\u6587\u79d1\u4ed4\u5c31\u53ea\u6703\u8457\u58a8\u65bc\u9019\u4e9b\u4eba\u985e\u751a\u9ebc\u7684\u3001\u793e\u6703\u751a\u9ebc\u7684\uff0c\u6587\u79d1\u4ed4\u6240\u5ffd\u8996\u7684\u662f\uff0c\u570b\u5bb6\u4eba\u53e3\u6025\u589e\u6240\u76f4\u63a5\u5c0e\u81f4\u7684\u662f\uff0c\u4ee5\u5f80\u7684\u4eba\u53e3\u7d71\u8a08\u65b9\u6cd5\u8ad6\u5168\u76e4\u74e6\u89e3\u3002\u57fa\u672c\u4e0a\u7576\u4f60\u5b8c\u62101910\u5e74\u7684\u4eba\u53e3\u7d71\u8a08\u7684\u6642\u5019\uff0c\u6708\u66c6\u5df2\u7d93\u8981\u7ffb\u5230\u53bb1918\u5e74\u4e86\u3002\u5982\u662f\u8005\u7d71\u8a08\u5c40\u6700\u6025\u5148\u8981\u8655\u7406\u7684\u662f\u4eba\u53e3\u7d71\u8a08\u7684\u6a5f\u68b0\u5316\u3002\u7f8e\u570b\u806f\u90a6\u7d71\u8a08\u5c40\u90e8\u9577\u767c\u660e\u4e86\u6a5f\u5668\u4f86\u505a\u9019\u4ef6\u4e8b\uff0c\u5e7e\u5e74\u5f8c\u4ed6\u81ea\u7acb\u9580\u6236\uff0c\u9019\u9593\u516c\u53f8\u5c31\u662f\u73fe\u5728\u5bb6\u55bb\u6236\u66c9\u7684IBM\u3002 \u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6230\u524d\u5f8c\uff0c\u6b50\u7f8e\u5404\u570b\u5176\u5be6\u90fd\u5728\u5dee\u4e0d\u591a\u4e00\u6a23\u7684\u6642\u9593\uff0c\u76f8\u7e7c\u7368\u7acb\u5730\u7814\u767c\u96fb\u8166\uff0c\u4e0d\u53ea\u662f\u82f1\u570b\u7528\u96fb\u8166\u4f86\u7834\u89e3\u5fb7\u570b\u7684\u6697\u865f\uff0c\u7f8e\u8ecd\u4e5f\u6709\u5176\u96fb\u8166\u7814\u7a76\u3002 \u5f8c\u4f86\u79d1\u5b78\u5bb6\u958b\u59cb\u8a2d\u8a08\u51fa\u96fb\u8166\u4e4b\u9593\u7684\u6e9d\u901a\u4ea6\u5373\u662f\u5167\u806f\u7db2\u3002\u8d77\u521d\u662f\u7531\u5927\u5b78\u7814\u7a76\u6240\u4e4b\u9593\u7684\u5b78\u8853\u4ea4\u6d41\u4e4b\u7528\uff0c\u662f\u7c92\u5b50\u7269\u7406\u5b78\u5bb6\u5bb6\u7684\u73a9\u610f\uff0c\u5f8c\u4f86\u4e0d\u5c11\u5176\u4ed6\u7814\u7a76\u6240\u548c\u4f01\u696d\u4e4b\u9593\u4e5f\u5efa\u7acb\u8d77\u81ea\u5df1\u7684\u5167\u806f\u7db2\u3002\u5f8c\u4f86\u7f8e\u570b\u570b\u5bb6\u79d1\u5b78\u9662\u63a5\u624b\uff0c\u7d71\u4e00\u4e86\u6797\u6797\u7a2e\u7a2e\u4e0d\u540c\u7684\u7db2\u7d61\u67b6\u69cb\uff0c\u4f7f\u5927\u5bb6\u90fd\u80fd\u4e92\u76f8\u4ea4\u6d41\uff0c\u90a3\u5c31\u662f\u4e92\u806f\u7db2\u3002 \u4e92\u806f\u7db2\u7684\u6838\u5fc3\u662fTCP/IP\uff0cSSL\u7b49\u7684\u5354\u8b70\u3002\u78ba\u4fdd\u4e86\u5927\u5bb6\u8aaa\u7684\u90fd\u662f\u540c\u4e00\u7a2e\u8a9e\u8a00\u3002\u6211\u5011\u61c9\u8a72\u6176\u5e78\u4e92\u806f\u7db2\u7684\u5efa\u8a2d\u7576\u4e2d\u6c92\u6709\u6587\u79d1\u4ed4\u7684\u53c3\u8207\u3002\u4e00\u65e6\u5982\u679c\u6709\u6587\u79d1\u4ed4\u4ecb\u5165\uff0c\u4e92\u806f\u7db2\u5c31\u6703\u8b8a\u6210\u98db\u9d3f\u50b3\u66f8\uff0c\u8aaa\u751a\u9ebc\u6a5f\u68b0\u592a\u51b7\u6f20\u6c92\u6709\u6eab\u5ea6\uff0cIP\u5730\u5740\u7684\u89e3\u6790\u53ea\u5728\u4e4e\u89c0\u9ede\u8207\u89d2\u5ea6\u4e91\u4e91\u7684\u3002","title":"\u8a08\u7b97\u6a5f\u6b77\u53f2"},{"location":"review_book/invitation%20to%20computer%20science/#_3","text":"\u6587\u79d1\u8aaa\uff1a\u4e0d\u80fd\u6240\u6709\u6771\u897f\u90fd\u53ef\u4ee5\u79d1\u5b78\u5730\u770b\uff0c\u4e0d\u662f\u6240\u6709\u6771\u897f\u90fd\u53ef\u4ee5\u8a08\u7b97\u5f97\u6e05\u6e05\u695a\u695a\u3002 \u4f46\u6587\u79d1\u4ed4\u771f\u7684\u77e5\u9053\u751a\u9ebc\u662f\u300c\u8a08\u7b97\u300d\u55ce\uff1f\u54f2\u5b78\u4e0a\u5206\u6790\u300c\u8a08\u7b97\u300d\u7684\u601d\u60f3\u6846\u67b6\u662f\u5716\u9748\u6a5f\u3002\u5c31\u662f\u8aaa\uff0c\u6240\u6709\u7684\u8a08\u7b97\u90fd\u4e0d\u5916\u4e4e\u662f(\u6975\u7c97\u7565\u5730)\u8f38\u5165\u8cc7\u6599\u3001\u8655\u7406\u5668\u3001\u8655\u7406\u7d50\u679c\u7684\u8a18\u9304\uff0c\u9019\u4e09\u4ef6\u6771\u897f\u3002\u62ff\u8457\u9019\u4e9b\u6771\u897f\uff0c\u4f60\u53ef\u4ee5\u505a\u51fa\u6240\u6709\u7684\u904b\u7b97\u3002 \u4f46\u540c\u6642\u6709\u4e9b\u6771\u897f\u4e0d\u80fd\u8a08\u7b97(non computable)\uff0c\u90a3\u5c31\u662f\u81ea\u76f8\u77db\u76fe\u7684\u6771\u897f\u3002\u66f8\u4e2d\u8209\u7684\u4f8b\u5b50\u662f\uff1a \u5047\u8a2d\u6709\u4e00\u500b\u8655\u7406\u5668\uff0c\u7576\u9019\u500b\u8655\u7406\u5668\u5075\u6e2c\u5230\u73fe\u5728\u7684\u8a08\u7b97\u662f\u6c38\u7121\u6b62\u5883\u7684\u8a71\uff0c\u5b83\u5c31\u6703\u81ea\u52d5\u505c\u4e0b\uff0c\u76f8\u53cd\u5247\u7e7c\u7e8c\u904b\u884c\u3002 \u5982\u679c\u4f60\u5c07\u9019\u500b\u8655\u7406\u5668\u548c\u5b83\u7684\u529f\u80fd\u8f38\u5165\u5230\u5176\u81ea\u8eab\uff0c\u4f86\u6aa2\u6e2c\u4e00\u4e0b\u5b83\u81ea\u5df1\u662f\u4e0d\u662f\u6c38\u7121\u6b62\u5883\u5730\u8a08\u7b97\uff0c\u77db\u76fe\u5c31\u6703\u56e0\u6b64\u800c\u8d77\u3002 \u5982\u679c\u6211(\u8655\u7406\u5668)\u6703\u6c38\u7121\u6b62\u5883\u5730\u8a08\u4e0b\u53bb\u7684\u8a71\uff0c\u6211\u6703\u81ea\u52d5\u505c\u4e0b(\uff1f\uff1f\uff1f) \u6587\u79d1\u4eba\u770b\u5230\u9019\u4e9b\u8cc7\u8a0a\u662f\uff0c\u5c31\u6703\u6436\u8457\u8aaa\u6240\u4ee5\u4eba\u6587\u95dc\u61f7\u5f88\u91cd\u8981\uff0c\u96fb\u8166\u505a\u4e0d\u5230\u7684\u5c31\u8981\u9760\u4eba\u6587\u4f86\u5f4c\u88dc\u4e91\u4e91\u3002 \u4f46\u4f60\u60f3\u4e00\u60f3\uff0c\u73fe\u5728\u8aaa\u662f\u300c\u6240\u6709\u7684\u8a08\u7b97\u300d\u3002\u7406\u8ad6\u96fb\u8166\u4e5f\u4e0d\u80fd\u89e3\u6c7a\u7684\u4e8b\uff0c\u4f60\u96a8\u4fbf\u8b80\u500b\u6587\u5b78\u5b78\u4f4d\u5c31\u6703\u5ffd\u7136\u89e3\u6c7a\u5f97\u5230\uff1f\u53ea\u6709\u5169\u500b\u53ef\u80fd\u6027\uff1a 1 \u4f60\u4e0d\u662f\u7528\u300c\u8a08\u7b97\u300d\u7684\u65b9\u6cd5\u4f86\u8a08\u7b97\uff0c\u662f\u7528\u9b54\u6cd5 2 \u4f60\u662f\u767d\u75f4 \u6240\u4ee5\u8aaa\u908f\u8f2f\u5f88\u91cd\u8981\uff0c\u4f46\u908f\u8f2f\u662f\u4e0d\u80fd\u5f9e\u5b78\u7fd2\u6587\u79d1\u800c\u7372\u5f97\u3002 \u7576\u7136\u9019\u500b\u5716\u9748\u6a5f\u7684\u505c\u6a5f\u554f\u984c(halt problem)\u53ea\u662f\u4e00\u500b\u6578\u5b78\u8b49\u660e\u3002\u8b49\u660e\u4e86\u4e0d\u662f\u300c\u6240\u6709\u300d\u6771\u897f\u90fd\u53ef\u4ee5\u8a08\u7b97\u51fa\u4f86\u3002\u56e0\u70ba\u6578\u5b78\u5bb6\u80fd\u5920\u8209\u51fa\u4e00\u500b\u53cd\u8b49\uff0c\u5c31\u662f\u4e0a\u9762\u90a3\u90e8\u6703\u81ea\u76f8\u77db\u76fe\u7684\u8655\u7406\u5668\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u7576\u4f60\u7684\u8655\u7406\u5668\u548c\u5b83\u7684\u529f\u80fd\u662f\u540c\u4e0a\u9762\u4e00\u6a23\u7684\u8a71\uff0c\u9019\u500b\u8655\u7406\u5668\u662f\u5ee2\u7684\uff0c\u4e0d\u80fd\u89e3\u6c7a\u554f\u984c\u3002\u53ea\u8981\u4f60\u7684\u8655\u7406\u5668\u8207\u4e0a\u9762\u4f8b\u5b50\u4e0d\u540c\uff0c\u4f60\u5927\u53ef\u4ee5\u5b89\u5fc3\u8a08\u6578\u3002","title":"\u5716\u9748\u6a5f\u548c\u96fb\u8166\u6975\u9650"},{"location":"review_book/invitation%20to%20computer%20science/#_4","text":"\u96fb\u8166\u79d1\u5b78\u7684\u7cbe\u9ad3\u5728\u65bc\u6f14\u7b97\u6cd5\u3002\u6f14\u7b97\u6cd5\u6c7a\u5b9a\u4e86\u4eba\u985e\u6587\u660e\u7684\u9032\u6b65\u7a7a\u9593\u3002 \u6587\u79d1\u4ed4\u6703\u554f\uff0c\u6211\u5011\u771f\u7684\u9700\u8981\u505a\u4e8b\u9019\u9ebc\u5feb\u55ce\uff1f\u4e0d\u80fd\u653e\u6162\u4e00\u9ede\uff0c\u5e36\u9ede\u6eab\u5ea6\uff0c\u5e36\u9ede\u611f\u60c5\uff0c\u6b23\u8cde\u4e00\u4e0b\u904e\u7a0b\u4e2d\u7684\u7f8e\uff0c\u66f4\u6dfb\u4e00\u9ede\u4eba\u6587\u96c5\u81f4\u3002 \u6211\u6709\u5f88\u591a\u53ef\u4ee5\u8b93\u4f60\u8a08\u5230\u4e0b\u4e00\u6b21\u5b87\u5b99\u5927\u7206\u70b8\u90fd\u672a\u66fe\u8a08\u5b8c\u7684\u8a08\u7b97\u5b78\u96e3\u984c\u3002\u4f60\u6587\u79d1\u4ed4\u8981\u8a66\u4e00\u8a66\u8a08\u4e00\u8a08\u55ce\uff1f \u8a08\u7b97\u4e4b\u4e0a\uff0c\u6548\u7387\u5c31\u662f\u552f\u4e00\u771f\u7406\u3002\u6f14\u7b97\u6cd5\u5c31\u662f\u947d\u7814\u600e\u6a23\u66f4\u5feb\u7684\u5b78\u554f\u3002\u6700\u7c21\u55ae\u7684\u901f\u5ea6\u63d0\u5347\u662fbinary search\u3002\u524d\u63d0\u662f\u4f60\u6709\u4e00\u672c\u4f9d\u7167abc\u6392\u5217\u7684\u96fb\u8a71\u7c3f\u3002\u4f60\u60f3\u77e5\u9053\u9673\u5c0f\u660e(Chan)\u96fb\u8a71\uff0c\u4f60\u4e0d\u6703\u75311\u958b\u59cb\u9010\u9801\u63ed\uff0c\u800c\u662f\u6253\u958b\u4e2d\u9593\uff0c\u4e00\u770b\u4e0d\u662fC\u9801\uff0c\u65bc\u662f\u4f60\u77e5\u9053\u4f60\u53ef\u4ee5\u5b8c\u5168\u4e0d\u9700\u8981\u770b\u4e4b\u5f8c\u7684\u9801\u6578\u3002\u56e0\u70baM\u6bd4C\u5927\uff0cC\u4e0d\u53ef\u80fd\u5728\u66f4\u5f8c\u7684\u9801\u6578\u88cf\u9762\u3002\u5982\u662f\u8005\u4f60\u9700\u8981\u641c\u5c0b\u7684\u7bc4\u570d\u5c31\u7531800\u9801\u8b8a\u6210400\u9801\u3002\u91cd\u8986\u5e7e\u6b21\u76f8\u540c\u6b65\u9a5f: 800->400->200->100->50->25->12->6->3->2->1 \u5f88\u5feb\u4f60\u5c31\u627e\u5230\u9673\u5c0f\u660e\u3002","title":"\u6f14\u7b97\u6cd5"},{"location":"review_book/invitation%20to%20computer%20science/#_5","text":"\u96fb\u8166\u7684\u4e2d\u5fc3\u662f\u8655\u7406\u5668\uff0c\u9664\u6b64\u4e4b\u5916\u5c31\u662f\u8a18\u61b6\u9ad4\u3002\u4f60\u8981\u6709\u300c\u8cc7\u6599\u300d\u624d\u80fd\u5f97\u8655\u7406\u3002\u5c31\u5982\u5f88\u591a\u6587\u79d1\u4ed4\u6703\u8aaa\u79d1\u5b78\u65b9\u6cd5\u6bd4\u79d1\u5b78\u77e5\u8b58\u91cd\u8981\uff0c\u8aaa\u9019\u4e9b\u6771\u897f\u7684\u4eba\u53ea\u6703\u662f\u5730\u5e73\u8ad6\u8005\u3002\u4e8b\u5be6\u4f60\u5fc5\u9808\u8981\u6709\u76f8\u540c\u5206\u91cf\u7684\u8655\u7406\u80fd\u529b\u548c\u786c\u77e5\u8b58\uff0c\u4f60\u8981\u77e5\u9053\u751a\u9ebc\u662ffact\u3002\u63a8\u8ad6\u548c\u601d\u8003\u65b9\u6cd5\u662f\u4e0d\u80fd\u5e36\u7d66\u4f60fact\u7684\u3002 \u8a18\u61b6\u9ad4\u6709\u901f\u5ea6\u4e4b\u5206\u3002\u65e9\u671f\u7684\u96fb\u8166\u8655\u7406\u5668\u901f\u5ea6\u6162\uff0c\u8655\u7406\u4e0d\u4e86\u4e0d\u591a\u8cc7\u6599\uff0c\u5f88\u591a\u6642\u5019\u662f100%\u4f54\u7528\u7387\u3002\u73fe\u5728\u7684\u8655\u7406\u5668\u901f\u5ea6\u6975\u5feb\uff0c\u8a08\u7b97\u7684\u6a3d\u9838\u5f9e\u8655\u7406\u5668\u8b8a\u6210\u8a18\u61b6\u9ad4\uff0c\u5c31\u662f\u8aaa\u7b49\u4e86\u5f88\u4e45\u4e5f\u672a\u7b49\u5230\u60f3\u8981\u7684\u8cc7\u6599\uff0c\u767d\u767d\u6d6a\u8cbb\u6642\u9593\u3002\u65bc\u662f\u4e4e\u5c31\u51fa\u73fe\u4e86\u66f4\u5feb\u7684\u8a18\u61b6\u9ad4\u53ebcache\uff0c\u518d\u5feb\u7684\u53ebregister\u3002\u4e00\u500b\u6bd4\u4e00\u500b\u5feb\uff0c\u4f46\u4e00\u500b\u6bd4\u4e00\u500b\u7d30\u5c0f\u3002 \u901f\u5ea6 RAM < L3 cache < L2 cache < L1 cache < register \u5bb9\u91cf RAM > L3 cache > L2 cache > L1 cache > register \u8655\u7406\u5668\u9996\u5148\u6703\u770b\u770b\u60f3\u8981\u7684\u8cc7\u6599\u6709\u6c92\u6709\u5728register\uff0c\u6c92\u6709\u7684\u8a71\u5c31\u770b\u6709\u6c92\u6709\u5728cache\uff0c\u518d\u6c92\u6709\u7684\u8a71\u5c31\u770b\u6709\u6c92\u6709\u5728RAM\uff0c\u6709\u7684\u8a71\u5c31\u6703\u5f9eRAM\u8abf\u52d5\u5230register\u3002\u554f\u984c\u662fRAM\u5f88\u6162\uff0c\u62d6\u5ef6\u4e86\u8655\u7406\u901f\u5ea6\u3002\u5982\u679c\u4e00\u958b\u59cb\u5c07\u8981\u7528\u5230\u7684\u8cc7\u6599\u8981\u653e\u5728cache\u7684\u8a71\u6703\u5feb\u5f88\u591a\u3002\u8cb7CPU\u7684\u6642\u5019\u9664\u4e86\u770bcache\u5bb9\u91cf\u7684\u6642\u5019\u4e5f\u8981\u770bcache\u901f\u5ea6\u3002","title":"\u96fb\u8166\u67b6\u69cb"},{"location":"review_book/invitation%20to%20computer%20science/#_6","text":"\u7a0b\u5f0f\u8a9e\u8a00\u4e5f\u5206\u5e7e\u500b\u5c64\u6b21\u3002\u7531\u6700\u5e95\u5c64\u7684\u8aaa\u8d77\uff1a 1 Machine Language 2 Assembly Language 3 High Level Programming Language Machine Language\u5c31\u662f\u96fb\u8166\u8655\u7406\u5668\u771f\u6b63\u80fd\u5920\u770b\u5f97\u61c2\u7684\u6771\u897f\uff0c\u662f\u4e00\u5806010101100110\u3002\u5167\u5bb9\u5c31\u662f\u8aaa\u8981\u5c0d\u751a\u9ebc\u8a18\u61b6\u9ad4\u7684\u8cc7\u6599\u4f5c\u51fa\u751a\u9ebc\u64cd\u4f5c\uff0c\u4f8b\u5982\u662f\u52a0\u6e1b\u4e58\u9664\u3002 \u5c07Assembly Language\u8f49\u8b6f\u6210Machine Language Assembly Language\u5c31\u662f\u4eba\u770b\u5f97\u61c2\u7684Machine Language\u3002\u4f8b\u5982\u300c\u52a0\u300d\u7684\u6307\u4ee4\u4e0d\u662f01001\uff0c\u800c\u662fSUM\u3002\u65e9\u671f\u7684\u96fb\u8166\u7a0b\u5f0f\u7528\u9019\u7a2e\u8a9e\u8a00\u4f86\u7de8\u5beb\u3002 \u5c07High Level Programming Language\u8f49\u8b6f\u6210Assembly Language High Level Programming Language\u7684\u7528\u5bb6\u4e0d\u7528\u518d\u53bb\u601d\u8003\u751a\u9ebc\u8a18\u61b6\u9ad4\u7684\u3002\u53ef\u4ee5\u6709\u66f4\u591a\u7a7a\u9593\u53bb\u601d\u8003\u66f4\u8907\u96dc\u7684\u904b\u7b97\u3002\u4f8b\u5982\u4f60\u5c07\u5169\u500b\u540d\u55ae\u7684\u6578\u5b57\u76f8\u52a0\u7684\u6642\u5019\uff0c\u518d\u4e0d\u9700\u8981\u9010\u500b\u8a18\u61b6\u9ad4\u4f86\u52a0\uff0c\u800c\u53ea\u9700\u8981A\u540d\u55ae+B\u540d\u55ae\u5c31\u53ef\u4ee5\u4e86\u3002\u96fb\u8166\u6703\u5728\u80cc\u5f8c\u5e6b\u4f60\u88dc\u4e0a\u5be6\u969b\u4e0a\u9700\u8981\u7684\u6e05\u6670\u660e\u78ba\u7684\u6307\u4ee4\u3002 \u4f46\u73fe\u5be6\u4e0a\u96fb\u8166\u7684\u786c\u4ef6\u5404\u6709\u4e0d\u540c\uff0c\u4ee4\u5230\u5404\u5ee0\u724c\u4e4b\u9593\u7684Machine Language\u548cAssembly Language\u90fd\u662f\u4e0d\u540c\u3002\u4f60\u5fc5\u9808\u8981\u70ba\u6bcf\u4e00\u90e8\u96fb\u8166\u53bb\u91cd\u65b0\u7de8\u7a0b\u3002High Level Programming Language\u7684\u597d\u8655\u5c31\u662f\u4f60\u4e0d\u7528\u64d4\u5fc3\u9019\u500b\u554f\u984c\uff0c\u540c\u4e00\u500b\u7a0b\u5f0f\u53ef\u4ee5\u7528\u4e0d\u540c\u7684compiler\u4f86\u5c0d\u61c9\u4e0d\u540c\u7684\u786c\u4ef6\uff0c\u907f\u514d\u4e86\u91cd\u65b0\u7de8\u7a0b\u7684\u5927\u5de5\u7a0b\u3002\u4f8b\u5982Java\u548cC#\uff0c\u6a19\u699c\u7684\u5c31\u662f\u9019\u7a2e\u591a\u5e73\u53f0\u7684\u517c\u5bb9\u6027\u3002 \u6587\u79d1\u4ed4\u8981\u7559\u610f\u7684\u662f\uff0c\u96fb\u8166\u7a0b\u5e8f\u7684\u8f49\u8b6f\u5de5\u4f5c\u662f\u5168\u81ea\u52d5\u7684\u3002compiler\u7684\u8a2d\u8a08\u6975\u70ba\u8907\u96dc\uff0c\u9700\u8981\u5224\u65b7\u7a0b\u5f0f\u54e1\u7684\u610f\u5716\u800c\u5beb\u51fa\u6e96\u78ba\u7684Assemble Language\u3002\u4f60\u4e0d\u80fd\u5920\u6709\u534a\u9ede\u542b\u7cca\u3002\u96fb\u8166(\u908f\u8f2f\u771f\u7406not/and/or)\u7684\u4e16\u754c\u7684\u4e0d\u5bb9\u7d0d\u6587\u79d1\u7684\u3002","title":"\u8edf\u4ef6\u67b6\u69cb"},{"location":"review_book/invitation%20to%20computer%20science/#_7","text":"\u96fb\u8166\u904a\u6232\u662f\u8003\u9a57\u96fb\u8166\u7684\u6027\u80fd\u7d42\u6975\u6307\u6a19\u3002\u56e0\u70ba\u4f60\u5fc5\u9808\u8981\u5728\u6975\u77ed\u7684\u6642\u9593\u4f86\u5b8c\u6210\u6240\u6709\u8a08\u7b97\uff0c\u624d\u80fd\u5c55\u73fe\u7d66\u7528\u5bb6\u6d41\u66a2\u800c\u7cbe\u7f8e\u7684\u756b\u9762\u3002 \u4f8b\u5982\u8aaa1920*1080\u7684\u756b\u9762\u5373200\u842c\u50cf\u7d20\uff0c\u6bcf\u500b\u50cf\u7d20\u90fd\u670910\u500b\u56e0\u7d20\u5f71\u97ff\u5176\u984f\u8272\u3002\u6bcf\u79d2\u9700\u8981\u7522\u751f60\u5f35\u756b\u9762\uff0c\u4f60\u6bcf\u79d2\u5c31\u9700\u8981\u9032\u884c12\u6b21\u5be6\u6642\u904b\u7b97\u3002\u70ba\u751a\u9ebc\u8aaa\u5be6\u6642\uff0c\u56e0\u70ba\u96fb\u8166\u4e0d\u80fd\u9810\u77e5\u4e0b\u4e00\u79d2\u73a9\u5bb6\u6703\u4f5c\u51fa\u751a\u9ebc\u884c\u70ba\uff0c\u56e0\u6b64\u5c31\u53ea\u80fd\u5920\u5728\u73a9\u5bb6\u505a\u51fa\u8209\u52d5\u4e4b\u5f8c\u624d\u80fd\u4f5c\u51fa\u53cd\u61c9\u3002\u96fb\u8166\u57280.016\u79d2\u4e4b\u5167\u5fc5\u9808\u8981\u5b8c\u6210\u5de5\u4f5c\uff0c\u5426\u5247\u5c31\u53ea\u662f\u5783\u573e\u3002 \u6587\u79d1\u5de5\u4f5c\u662f\u4e0d\u9700\u8981\u5230\u9019\u9ebc\u7dca\u6e4a\u7684\u6642\u9593\u63a7\u5236\u3002\u4f8b\u5982\u751a\u9ebc\u526a\u7247\uff0c\u7528\u5e7e\u500b\u9418\u4f86\u7522\u751f\u4e00\u5f35\u5716\uff0c\u8ab0\u6703\u53bb\u7406\u75313\u5c0f\u6642\u548c2\u5c0f\u6642\u7684\u5206\u5225\uff1f\u4f46\u73fe\u5be6\u6211\u5011\u9700\u8981\u66f4\u591a\u7684\u662f\u5be6\u6642\u7cfb\u7d71\u3002\u4f8b\u5982\u822a\u7a7a\u7ba1\u5236\u3001\u5929\u6c23\u4e88\u5831\u3001\u8eca\u6d41\u76e3\u6e2c\u3001\u7db2\u8def\u6578\u64da\u5206\u6790\u3002\u6587\u79d1\u7684\u5de5\u4f5c\u548c\u601d\u60f3\uff0c\u53cd\u800c\u63a5\u8fd1\u96f6\u9700\u8981\u3002","title":"\u96fb\u8166\u79d1\u5b78\u7684\u61c9\u7528"},{"location":"review_book/invitation%20to%20computer%20science/#_8","text":"\u9019\u672c\u66f8\u6703\u5e36\u80fd\u4f60\u6700\u57fa\u672c\u7684Machine Learning\u548cDeep Learning\u77e5\u8b58\u3002\u4f46\u8981\u771f\u6b63\u660e\u767d\u7684\u8a71\uff0c\u9084\u662f\u5148\u53bb\u8b80Linear Algebra\u5427\u3002","title":"\u4eba\u5de5\u667a\u80fd"},{"location":"toward_science/","text":"Be A Scientist \u00b6 Pauli Operator, Commutator, Bloch sphere, Binary Operation, and Cyclic Group \u00b6 So What Exactly is happenig in Matrix Multiplication \u00b6 \u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f \u00b6","title":"Toward Science"},{"location":"toward_science/#be-a-scientist","text":"","title":"Be A Scientist"},{"location":"toward_science/#pauli-operator-commutator-bloch-sphere-binary-operation-and-cyclic-group","text":"","title":"Pauli Operator, Commutator, Bloch sphere,  Binary Operation, and Cyclic\u00a0Group"},{"location":"toward_science/#so-what-exactly-is-happenig-in-matrix-multiplication","text":"","title":"So What Exactly is happenig in Matrix Multiplication"},{"location":"toward_science/#_1","text":"","title":"\u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/","text":"Pauli Operator, Commutator, Bloch sphere, Binary Operation, and Cyclic Group.md \u00b6 Sometimes a thing called \"Commutator\" is being used in Quantum Computing. In some particular algorithm that solve certain equation, Commutator is used extensively. However the problem is, how can we implement this function fast. The current implementation expecially in the quantum simulation package called OpenFermion is super slow, and I think maybe we can do a better job. What is commute What is Binary Operation Commutator in 20 word Pauli Operator What is Bloch Sphere Pauli Operator form a Cyclic Group How to Make Fast Commutator What is commute \u00b6 \"Commute\" is a algebraic property in mathematics. Let say that you have some operation. Say \"go to toilet\" and \"wash hand\". And when you execute those operation, in different order, the outcome and meaning is completely different. Text Only 1 2 go to toilet then wash hand wash hand then go to toilet However the best option should be Text Only 1 wash hand then go to toilet then wash hand Then we say \"go to toilet\" and \"wash hand\" is NOT COMMUTE. We cannot change the their order arbitrarily. So this is \"not commute\". Then what is \"commute\"? Think of \"walking front\" and \"walking left\". No matter what order you walk, you must go to the same after position. Then we say walking front\" and \"walking left\" is COMMUTE. When two operation is COMMUTE, they are INDEPENDENT operation with respect to each other. Doing one operation do not affect anything in another operation. Like moving up and down will not have any affection on the horizontal position of that thing. So a commutator is a function that we use to check whether two operation is commute with each other or not. It is a binary operation. What is Binary Operation \u00b6 \"Plus\" and \"Muliplication\" is binary operation. They are used to make a relationship of two object. Text Only 1 2 3 1 + 1 = 2 2 + 2 = 4 3 \u00d7 3 = 9 There is a machine called \"PLUS\" and you can only input two value into it. And then after that it produce a new value. Text Only 1 PLUS(1,1) => 2 This machine/function can take only two number. Likewise, commutator is binary operation. Commutator in 20 word \u00b6 Text Only 1 2 3 Let A, B be two operation. Check AB - BA ?= 0 Explain: if A and B commute, then AB should have the same value as BA. And because of that, when you subtract them, you are subtracting the same value. So the result must be zero. State it inversely. If AB subtract BA is not equal to zero, A and B is not commute to each other. Pauli Operator \u00b6 Pauli Operator a set of operation in quantum computing. They are denoted as Text Only 1 I, X, Y, Z In their matrix form Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 I := [ 1 0 ] [ 0 1 ] X := [ 0 1 ] [ 1 0 ] Y := [ 0 -i ] [ i 0 ] Z := [ 1 0 ] [ 0 -1 ] The \"i\" in Y is the \"i\" of imaginary number. Why is this name. Because they represented the rotation axis of Bloch Sphere. Each Pauli Operator mean that you rotate the Bloch Sphere in the same axis of its name. Text Only 1 2 3 4 I = identity = do not rotate X rotate 180 degree in X axis Y rotate 180 degree in Y axis Z rotate 180 degree in Z axis What is Bloch Sphere \u00b6 Bloch Sphere is used in vistualizing a quantum state. It is a ball, or a sphere, or a globe. But in fact this thing is totally useless in everyday quantum computing. But I think it might help you understanding more about how the proterty of \"commute\" related to Pauli Operator. So a sphere has three axis namely X Y Z. To introduce those axis. I would not tell you to take out you hand and say \"right hand rule\" or something like that because some folks may not have right hand. So instead I will use your head. Think of you head. There is a arrow sticking through your right and left ears. That is the X axis. Another arrow sticking through your nose and back of your head. That is Y axis. And the last arrow go through your neck and top of you head. That is Z axis. So you try rotating X axis. Rotate you head with respect to ear axis. Doing so, you point your head to the groud. And you find that your nose will not be facing the front any more. Your nose is facing the back now. And of course your head is pointing at different direction. Therefore you know that rotating X axis is not independent from Y and Z axis. Likewise, try rotate the Z axis. Namely, facing front, then turn your body 180 degree and now you are facing the back. And you know that you cannot do this without changing the direction of your nose and ears. Again, Z axis is not independent from X and Y axis. Therefore the action of rotating X Y Z axis is complely NOT COMMUTE. Same for the Pauli Operator. Text Only 1 2 3 XY != YX YZ != ZY ZX != XZ But one thing is independent. Let say you and your friend is standing side by side. No matter how your friend's head rotate, that do not affect you. Your head and your friend's head is completely independent from each other. This is the principle of Pauli Operator's tensor product. It is internally independent. Text Only 1 (Z1 Z2) x (X1) == (Z1 X2) x (Z2) == (ZX1 Z2) See that Z2 is unchanged. Because X1 only act on index 1. Although X1 is NON COMMUTE with Z1, it is COMMUTE with Z2. Pauli Operator form a Cyclic Group \u00b6 You do not need to know what mathematically a \"Group\" is. The only thing you need to know is this \"Cyclic Group\". So the problem is, yup Pauli Operator is NON COMMUTATIVE. But how can we predict the outcome of it? Here I write all the combination out. Let see you can spot out the pattern. Text Only 1 2 3 4 5 6 XY == iZ YX == -iZ YZ == iX ZY == -iX ZX == iY XZ == -iY For the I, because it stand for Identity and do nothing, IX = X and XI = X, etc, so I omit it. And you can see whatever you do, the result must be something within {X, Y, Z}. That \"i\" is imaginary number. Usually we ignore it because i is also independent with all Pauli Operator. So the rule is, think of it as a circle of triangle. Counting XYZ clockwise and anticlockwise. Text Only 1 2 X Z Y X -> Y is clockwise, which is positive, and you got the next element Z. Hence iZ Y -> X is anticlockwise, so you must have negative, and then the next element Z. Hence -iZ. Same law apply to all others. Or you can do this. List out all possible combination in a string. Text Only 1 X Y Z X Y Z X Y Z Say, ZY, so you look for it and find the matching pattern Text Only 1 X Y Z X [Y <- Z] X Y Z And follow the direction of the arrow, the next element is X. Thus ZY = -iX because the arrow is pointing at left. This property is said to be the Cyclic Group. But what about XX, or YY, or ZZ? This is kind of simple. If the same thing happened twice, nothing happened after all. i.e Text Only 1 2 3 4 II == I XX == I YY == I ZZ == I Why is that. Because just as what I mention earlier, Text Only 1 X rotate 180 degree in X axis So what happen if you do operation X twice? Text Only 1 rotate 180 degree, and rotate 180 degree in X axis That is the same as Text Only 1 rotate 360 degree in X axis = Do not rotate at all You can verify all these in the matrix form if you know how to do matrix multiplication. Or with some help of computer program, you should be able to get the same result. How to Make Fast Commutator \u00b6 So these knowledge lay the foundation for implementing Commutator in a faster way. To avoid getting too theoretical, I will first show you how to work on real world example. Here is a matrix generated from H2 molecule. Don't worry if this is your first time to do chemical calculation. It is just a bunch of number and stuffs. I don't even know what they mean exactly. Knowing how to deal with Pauli Operator is just enough for the task. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 coefficient Pauli Operator -0.106 [I0 I1 I2 ] +0.045 [X0 Z1 X2 ] +0.045 [X0 Z1 X2 Z3] +0.045 [Y0 Z1 Y2 ] +0.045 [Y0 Z1 Y2 Z3] +0.173 [Z0 ] +0.173 [Z0 Z1 ] +0.166 [Z0 Z1 Z2 ] +0.166 [Z0 Z1 Z2 Z3] +0.120 [Z0 Z2 ] +0.120 [Z0 Z2 Z3] +0.168 [ Z1 ] -0.221 [ Z1 Z2 Z3] +0.174 [ Z1 Z3] -0.221 [ Z2 ] The task is, we have to check that if this is commute with the thing below. Text Only 1 2 coefficient Pauli Operator +1.0 [Z0 Z2] Let A be the first upper one, and B be the below one. We need to compute AB - BA ?= 0 . As we can see, A is a sum of a bunch of Pauli Operator. For this kind of thing, we can use distribution law. Text Only 1 W * ( E + R ) == WE + WR # distribution law Therefor instead of doing the whole big thing at once, we can just do a single slice of it at a time. Like taking the first term out of A and check whether AB = BA. Text Only 1 2 3 4 5 6 A0 = -0.106 [I0 I1 I2] B = +1.0 [Z0 Z2] A0*B ?= B*A0 (-0.106 [I0 I1 I2] )(+1.0 [Z0 Z2] ) ?= (+1.0 [Z0 Z2] )(-0.106 [I0 I1 I2] ) We can just treat the coefficient as a coefficient, and Pauli Operator as a variable. We can split the task into two seperate part. Like 3y - 3y = 0, all we need to look at is Text Only 1 2 3 4 1. whether the coefficient is the same value. 2. whether the Pauli Operator is the exact same thing. (-0.106 * +1.0) [I0 I1 I2][Z0 Z2] ?= (+1.0 * -0.106) [Z0 Z2][I0 I1 I2] For the coefficient, since they are all number, they obey all law from algebra. Namely, commutative law and associative law of multiplication. Text Only 1 2 3 4 Let a,b,c be arbitrary number. a*b = b*a # commutative law a*b*c = a*(b*c) # associative law Therefore it do not matter you multiple two number left of right. Any order can produce the same value. Let say Ac is coefficient of A and Bc is of B, Text Only 1 2 3 4 5 6 Ac*Bc == Bc*Ac hence, Ac*Bc (AB) ?= Bc*Ac (BA) Ac*Bc (AB) ?= Ac*Bc (BA) # Ac*Bc = Bc*Ac (AB) ?= (BA) # cancel out Ac*Bc Absolutely we can ignore the coefficient, however, the only thing in coefficient that we have to worry about is the i produced after two non commute Pauli Operator multiplied together i.e. XY = iZ etc. Text Only 1 2 3 4 5 6 e.g. K = X, L = Y KL ?= LK XY ?= YX iZ ?= -iZ iZ != -iZ So although both side got the same Pauli Z, the sign of i disagree. If you got more than one set of Pauli Operator multiplied, you have to count for how many i are produced and keep track of the sign. Text Only 1 2 3 4 5 6 7 e.g. XY0 XY1 ?= YZ0 YZ1 iZ0 iZ1 ?= -iZ0 -iZ1 ii Z0 Z1 ?= --ii Z0 Z1 -1 Z0 Z1 ?= -1 Z0 Z1 -1 Z0 Z1 == -1 Z0 Z1 Almost the same configuration but this time commute. To conclue on issue among coefficient, only the i and their sign you should pay attention to. Other do not worth the effort because they are 100% sure to be the exact same value. So, lets focus on the Pauli Operator. Text Only 1 2 3 4 5 6 7 8 9 A0 = [I0 I1 I2] B = [Z0 Z2] A0*B ?= B*A0 For A0*B [I0 I1 I2][Z0 Z2] = [IZ0 I1 IZ2] You can see index 1 is not contained in B, so instead of doing the full length multiplication, we can just extract those index both A0 and B share. So the problem size is smaller. Text Only 1 [I0 I1 I2][Z0 Z2] = [I0 I2][Z0 Z2] = [IZ0 IZ2] Those index both A0 and B share are the main target. Still we need to see what is outside of main target. Here we can use the property of Pauli Operator that different index COMMUTE. So we don't need to care where to put them. Front of back, do not matter. Text Only 1 2 [IZ0 IZ2] -> {IZ0 IZ2}[I1] or [I1]{IZ0 IZ2} {}for target As I mention earlier, I stand for Identity thus it do nothing, therefore Text Only 1 {IZ0 IZ2} = {Z0 Z2} And since A0 contains only I, it is automatically known as commute. 100% sure. You don't even need to compute it. Text Only 1 because IZ = ZI, if only I is invlove, it must commute. Let see what if it is non commute. Text Only 1 2 3 4 A1 = +0.045 [X0 Z1 X2] B = +1.0 [Z0 Z2] A1*B ?= B*A1 Again, only need to check the targeted part. Text Only 1 2 3 4 5 6 7 8 9 A1 = +0.045 {X0 X2} B = +1.0 {Z0 Z2} A1*B ?= B*A1 XZ0 XZ2 ?= ZX0 ZX2 -iY0 -iY2 ?= iY0 iY2 --ii Y0 Y2 ?= ii Y0 Y2 Y0 Y2 == Y0 Y2 Appending the non targeted part, Text Only 1 Y0 Y2 Z1 == Y0 Y2 Z1 In fact you don't even need to check for the non targeted part to see whether all term match. The real power of Cyclic Group property of Pauli Operator is that it ensured that all tensor product of Pauli Operator is unique. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 We can seperate terms in such manner {target}[non target] The thing brother me is that target part will change accouding to what it is multiplied to. Like A3 = {target3}[non target3] A4 = {target4}[non target4] B = {targetB} A3*B != B*A3 by coefficient but if {target4 * targetB} == {target3} adding its coefficient to A3*B may lead to A3*B == B*A3 Will there be such situation? Turn out there is no such situation. Let say Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 A3 = {X}[non target3] A4 = {Y}[non target4] B = {Z} First of all, A3==A4 if and only if target3==target4, given they have exactly same [non target] term. So target3 must not be target4. Second, property from Cyclic Group ensure that A3*B != A4*B. XY = YX = Z YZ = ZY = X Third, since multiplying Pauli Operator is a binary operation, this make Cyclic Group 100% true. So by this uniqueness, we can do all comparison separately and sleep well.","title":"Pauli Operator, Commutator, Bloch sphere,  Binary Operation, and Cyclic\u00a0Group.md"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/#pauli-operator-commutator-bloch-sphere-binary-operation-and-cyclic-groupmd","text":"Sometimes a thing called \"Commutator\" is being used in Quantum Computing. In some particular algorithm that solve certain equation, Commutator is used extensively. However the problem is, how can we implement this function fast. The current implementation expecially in the quantum simulation package called OpenFermion is super slow, and I think maybe we can do a better job. What is commute What is Binary Operation Commutator in 20 word Pauli Operator What is Bloch Sphere Pauli Operator form a Cyclic Group How to Make Fast Commutator","title":"Pauli Operator, Commutator, Bloch sphere,  Binary Operation, and Cyclic\u00a0Group.md"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/#what-is-commute","text":"\"Commute\" is a algebraic property in mathematics. Let say that you have some operation. Say \"go to toilet\" and \"wash hand\". And when you execute those operation, in different order, the outcome and meaning is completely different. Text Only 1 2 go to toilet then wash hand wash hand then go to toilet However the best option should be Text Only 1 wash hand then go to toilet then wash hand Then we say \"go to toilet\" and \"wash hand\" is NOT COMMUTE. We cannot change the their order arbitrarily. So this is \"not commute\". Then what is \"commute\"? Think of \"walking front\" and \"walking left\". No matter what order you walk, you must go to the same after position. Then we say walking front\" and \"walking left\" is COMMUTE. When two operation is COMMUTE, they are INDEPENDENT operation with respect to each other. Doing one operation do not affect anything in another operation. Like moving up and down will not have any affection on the horizontal position of that thing. So a commutator is a function that we use to check whether two operation is commute with each other or not. It is a binary operation.","title":"What is\u00a0commute"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/#what-is-binary-operation","text":"\"Plus\" and \"Muliplication\" is binary operation. They are used to make a relationship of two object. Text Only 1 2 3 1 + 1 = 2 2 + 2 = 4 3 \u00d7 3 = 9 There is a machine called \"PLUS\" and you can only input two value into it. And then after that it produce a new value. Text Only 1 PLUS(1,1) => 2 This machine/function can take only two number. Likewise, commutator is binary operation.","title":"What is Binary Operation"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/#commutator-in-20-word","text":"Text Only 1 2 3 Let A, B be two operation. Check AB - BA ?= 0 Explain: if A and B commute, then AB should have the same value as BA. And because of that, when you subtract them, you are subtracting the same value. So the result must be zero. State it inversely. If AB subtract BA is not equal to zero, A and B is not commute to each other.","title":"Commutator in 20\u00a0word"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/#pauli-operator","text":"Pauli Operator a set of operation in quantum computing. They are denoted as Text Only 1 I, X, Y, Z In their matrix form Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 I := [ 1 0 ] [ 0 1 ] X := [ 0 1 ] [ 1 0 ] Y := [ 0 -i ] [ i 0 ] Z := [ 1 0 ] [ 0 -1 ] The \"i\" in Y is the \"i\" of imaginary number. Why is this name. Because they represented the rotation axis of Bloch Sphere. Each Pauli Operator mean that you rotate the Bloch Sphere in the same axis of its name. Text Only 1 2 3 4 I = identity = do not rotate X rotate 180 degree in X axis Y rotate 180 degree in Y axis Z rotate 180 degree in Z axis","title":"Pauli\u00a0Operator"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/#what-is-bloch-sphere","text":"Bloch Sphere is used in vistualizing a quantum state. It is a ball, or a sphere, or a globe. But in fact this thing is totally useless in everyday quantum computing. But I think it might help you understanding more about how the proterty of \"commute\" related to Pauli Operator. So a sphere has three axis namely X Y Z. To introduce those axis. I would not tell you to take out you hand and say \"right hand rule\" or something like that because some folks may not have right hand. So instead I will use your head. Think of you head. There is a arrow sticking through your right and left ears. That is the X axis. Another arrow sticking through your nose and back of your head. That is Y axis. And the last arrow go through your neck and top of you head. That is Z axis. So you try rotating X axis. Rotate you head with respect to ear axis. Doing so, you point your head to the groud. And you find that your nose will not be facing the front any more. Your nose is facing the back now. And of course your head is pointing at different direction. Therefore you know that rotating X axis is not independent from Y and Z axis. Likewise, try rotate the Z axis. Namely, facing front, then turn your body 180 degree and now you are facing the back. And you know that you cannot do this without changing the direction of your nose and ears. Again, Z axis is not independent from X and Y axis. Therefore the action of rotating X Y Z axis is complely NOT COMMUTE. Same for the Pauli Operator. Text Only 1 2 3 XY != YX YZ != ZY ZX != XZ But one thing is independent. Let say you and your friend is standing side by side. No matter how your friend's head rotate, that do not affect you. Your head and your friend's head is completely independent from each other. This is the principle of Pauli Operator's tensor product. It is internally independent. Text Only 1 (Z1 Z2) x (X1) == (Z1 X2) x (Z2) == (ZX1 Z2) See that Z2 is unchanged. Because X1 only act on index 1. Although X1 is NON COMMUTE with Z1, it is COMMUTE with Z2.","title":"What is Bloch\u00a0Sphere"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/#pauli-operator-form-a-cyclic-group","text":"You do not need to know what mathematically a \"Group\" is. The only thing you need to know is this \"Cyclic Group\". So the problem is, yup Pauli Operator is NON COMMUTATIVE. But how can we predict the outcome of it? Here I write all the combination out. Let see you can spot out the pattern. Text Only 1 2 3 4 5 6 XY == iZ YX == -iZ YZ == iX ZY == -iX ZX == iY XZ == -iY For the I, because it stand for Identity and do nothing, IX = X and XI = X, etc, so I omit it. And you can see whatever you do, the result must be something within {X, Y, Z}. That \"i\" is imaginary number. Usually we ignore it because i is also independent with all Pauli Operator. So the rule is, think of it as a circle of triangle. Counting XYZ clockwise and anticlockwise. Text Only 1 2 X Z Y X -> Y is clockwise, which is positive, and you got the next element Z. Hence iZ Y -> X is anticlockwise, so you must have negative, and then the next element Z. Hence -iZ. Same law apply to all others. Or you can do this. List out all possible combination in a string. Text Only 1 X Y Z X Y Z X Y Z Say, ZY, so you look for it and find the matching pattern Text Only 1 X Y Z X [Y <- Z] X Y Z And follow the direction of the arrow, the next element is X. Thus ZY = -iX because the arrow is pointing at left. This property is said to be the Cyclic Group. But what about XX, or YY, or ZZ? This is kind of simple. If the same thing happened twice, nothing happened after all. i.e Text Only 1 2 3 4 II == I XX == I YY == I ZZ == I Why is that. Because just as what I mention earlier, Text Only 1 X rotate 180 degree in X axis So what happen if you do operation X twice? Text Only 1 rotate 180 degree, and rotate 180 degree in X axis That is the same as Text Only 1 rotate 360 degree in X axis = Do not rotate at all You can verify all these in the matrix form if you know how to do matrix multiplication. Or with some help of computer program, you should be able to get the same result.","title":"Pauli Operator form a Cyclic\u00a0Group"},{"location":"toward_science/Pauli%20Operator%2C%20Commutator%2C%20Bloch%20sphere%2C%20%20Binary%20Operation%2C%20and%20Cyclic%C2%A0Group.md/#how-to-make-fast-commutator","text":"So these knowledge lay the foundation for implementing Commutator in a faster way. To avoid getting too theoretical, I will first show you how to work on real world example. Here is a matrix generated from H2 molecule. Don't worry if this is your first time to do chemical calculation. It is just a bunch of number and stuffs. I don't even know what they mean exactly. Knowing how to deal with Pauli Operator is just enough for the task. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 coefficient Pauli Operator -0.106 [I0 I1 I2 ] +0.045 [X0 Z1 X2 ] +0.045 [X0 Z1 X2 Z3] +0.045 [Y0 Z1 Y2 ] +0.045 [Y0 Z1 Y2 Z3] +0.173 [Z0 ] +0.173 [Z0 Z1 ] +0.166 [Z0 Z1 Z2 ] +0.166 [Z0 Z1 Z2 Z3] +0.120 [Z0 Z2 ] +0.120 [Z0 Z2 Z3] +0.168 [ Z1 ] -0.221 [ Z1 Z2 Z3] +0.174 [ Z1 Z3] -0.221 [ Z2 ] The task is, we have to check that if this is commute with the thing below. Text Only 1 2 coefficient Pauli Operator +1.0 [Z0 Z2] Let A be the first upper one, and B be the below one. We need to compute AB - BA ?= 0 . As we can see, A is a sum of a bunch of Pauli Operator. For this kind of thing, we can use distribution law. Text Only 1 W * ( E + R ) == WE + WR # distribution law Therefor instead of doing the whole big thing at once, we can just do a single slice of it at a time. Like taking the first term out of A and check whether AB = BA. Text Only 1 2 3 4 5 6 A0 = -0.106 [I0 I1 I2] B = +1.0 [Z0 Z2] A0*B ?= B*A0 (-0.106 [I0 I1 I2] )(+1.0 [Z0 Z2] ) ?= (+1.0 [Z0 Z2] )(-0.106 [I0 I1 I2] ) We can just treat the coefficient as a coefficient, and Pauli Operator as a variable. We can split the task into two seperate part. Like 3y - 3y = 0, all we need to look at is Text Only 1 2 3 4 1. whether the coefficient is the same value. 2. whether the Pauli Operator is the exact same thing. (-0.106 * +1.0) [I0 I1 I2][Z0 Z2] ?= (+1.0 * -0.106) [Z0 Z2][I0 I1 I2] For the coefficient, since they are all number, they obey all law from algebra. Namely, commutative law and associative law of multiplication. Text Only 1 2 3 4 Let a,b,c be arbitrary number. a*b = b*a # commutative law a*b*c = a*(b*c) # associative law Therefore it do not matter you multiple two number left of right. Any order can produce the same value. Let say Ac is coefficient of A and Bc is of B, Text Only 1 2 3 4 5 6 Ac*Bc == Bc*Ac hence, Ac*Bc (AB) ?= Bc*Ac (BA) Ac*Bc (AB) ?= Ac*Bc (BA) # Ac*Bc = Bc*Ac (AB) ?= (BA) # cancel out Ac*Bc Absolutely we can ignore the coefficient, however, the only thing in coefficient that we have to worry about is the i produced after two non commute Pauli Operator multiplied together i.e. XY = iZ etc. Text Only 1 2 3 4 5 6 e.g. K = X, L = Y KL ?= LK XY ?= YX iZ ?= -iZ iZ != -iZ So although both side got the same Pauli Z, the sign of i disagree. If you got more than one set of Pauli Operator multiplied, you have to count for how many i are produced and keep track of the sign. Text Only 1 2 3 4 5 6 7 e.g. XY0 XY1 ?= YZ0 YZ1 iZ0 iZ1 ?= -iZ0 -iZ1 ii Z0 Z1 ?= --ii Z0 Z1 -1 Z0 Z1 ?= -1 Z0 Z1 -1 Z0 Z1 == -1 Z0 Z1 Almost the same configuration but this time commute. To conclue on issue among coefficient, only the i and their sign you should pay attention to. Other do not worth the effort because they are 100% sure to be the exact same value. So, lets focus on the Pauli Operator. Text Only 1 2 3 4 5 6 7 8 9 A0 = [I0 I1 I2] B = [Z0 Z2] A0*B ?= B*A0 For A0*B [I0 I1 I2][Z0 Z2] = [IZ0 I1 IZ2] You can see index 1 is not contained in B, so instead of doing the full length multiplication, we can just extract those index both A0 and B share. So the problem size is smaller. Text Only 1 [I0 I1 I2][Z0 Z2] = [I0 I2][Z0 Z2] = [IZ0 IZ2] Those index both A0 and B share are the main target. Still we need to see what is outside of main target. Here we can use the property of Pauli Operator that different index COMMUTE. So we don't need to care where to put them. Front of back, do not matter. Text Only 1 2 [IZ0 IZ2] -> {IZ0 IZ2}[I1] or [I1]{IZ0 IZ2} {}for target As I mention earlier, I stand for Identity thus it do nothing, therefore Text Only 1 {IZ0 IZ2} = {Z0 Z2} And since A0 contains only I, it is automatically known as commute. 100% sure. You don't even need to compute it. Text Only 1 because IZ = ZI, if only I is invlove, it must commute. Let see what if it is non commute. Text Only 1 2 3 4 A1 = +0.045 [X0 Z1 X2] B = +1.0 [Z0 Z2] A1*B ?= B*A1 Again, only need to check the targeted part. Text Only 1 2 3 4 5 6 7 8 9 A1 = +0.045 {X0 X2} B = +1.0 {Z0 Z2} A1*B ?= B*A1 XZ0 XZ2 ?= ZX0 ZX2 -iY0 -iY2 ?= iY0 iY2 --ii Y0 Y2 ?= ii Y0 Y2 Y0 Y2 == Y0 Y2 Appending the non targeted part, Text Only 1 Y0 Y2 Z1 == Y0 Y2 Z1 In fact you don't even need to check for the non targeted part to see whether all term match. The real power of Cyclic Group property of Pauli Operator is that it ensured that all tensor product of Pauli Operator is unique. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 We can seperate terms in such manner {target}[non target] The thing brother me is that target part will change accouding to what it is multiplied to. Like A3 = {target3}[non target3] A4 = {target4}[non target4] B = {targetB} A3*B != B*A3 by coefficient but if {target4 * targetB} == {target3} adding its coefficient to A3*B may lead to A3*B == B*A3 Will there be such situation? Turn out there is no such situation. Let say Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 A3 = {X}[non target3] A4 = {Y}[non target4] B = {Z} First of all, A3==A4 if and only if target3==target4, given they have exactly same [non target] term. So target3 must not be target4. Second, property from Cyclic Group ensure that A3*B != A4*B. XY = YX = Z YZ = ZY = X Third, since multiplying Pauli Operator is a binary operation, this make Cyclic Group 100% true. So by this uniqueness, we can do all comparison separately and sleep well.","title":"How to Make Fast Commutator"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/","text":"So What Exactly is happenig in Matrix Multiplication? \u00b6 Assuming Motivation of Matrix * Vector Non square matrix? Matrix * Matrix How are these related to deep learning? Matrix Multiplication in Linear Algebra is probably the most spooky and mysterious mathematical function in the world. You can look it up in any textbooks, they suck, none of them really talk about how it works, why it works in that way, and why not the other ways. Turn out no one seems understand what exactly is happening in Matrix Multiplication? I heard you say \"no, you are wrong, I am one of the authors of that pile of books and I am sure I know my stuff\". Oh yeah? Prove my that. Oh you have already proved that. You wrote a book. And the content doesn't reflect that you understand Matrix at all. So here is me, after reading several of those insufferable textbooks, giving up understanding what really is a Matrix and its Multiplication. Then this idea comes up with my mind when I was reading a book about deep learning few days ago... Assuming \u00b6 I assume reader of this article has basic ideas about Vector, Matrix, Inner Product. Also I assume that reader do not understand the way that why Matrix multiply stuffs in that way. Text Only 1 2 3 [ 1 2 3 ] * [ x i t ] = [ 1x+2y+3z blah blah ] [ 4 5 6 ] [ y j u ] [ blah blah blah ] [ 7 8 9 ] [ z k v ] [ blah blah blah ] I assume that you are asking: ^What the ** does this means???? Motivation of Matrix * Vector \u00b6 Let say there exist some factors, represented as a vector Text Only 1 2 3 v = [v1] [v2] [v3] v is a vector, so I make it into a conventional column vector. v consist of 3 components of v1 v2 v3. And there are actions being token upon those values of v1 v2 v3. For example they represent wages of labers. The boss devided to increase everybody's wages by 100%. How are you going to computer that using vector? Text Only 1 2 3 4 5 6 7 new_v = 2 * [v1] [v2] [v3] = [2 v1] [2 v2] [2 v3] This is how you would do it. Multiple every component of the vector by a common scalar quantity. This sounds easy, but what about this. The boss now decided to increase everyone's wages by the total sum of 10% of their colleagues' wages. Now you cannot simply multiply a scalar quantity and call it a day. You need to look at other people's wages in order to determine the amount of increment. Rephase in the language of mathematical function: Before: Text Only 1 2 3 4 eq.1) new_v1 = 2 * v1 define this as function f as func_f . f is a function of variable v1. After: Text Only 1 2 3 4 eq.2) new_v1 = v1 + 0.1*v2 + 0.1*v3 define this as function g as func_g . g is a function of variables {v1, v2, v3} . Now that you see eq.2 got more variables on the right side of the equation, also indicate that it is a multi-variable function. new_v1 do not only rely on the value of old_v1, only rely on old value from v2 and v3. This sounds like non-STEM people talking about society issues. \"XX phenomenon is due to many factors thus it is complicated, so that we need more research into that blah blah blah\". Of couse you need more research. But speaking of research, we have already had the right tool for anlysing this kind of multi-factor multi-cause phenomenon. This tool is called Linear Algebra. So how can Linear Algebra solve this kind of multi-factor problem? You do a Matrix Multiplication. First consider just the case of v1. Namely, the process of old_v1 transfer to new_v1. Text Only 1 2 3 4 5 new_v1 = [1 0.1 0.1] * [v1] [v2] [v3] = 1*v1 + 0.1*v2 + 0.1*v3 So this is a vector * vector situation. Or formally you may call it a \"inner product\" or a \"scalar product\". Looking at the right side of the equation, there is a row vector on the left and column vector on the right, you multiply them component-wise, and that add them together. The result will be a scaler quantity, not vector. This is how you produce the new value of v1. Through the inner product, now you are mixing up the values of all components. new_v1 have some portion of v2 and some portion of v3 in it. So this is a multi-factor stuff! And there is hidden parameter underneath this inner product. That is, components of all vectors are position-aware. You must not alter any of the position arbitrarily. Let say swaping 1 and 0.1 in the row vector for fun, and you will get the wrong answer. Text Only 1 2 3 4 5 new_v1' = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 It is because the position matters. The position means something even it is not written out. In particular, in the column vector, from top to the bottom, it contains the information of colleague no.1 to 3 respectively. And in the row vector, from left to right, it contains the information the coefficient you wanted to multiply toward colleague no.1 to 3's wages respectively. Text Only 1 2 3 [coef for v1, coef for v2, coef for v3] * [v1=wage of colleague 1] [v2=wage of colleague 2] [v3=wage of colleague 3] You can subsitute any real value you like, as long as you obey the idea of what meaning does that position represents. So this is the case for new_v1. What about new_v2 and new_v3? Text Only 1 2 3 4 5 6 7 8 9 10 11 new_v2 = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 new_v3 = [0.1 0.1 1] * [v1] [v2] [v3] = 0.1*v1 + 0.1*v2 + 1*v3 You can see that they are structually the same accross v1 v2 v3. They are all inner product. Now, we are producting the new wage one-by-one, which seems inefficient. Is there a way to do all for once? Yes. That is the Matrix * Vector. Before going into Matrix * Vector, there is a key idea that must be recap. That is, components in the column vector is position-aware and you can not change that afterwards. Namely: Text Only 1 2 3 [v1=wage of colleague 1] [v2=wage of colleague 2] [v3=wage of colleague 3] Thus after computing their new wages, the position excusively for one person is still reserved for that same person. Text Only 1 2 3 [old_v1] -> [new_v1] [old_v2] -> [new_v2] [old_v3] -> [new_v3] Column vector is still column vector, and that position is still representing the particular person's wage. In one word, the column vector must maintain the exact same structure after Matrix * Vector. To be clear: This is what we have already know. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 new_v1 = [1 0.1 0.1] * [v1] [v2] [v3] = 1*v1 + 0.1*v2 + 0.1*v3 = new_v1 new_v2 = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 = new_v2 new_v3 = [0.1 0.1 1] * [v1] [v2] [v3] = 0.1*v1 + 0.1*v2 + 1*v3 = new_v2 And they should be in this structure. Text Only 1 2 3 [new_v1] [new_v2] [new_v3] You may have already see this coming. You just combine them structurely. Text Only 1 2 3 [ 1 0.1 0.1] * [v1] = [new_v1] [0.1 1 0.1] [v2] [new_v2] [0.1 0.1 1 ] [v3] [new_v3] To make it visually making more sense, I should write it in this way. Text Only 1 2 3 4 5 6 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs new_v1 > [ 1 0.1 0.1] = [new_v1] this row outputs new_v2 > [0.1 1 0.1] [new_v2] this row outputs new_v3 > [0.1 0.1 1 ] [new_v3] This answers two questions at the same time. Why is that multiplying a matrix need to do row-column, row-column kind of stuff (as what conventional textbooks told you to do) ? It is to maintain the structure of the input vector. Meanwhile, still has to make sure the output is a linear combination of the old ones ( namely new_v1 = a*v1 + b*v2 + c*v3 ) . So that you are able to deal with the \"many things are inter-related to each other\" hard problem. Non square matrix? \u00b6 But there also exist non square matrix in the world, as the only matrix presented in the previous section is merely a square matrix. How can I make sense to any of those non square matrix? Recap the last picture in the previous section. Text Only 1 2 3 4 5 6 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs new_v1 > [ 1 0.1 0.1] = [new_v1] this row outputs new_v2 > [0.1 1 0.1] [new_v2] this row outputs new_v3 > [0.1 0.1 1 ] [new_v3] Previously, we are considering the positional meaning of the output vector is the same as the input vector. They still representing wages of someone. What if now it does not anymore. Say, now these 3 colleagues's wages are affecting other stuffs. For example they will spend their money on their weekend, and there are many local stores in the shopping mall. Somehow you get to know how exactly they are going to spend on those stores. Thus you can have this new matrix multiplication. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs shop1_sales > [ 1 0 3 ] = [shop1_sales] this row outputs shop2_sales > [ 0 2 0 ] [shop2_sales] this row outputs shop3_sales > [ 3 0 4 ] [shop3_sales] this row outputs shop4_sales > [ 2 1 2 ] [shop4_sales] this row outputs shop5_sales > [ 1 5 0 ] [shop5_sales] [ 1 0 3 ] * [v1] = [shop1_sales] [ 0 2 0 ] [v2] [shop2_sales] [ 3 0 4 ] [v3] [shop3_sales] [ 2 1 2 ] [shop4_sales] [ 1 5 0 ] [shop5_sales] By such non square Matrix Multiplication, not only you have changed the size of the vector outcome, you also changed what those components in the vector are standing for. And these changes are intended and information of what stands for what is embeded in the Matrix you choose to multiply. Does this make sense? Matrix * Matrix \u00b6 So, as the boss increase their wages, they can spend more to buy things. And they are not going to change their shopping behavior at all. And you want to see what is the different between now and then. You can do this, Matrix * Matrix . Text Only 1 2 3 4 5 [ 1 0 3 ] * [v1 new_v1] = [shop1_sales new_shop1_sales] [ 0 2 0 ] [v2 new_v2] [shop2_sales new_shop2_sales] [ 3 0 4 ] [v3 new_v1] [shop3_sales new_shop3_sales] [ 2 1 2 ] [shop4_sales new_shop4_sales] [ 1 5 0 ] [shop5_sales new_shop5_sales] Or this can be, somehow there is another team of colleagues consist of 3 people (w1 w2 w3), also they shop on the same shopping mall in the weekend and the way they spend their money is totally the same as those 3 people back there. Text Only 1 2 3 4 5 [ 1 0 3 ] * [v1 w1] = [shop1_sales_by_v new_shop1_sales_by_w] [ 0 2 0 ] [v2 w2] [shop2_sales_by_v new_shop2_sales_by_w] [ 3 0 4 ] [v3 w3] [shop3_sales_by_v new_shop3_sales_by_w] [ 2 1 2 ] [shop4_sales_by_v new_shop4_sales_by_w] [ 1 5 0 ] [shop5_sales_by_v new_shop5_sales_by_w] How are these related to deep learning? \u00b6 As I explained in this article, using matrix multiplication help you solve that \"many things are inter-related to each other\" problem, this is why machine learning use Linear Algebra as its backbone. For example there is a picture. You are going to write a program to determin what is in the picture. There may be a person in the picture, or maybe a dog, or a cat, or a flower. But this task is not easy at all per the programming point of view. There may be hair-like stuff in the picture but that doesn't automatically lead to the conclusion that there is a dog inside the picture. A dog is more that hairs. Maybe paws + hairs + big eyes + more can satisfy most of the features of a dog. But writing such program to capture all the features of a dog is overwhelmingly complex. What should you do? Matrix multiplication. Text Only 1 2 3 4 5 6 7 8 9 Matrix * [pixel1] = [feature1] [pixel2] [feature2] [pixel3] [feature3] . [feature4] . [feature5] . [feature6] . . . After gone through all the previous sections you should be able to see how this works. Otherwise just inform me that my explaination sucks. I will try improve it and edit it if you request. So ultimately you want to extract whether there is this feature or that feature from the original picture. You multiply the vector consitute of information of the original picture by the specific matrix. So that for example the feature1, will be a linear combination of all the pixels. Text Only 1 feature1 = a*pixel1 + b*pixel2 + c*pixel3 + ... For instance, if feature49 requires that pixel1, 3, 26 are filled with color at the same time, and everything else are leave blank: Text Only 1 feature49 = +a*pixel1 -b*picel2 +c*pixel3 -d*pixel4 -... + z*pixel26 Every pixel that is not in {1,3,26} contribute nagetively to the value of feature49. Only when pixels in {1,3,26} are filled with colors and not the others satisfy the existence of feature49, otherwise the picture do not have feature49. So you extracted the basic features from picture. There is more you can do. What about combination of basic features. For example a more complex feature that requires feature1 and feature2 's co-existence. Like recognizing hairs and paws. The next step is to recogize that \"having hairs and having paws at the same time\" is important than either one of those. So there is another matrix multiplication for this. Text Only 1 2 3 4 5 6 7 8 9 10 11 Matrix2 * [feature1] = [complex_feature1] [feature2] [complex_feature2] [feature3] [complex_feature3] [feature4] [complex_feature4] [feature5] [complex_feature5] [feature6] [complex_feature6] . [complex_feature7] . [complex_feature8] . . . . And you can do this again and again and agin... finally you have a row vactor that decides which super complex feature indicates that it is highly likely to have a dog inside a picture. Text Only 1 2 3 4 5 6 7 8 9 Row Vector * [super_complex_feature1] = (a scalar. zero or one. yes or no.) [super_complex_feature2] [super_complex_feature3] [super_complex_feature4] [super_complex_feature5] [super_complex_feature6] . . . Now deep learning make sense too, after understanding what is happening in Matrix Multiplication. And also it is not hard to understand that solving problems through Linear Algebra can handle way more complex problems then any methods by non-STEM scholars. You sure can have absurbly larger matrix to represent every single distinct feature of everything to study how they are inter-related to each other. But what I have seen in the non-STEM field? Ploting a 3 dimensional graph is maxium. All they can imagine is up to 3 features. Hairs and paws and big-eyes and 4-legs for a dog? That counts to 4 and it is way to complicated for human to understand. \"You can never understand a dog through numbers\" is what they will say. But I disagree.","title":"So What Exactly is happenig in Matrix Multiplication?"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#so-what-exactly-is-happenig-in-matrix-multiplication","text":"Assuming Motivation of Matrix * Vector Non square matrix? Matrix * Matrix How are these related to deep learning? Matrix Multiplication in Linear Algebra is probably the most spooky and mysterious mathematical function in the world. You can look it up in any textbooks, they suck, none of them really talk about how it works, why it works in that way, and why not the other ways. Turn out no one seems understand what exactly is happening in Matrix Multiplication? I heard you say \"no, you are wrong, I am one of the authors of that pile of books and I am sure I know my stuff\". Oh yeah? Prove my that. Oh you have already proved that. You wrote a book. And the content doesn't reflect that you understand Matrix at all. So here is me, after reading several of those insufferable textbooks, giving up understanding what really is a Matrix and its Multiplication. Then this idea comes up with my mind when I was reading a book about deep learning few days ago...","title":"So What Exactly is happenig in Matrix Multiplication?"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#assuming","text":"I assume reader of this article has basic ideas about Vector, Matrix, Inner Product. Also I assume that reader do not understand the way that why Matrix multiply stuffs in that way. Text Only 1 2 3 [ 1 2 3 ] * [ x i t ] = [ 1x+2y+3z blah blah ] [ 4 5 6 ] [ y j u ] [ blah blah blah ] [ 7 8 9 ] [ z k v ] [ blah blah blah ] I assume that you are asking: ^What the ** does this means????","title":"Assuming"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#motivation-of-matrix-vector","text":"Let say there exist some factors, represented as a vector Text Only 1 2 3 v = [v1] [v2] [v3] v is a vector, so I make it into a conventional column vector. v consist of 3 components of v1 v2 v3. And there are actions being token upon those values of v1 v2 v3. For example they represent wages of labers. The boss devided to increase everybody's wages by 100%. How are you going to computer that using vector? Text Only 1 2 3 4 5 6 7 new_v = 2 * [v1] [v2] [v3] = [2 v1] [2 v2] [2 v3] This is how you would do it. Multiple every component of the vector by a common scalar quantity. This sounds easy, but what about this. The boss now decided to increase everyone's wages by the total sum of 10% of their colleagues' wages. Now you cannot simply multiply a scalar quantity and call it a day. You need to look at other people's wages in order to determine the amount of increment. Rephase in the language of mathematical function: Before: Text Only 1 2 3 4 eq.1) new_v1 = 2 * v1 define this as function f as func_f . f is a function of variable v1. After: Text Only 1 2 3 4 eq.2) new_v1 = v1 + 0.1*v2 + 0.1*v3 define this as function g as func_g . g is a function of variables {v1, v2, v3} . Now that you see eq.2 got more variables on the right side of the equation, also indicate that it is a multi-variable function. new_v1 do not only rely on the value of old_v1, only rely on old value from v2 and v3. This sounds like non-STEM people talking about society issues. \"XX phenomenon is due to many factors thus it is complicated, so that we need more research into that blah blah blah\". Of couse you need more research. But speaking of research, we have already had the right tool for anlysing this kind of multi-factor multi-cause phenomenon. This tool is called Linear Algebra. So how can Linear Algebra solve this kind of multi-factor problem? You do a Matrix Multiplication. First consider just the case of v1. Namely, the process of old_v1 transfer to new_v1. Text Only 1 2 3 4 5 new_v1 = [1 0.1 0.1] * [v1] [v2] [v3] = 1*v1 + 0.1*v2 + 0.1*v3 So this is a vector * vector situation. Or formally you may call it a \"inner product\" or a \"scalar product\". Looking at the right side of the equation, there is a row vector on the left and column vector on the right, you multiply them component-wise, and that add them together. The result will be a scaler quantity, not vector. This is how you produce the new value of v1. Through the inner product, now you are mixing up the values of all components. new_v1 have some portion of v2 and some portion of v3 in it. So this is a multi-factor stuff! And there is hidden parameter underneath this inner product. That is, components of all vectors are position-aware. You must not alter any of the position arbitrarily. Let say swaping 1 and 0.1 in the row vector for fun, and you will get the wrong answer. Text Only 1 2 3 4 5 new_v1' = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 It is because the position matters. The position means something even it is not written out. In particular, in the column vector, from top to the bottom, it contains the information of colleague no.1 to 3 respectively. And in the row vector, from left to right, it contains the information the coefficient you wanted to multiply toward colleague no.1 to 3's wages respectively. Text Only 1 2 3 [coef for v1, coef for v2, coef for v3] * [v1=wage of colleague 1] [v2=wage of colleague 2] [v3=wage of colleague 3] You can subsitute any real value you like, as long as you obey the idea of what meaning does that position represents. So this is the case for new_v1. What about new_v2 and new_v3? Text Only 1 2 3 4 5 6 7 8 9 10 11 new_v2 = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 new_v3 = [0.1 0.1 1] * [v1] [v2] [v3] = 0.1*v1 + 0.1*v2 + 1*v3 You can see that they are structually the same accross v1 v2 v3. They are all inner product. Now, we are producting the new wage one-by-one, which seems inefficient. Is there a way to do all for once? Yes. That is the Matrix * Vector. Before going into Matrix * Vector, there is a key idea that must be recap. That is, components in the column vector is position-aware and you can not change that afterwards. Namely: Text Only 1 2 3 [v1=wage of colleague 1] [v2=wage of colleague 2] [v3=wage of colleague 3] Thus after computing their new wages, the position excusively for one person is still reserved for that same person. Text Only 1 2 3 [old_v1] -> [new_v1] [old_v2] -> [new_v2] [old_v3] -> [new_v3] Column vector is still column vector, and that position is still representing the particular person's wage. In one word, the column vector must maintain the exact same structure after Matrix * Vector. To be clear: This is what we have already know. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 new_v1 = [1 0.1 0.1] * [v1] [v2] [v3] = 1*v1 + 0.1*v2 + 0.1*v3 = new_v1 new_v2 = [0.1 1 0.1] * [v1] [v2] [v3] = 0.1*v1 + 1*v2 + 0.1*v3 = new_v2 new_v3 = [0.1 0.1 1] * [v1] [v2] [v3] = 0.1*v1 + 0.1*v2 + 1*v3 = new_v2 And they should be in this structure. Text Only 1 2 3 [new_v1] [new_v2] [new_v3] You may have already see this coming. You just combine them structurely. Text Only 1 2 3 [ 1 0.1 0.1] * [v1] = [new_v1] [0.1 1 0.1] [v2] [new_v2] [0.1 0.1 1 ] [v3] [new_v3] To make it visually making more sense, I should write it in this way. Text Only 1 2 3 4 5 6 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs new_v1 > [ 1 0.1 0.1] = [new_v1] this row outputs new_v2 > [0.1 1 0.1] [new_v2] this row outputs new_v3 > [0.1 0.1 1 ] [new_v3] This answers two questions at the same time. Why is that multiplying a matrix need to do row-column, row-column kind of stuff (as what conventional textbooks told you to do) ? It is to maintain the structure of the input vector. Meanwhile, still has to make sure the output is a linear combination of the old ones ( namely new_v1 = a*v1 + b*v2 + c*v3 ) . So that you are able to deal with the \"many things are inter-related to each other\" hard problem.","title":"Motivation of Matrix * Vector"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#non-square-matrix","text":"But there also exist non square matrix in the world, as the only matrix presented in the previous section is merely a square matrix. How can I make sense to any of those non square matrix? Recap the last picture in the previous section. Text Only 1 2 3 4 5 6 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs new_v1 > [ 1 0.1 0.1] = [new_v1] this row outputs new_v2 > [0.1 1 0.1] [new_v2] this row outputs new_v3 > [0.1 0.1 1 ] [new_v3] Previously, we are considering the positional meaning of the output vector is the same as the input vector. They still representing wages of someone. What if now it does not anymore. Say, now these 3 colleagues's wages are affecting other stuffs. For example they will spend their money on their weekend, and there are many local stores in the shopping mall. Somehow you get to know how exactly they are going to spend on those stores. Thus you can have this new matrix multiplication. Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 multiply their values to everyone in the same column > [ v1 v2 v3] this row outputs shop1_sales > [ 1 0 3 ] = [shop1_sales] this row outputs shop2_sales > [ 0 2 0 ] [shop2_sales] this row outputs shop3_sales > [ 3 0 4 ] [shop3_sales] this row outputs shop4_sales > [ 2 1 2 ] [shop4_sales] this row outputs shop5_sales > [ 1 5 0 ] [shop5_sales] [ 1 0 3 ] * [v1] = [shop1_sales] [ 0 2 0 ] [v2] [shop2_sales] [ 3 0 4 ] [v3] [shop3_sales] [ 2 1 2 ] [shop4_sales] [ 1 5 0 ] [shop5_sales] By such non square Matrix Multiplication, not only you have changed the size of the vector outcome, you also changed what those components in the vector are standing for. And these changes are intended and information of what stands for what is embeded in the Matrix you choose to multiply. Does this make sense?","title":"Non square matrix?"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#matrix-matrix","text":"So, as the boss increase their wages, they can spend more to buy things. And they are not going to change their shopping behavior at all. And you want to see what is the different between now and then. You can do this, Matrix * Matrix . Text Only 1 2 3 4 5 [ 1 0 3 ] * [v1 new_v1] = [shop1_sales new_shop1_sales] [ 0 2 0 ] [v2 new_v2] [shop2_sales new_shop2_sales] [ 3 0 4 ] [v3 new_v1] [shop3_sales new_shop3_sales] [ 2 1 2 ] [shop4_sales new_shop4_sales] [ 1 5 0 ] [shop5_sales new_shop5_sales] Or this can be, somehow there is another team of colleagues consist of 3 people (w1 w2 w3), also they shop on the same shopping mall in the weekend and the way they spend their money is totally the same as those 3 people back there. Text Only 1 2 3 4 5 [ 1 0 3 ] * [v1 w1] = [shop1_sales_by_v new_shop1_sales_by_w] [ 0 2 0 ] [v2 w2] [shop2_sales_by_v new_shop2_sales_by_w] [ 3 0 4 ] [v3 w3] [shop3_sales_by_v new_shop3_sales_by_w] [ 2 1 2 ] [shop4_sales_by_v new_shop4_sales_by_w] [ 1 5 0 ] [shop5_sales_by_v new_shop5_sales_by_w]","title":"Matrix * Matrix"},{"location":"toward_science/So%20What%20Exactly%20is%20happenig%20in%20Matrix%20Multiplication/#how-are-these-related-to-deep-learning","text":"As I explained in this article, using matrix multiplication help you solve that \"many things are inter-related to each other\" problem, this is why machine learning use Linear Algebra as its backbone. For example there is a picture. You are going to write a program to determin what is in the picture. There may be a person in the picture, or maybe a dog, or a cat, or a flower. But this task is not easy at all per the programming point of view. There may be hair-like stuff in the picture but that doesn't automatically lead to the conclusion that there is a dog inside the picture. A dog is more that hairs. Maybe paws + hairs + big eyes + more can satisfy most of the features of a dog. But writing such program to capture all the features of a dog is overwhelmingly complex. What should you do? Matrix multiplication. Text Only 1 2 3 4 5 6 7 8 9 Matrix * [pixel1] = [feature1] [pixel2] [feature2] [pixel3] [feature3] . [feature4] . [feature5] . [feature6] . . . After gone through all the previous sections you should be able to see how this works. Otherwise just inform me that my explaination sucks. I will try improve it and edit it if you request. So ultimately you want to extract whether there is this feature or that feature from the original picture. You multiply the vector consitute of information of the original picture by the specific matrix. So that for example the feature1, will be a linear combination of all the pixels. Text Only 1 feature1 = a*pixel1 + b*pixel2 + c*pixel3 + ... For instance, if feature49 requires that pixel1, 3, 26 are filled with color at the same time, and everything else are leave blank: Text Only 1 feature49 = +a*pixel1 -b*picel2 +c*pixel3 -d*pixel4 -... + z*pixel26 Every pixel that is not in {1,3,26} contribute nagetively to the value of feature49. Only when pixels in {1,3,26} are filled with colors and not the others satisfy the existence of feature49, otherwise the picture do not have feature49. So you extracted the basic features from picture. There is more you can do. What about combination of basic features. For example a more complex feature that requires feature1 and feature2 's co-existence. Like recognizing hairs and paws. The next step is to recogize that \"having hairs and having paws at the same time\" is important than either one of those. So there is another matrix multiplication for this. Text Only 1 2 3 4 5 6 7 8 9 10 11 Matrix2 * [feature1] = [complex_feature1] [feature2] [complex_feature2] [feature3] [complex_feature3] [feature4] [complex_feature4] [feature5] [complex_feature5] [feature6] [complex_feature6] . [complex_feature7] . [complex_feature8] . . . . And you can do this again and again and agin... finally you have a row vactor that decides which super complex feature indicates that it is highly likely to have a dog inside a picture. Text Only 1 2 3 4 5 6 7 8 9 Row Vector * [super_complex_feature1] = (a scalar. zero or one. yes or no.) [super_complex_feature2] [super_complex_feature3] [super_complex_feature4] [super_complex_feature5] [super_complex_feature6] . . . Now deep learning make sense too, after understanding what is happening in Matrix Multiplication. And also it is not hard to understand that solving problems through Linear Algebra can handle way more complex problems then any methods by non-STEM scholars. You sure can have absurbly larger matrix to represent every single distinct feature of everything to study how they are inter-related to each other. But what I have seen in the non-STEM field? Ploting a 3 dimensional graph is maxium. All they can imagine is up to 3 features. Hairs and paws and big-eyes and 4-legs for a dog? That counts to 4 and it is way to complicated for human to understand. \"You can never understand a dog through numbers\" is what they will say. But I disagree.","title":"How are these related to deep learning?"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/","text":"[\u79d1\u666e] \u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f \u00b6 \u300c\u91cf\u5b50\u7cfe\u7e8f\u300d\u5f88\u6df1\u5967\u96e3\u660e\uff1f\u90a3\u53ea\u662f\u56e0\u70ba\u4f60\u6c92\u6709\u770b\u904e\u4ed6\u7684\u6578\u5f0f\u800c\u5df2\u3002 \u8981\u6b63\u78ba\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f\uff0c\u4f60\u5fc5\u9808\u8981\u660e\u767d\u5176\u6578\u5b78\u4e0a\u7684\u542b\u610f\uff0c\u800c\u9019\u6578\u5b78\u5176\u5be6\u4e0d\u96e3\uff0c\u96e3\u7684\u662f\u4f60\u7121\u6cd5\u62cb\u958b\u6587\u79d1\u7684\u5305\u4f0f\u3002 2 = 1 + 1 \u00b6 2 = 1 + 1 \u4e0a\u9762\u7684\u6578\u5f0f\u5fc5\u9808\u8981\u9019\u6a23\u5beb\u30022 = 1 + 1\u3002 2\u662f\u75311+1\u7d44\u6210\u7684\u3002\u5c31\u662f\u5b57\u9762\u4e0a\u7684\u610f\u898b\uff0c 2\u9019\u4e00\u500b\u55ae\u5143 \u662f\u7531\u5169\u500b 1\u7684\u7d44\u4ef6 \u6240\u69cb\u6210\u7684\u3002 \u5982\u679c\u4f60\u9023\u9019\u4e00\u500b\u9053\u7406\u90fd\u7121\u8fa6\u6cd5\u7406\u89e3\u7684\u8a71\u53ef\u4ee5\u6309\u4e0a\u4e00\u9801\uff0c\u56e0\u70ba\u4f60\u6c92\u6709\u8db3\u5920\u7684\u601d\u7dad\u80fd\u529b\u7406\u89e3\u6587\u5b57\u548c\u7406\u89e3\u9019\u500b\u4e16\u754c\uff0c\u4f46\u4f60\u8981\u505a\u7684\u4e0d\u662f\u653e\u68c4\u601d\u8003\uff0c\u800c\u662f\u8a8d\u771f\u601d\u8003\u81ea\u5df1\u70ba\u751a\u9ebc\u7f3a\u4e4f\u601d\u7dad\u80fd\u529b\u3002 \u6c92\u6709\u554f\u984c\u7684\u8a71\u6211\u7e7c\u7e8c\u3002 2 = 1 + 1 \u662f\u5728\u540c\u4e00\u500b\u7dad\u5ea6\u5e95\u4e0b\u57f7\u884c\u7684\u52a0\u6cd5 \u4f8b\u5982\u8aaa 2\u500b\u68a8 = 1\u500b\u68a8 + 1\u500b\u68a8\uff0c\u9019\u662f\u5728\u68a8\u7684\u7dad\u5ea6\u5e95\u4e0b\u57f7\u884c\u7684\u52a0\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7dad\u5ea6\u4e4b\u9593\u540c\u6642\u57f7\u884c\u52a0\u6cd5\uff0c\u4f8b\u5982 1\u500b\u68a81\u500b\u6a59 = 1\u500b\u68a8 + 1\u500b\u6a59\u3002\u4e00\u5207\u90fd\u662f\u5b57\u9762\u4e0a\u7684\u610f\u601d\uff0c\u9019\u88e1\u6c92\u6709\u9b54\u6cd5\u3002\u9019\u88e1 1\u500b\u68a81\u500b\u6a59 \u6210\u70ba\u4e86\u4e00\u500b \u55ae\u5143 \u3002\u56e0\u70ba\u5176\u70ba\u5169\u500b\u4e0d\u540c\u7684\u7dad\u5ea6\uff0c\u6211\u5011\u5fc5\u9808\u5982\u6b64\u8868\u9054\uff1a Text Only 1 2 [1\u500b\u68a8] = [1\u500b\u68a8] + [0\u500b\u6a59] [1\u500b\u6a59] [0\u500b\u68a8] [1\u500b\u6a59] \u8a18\u4f4f\u68a8\u7684\u7dad\u5ea6\u5beb\u5728\u4e0a\u9762\uff0c\u6a59\u7684\u7dad\u5ea6\u5beb\u5728\u4e0b\u9762\uff0c\u7136\u5f8c\u6211\u5011\u53ef\u4ee5\u5beb\u5f97\u66f4\u7c21\u6f54\uff1a Text Only 1 2 (\u68a8) : [1] = [1] + [0] (\u6a59) [1] [0] [1] 1\u500b\u7bb1\u88cf\u9762\u88dd\u4e861\u500b\u68a8\u548c1\u500b\u6a59\uff0c\u9019\u500b\u7bb1\u5c31\u662f\uff1a Text Only 1 2 \u7bb1 = [1] [1] 1\u500b\u7bb1\u88cf\u9762\u6709\u53ef\u80fd\u88dd\u4e861\u500b\u68a8\uff0c\u4e5f\u6709\u53ef\u80fd\u88dd\u4e861\u500b\u6a59\u3002\u5047\u5982\u8aaa\u88dd\u4e86\u68a8\u548c\u88dd\u4e86\u6a59\u7684\u6a5f\u7387\u662f\u4e00\u6a23\u7684\u8a71\uff0c\u5373\u662f50%\u6a5f\u7387\u6253\u958b\u7bb1\u6703\u898b\u5230\u68a8\u300150%\u6a5f\u7387\u6253\u958b\u7bb1\u6703\u898b\u5230\u6a59\uff0c\u9019\u500b\u7bb1\u5c31\u662f\uff1a Text Only 1 2 \u7bb1 = 0.707*[1] + 0.707*[0] [0] [1] \u70ba\u751a\u9ebc\u662f\u00bd\u7684\u5e73\u65b9\u68390.707\u5462\uff1f\u6211\u73fe\u5728\u5c31\u8ddf\u4f60\u8b1b\u3002 \u91cf\u5b50\u904b\u7b97\u8d85\u5165\u9580 \u00b6 \u9996\u5148\u70ba\u4e86\u65b9\u4fbf\uff0c\u6211\u5011\u5c07\u5982\u662f\u5beb\u51fa\u7bb1\uff1a Text Only 1 2 3 4 5 6 \u68a8 = |\u68a8> \u6a59 = |\u6a59> |\u7bb1> = 0.707|\u68a8> + 0.707|\u6a59> \u6216\u8005 <\u7bb1| = 0.707<\u68a8| + 0.707<\u6a59| \u7bad\u5480\u662f\u7528\u4f86\u8868\u9054\u76f8\u4e58\u7684\u3002\u5beb\u6210\u9019\u6a23\u7684\u6587\u5b57\u53ef\u4ee5\u76f8\u4e58\u3002 Text Only 1 <X||Y> \u6587\u5b57\u76f8\u4e58\u7684\u898f\u5247\u5c31\u662f\u7bad\u5480\u5305\u88f9\u7684\u7bc4\u570d\u5167\u5de6\u53f3\u5b8c\u5168\u76f8\u540c\u7684\u6642\u5019\u7b49\u59821\uff0c\u5426\u5247\u4e00\u5f8b\u6b78\u96f6\u3002\u800c\u6578\u5b57\u90a3\u908a\u5c31\u7167\u5e38\u76f8\u4e58\u3002 Text Only 1 2 3 4 <\u68a8||\u68a8> = 1 <\u6a59||\u6a59> = 1 <\u68a8||\u6a59> = 0 <\u6a59||\u68a8> = 0 \u5beb\u6210|X><Y|\u7684\u6587\u5b57\u66ab\u6642\u4e0d\u9700\u8981\u7406\u6703\uff0c\u53cd\u6b63\u8b1b\u4e86\u4f60\u4e5f\u4e0d\u660e\u767d\u3002 \u540c\u4e00\u4ef6\u6771\u897f\u76f8\u4e58\u7684\u6642\u5019\u53ef\u4ee5\u5f97\u51fa\u6bcf\u7a2e\u53ef\u80fd\u6027\u5404\u81ea\u7684\u6a5f\u7387 \u5982\u662f\u8005 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <\u7bb1||\u7bb1> = ( 0.707<\u68a8| ) * ( 0.707|\u68a8> ) (+0.707<\u6a59| ) (+0.707|\u6a59> ) = 0.707*0.707<\u68a8||\u68a8> + 0.707*0.707<\u68a8||\u6a59> + 0.707*0.707<\u6a59||\u68a8> + 0.707*0.707<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u68a8||\u6a59> + 0.5<\u6a59||\u68a8> + 0.5<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u6a59||\u6a59> \u6700\u5f8c\u9019\u4e00\u53e5\u5c31\u662f\u6a19\u793a\u4e8650%\u6a5f\u7387\u5f97\u5230\u68a8\uff0c\u540c\u664250%\u6a5f\u7387\u5f97\u5230\u6a59\u3002\u00bd\u7684\u5e73\u65b9\u68390.707\u7684\u539f\u56e0\u5c31\u662f\u70ba\u4e86\u78ba\u4fdd\u5728\u9019\u500b\u6642\u5019\u80fd\u5920\u53d6\u5f97\u6b63\u78ba\u7684\u6a5f\u7387\u6578\u503c\u3002 \u91cf\u5b50\u529b\u5b78\u7684\u89c0\u6e2c\u9700\u8981\u5148\u6709\u4e00\u500b\u671f\u671b \u5c31\u662f\u8aaa\uff0c\u4f60\u73fe\u5728\u554f\u300c\u6211\u60f3\u77e5\u9053\u9019\u4e00\u500b\u7bb1\u5165\u9762\u88dd\u7684\u662f\u751a\u9ebc\u300d\u7684\u6642\u5019\u4f60\u4e0d\u80fd\u5920\u6191\u7a7a\u554f\u3002\u4f60\u53ea\u53ef\u4ee5\u554f\u300c \u9019\u4e00\u500b\u7bb1 \u8ddf \u6211\u60f3\u50cf\u4e2d\u7684\u7bb1 \u6709\u591a\u63a5\u8fd1\u300d\uff0c\u5982\u662f\u8005\u4f60\u5fc5\u9808\u63d0\u4f9b\u4e00\u500b\u671f\u671b\u4f86\u505a\u5c0d\u7167\uff0c\u671f\u671b\u5c31\u662f \u4f60\u60f3\u50cf\u4e2d\u7684\u7bb1 \u3002 \u554f\u7684\u6642\u5019\uff0c\u4f60\u628a \u4f60\u60f3\u50cf\u4e2d\u7684\u7bb1 (\u4ee5\u4e0b\u7a31\u70ba\u671f\u671b) \u548c \u9019\u4e00\u500b\u7bb1 (\u4ee5\u4e0b\u7a31\u70ba\u7bb1) \u76f8\u4e58\u3002 \u91cf\u5b50\u529b\u5b78\u7684\u89c0\u6e2c(\u5c0d\u7167)\u65b9\u6cd5\u662f <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> \u7bb1\u5728\u4e2d\u9593\uff0c\u7136\u5f8c\u4f60\u62ff\u671f\u671b\u4f86\u5de6\u53f3\u593e\u4f4f\u5b83\u3002\u7bad\u5480\u7684\u65b9\u5411\u5fc5\u9808\u56b4\u683c\u9075\u5b88\u3002 \u554f\uff1a\u7bb1\u88dd\u7684\u662f\u4e0d\u662f\u68a8 \u5982\u662f\u8005 |\u671f\u671b> = 1|\u68a8> \u5148\u6aa2\u67e5\u671f\u671b\u662f\u4e0d\u662f100%\u80fd\u5920\u7372\u5f97\u68a8 Text Only 1 2 3 4 5 <\u671f\u671b||\u671f\u671b> = 1<\u68a8| * 1|\u68a8> = 1*1 <\u68a8||\u68a8> \u6c92\u6709\u554f\u984c\u3002\u6211\u5011\u73fe\u5728\u53ef\u4ee5\u8655\u7406 <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b>\u4e86\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u5de6\u908a\u7684<\u671f\u671b||\u7bb1> = 1<\u68a8| * ( 0.707|\u68a8> ) (+0.707|\u6a59> ) = 0.707<\u68a8||\u68a8> + 0.707<\u68a8||\u6a59> = 0.707<\u68a8||\u68a8> \u53f3\u908a\u7684<\u7bb1||\u671f\u671b> = ( 0.707<\u68a8| ) * 1|\u68a8> (+0.707<\u6a59| ) = 0.707<\u68a8||\u68a8> + 0.707<\u6a59||\u68a8> = 0.707<\u68a8||\u68a8> \u5982\u662f\u8005<\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> = 0.707<\u68a8||\u68a8> * 0.707<\u68a8||\u68a8> = 0.707 * 0.707 * <\u68a8||\u68a8> <\u68a8||\u68a8> = 0.5 * 1 * 1 = 0.5 \u7d50\u679c\u8868\u793a\u6211\u5011\u6709\u7bb1\u7684\u5167\u5bb9\u7269\u670950%\u6a5f\u7387\u543b\u5408\u6211\u5011\u7684\u671f\u671b\u3002\u63db\u53e5\u8a71\u5c31\u662f\u8aaa\u670950%\u6a5f\u7387\u88cf\u9762\u88dd\u7684\u662f\u68a8\u3002 \u554f\uff1a\u7bb1\u88dd\u7684\u662f\u4e0d\u662f50%\u68a8 50%\u6a59 \u73fe\u5728\u62ff\u4e00\u500b\u8ddf\u7bb1\u5b8c\u5168\u4e00\u6a23\u7684\u6771\u897f\u4f86\u4f5c\u70ba\u671f\u671b\uff0c\u8ddf\u5b83\u5c0d\u7167\u5427\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5de6\u908a\u7684<\u671f\u671b||\u7bb1> = ( 0.707<\u68a8| ) * ( 0.707|\u68a8> ) (+0.707<\u6a59| ) (+0.707|\u6a59> ) = 0.707*0.707<\u68a8||\u68a8> + 0.707*0.707<\u68a8||\u6a59> + 0.707*0.707<\u6a59||\u68a8> + 0.707*0.707<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u68a8||\u6a59> + 0.5<\u6a59||\u68a8> + 0.5<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u6a59||\u6a59> \u518d\u4f86\u53f3\u908a\u7684<\u7bb1||\u671f\u671b>\uff0c\u8001\u5be6\u8aaa\u56e0\u70ba\u7bb1\u548c\u671f\u671b\u662f\u540c\u6a23\u7684\u6771\u897f\uff0c\u6240\u4ee5\u7d50\u679c\u8ddf\u4e0a\u9762\u7684\u4e00\u6a21\u4e00\u6a23\uff0c\u56e0\u6b64\u4e5f\u4e0d\u8cbb\u6642\u5beb\u6b65\u9a5f\u51fa\u4f86\u4e86\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> = ( 0.5<\u68a8||\u68a8> ) * ( 0.5<\u68a8||\u68a8> ) (+0.5<\u6a59||\u6a59> ) (+0.5<\u6a59||\u6a59> ) = 0.5*0.5<\u68a8||\u68a8><\u68a8||\u68a8> + 0.5*0.5<\u68a8||\u68a8><\u6a59||\u6a59> + 0.5*0.5<\u6a59||\u6a59><\u68a8||\u68a8> + 0.5*0.5<\u6a59||\u6a59><\u6a59||\u6a59> = 0.25 + 0.25 + 0.25 + 0.25 = 1 \u51fa\u4f86\u7684\u7d50\u679c\u5c31\u662f1\uff0c\u5373100%\uff0c\u5373\u5b8c\u5168\u4e00\u6a23\u3002 \u4f86\u91cf\u5b50\u7cfe\u7e8f\u5427 \u00b6 \u4e0a\u7bc0\u6211\u5011\u8655\u7406\u7684\u662f\u4e00\u500b\u7bb1\u3002\u4f46\u5982\u4f55\u6709\u5169\u500b\u7bb1\u7684\u6642\u5019\u6211\u5011\u61c9\u8a72\u8981\u600e\u6a23\u5728\u6578\u5b78\u4e0a\u8655\u7406\u5462\uff1f\u5176\u5be6\u5f88\u7c21\u55ae\uff0c\u4e5f\u4e0d\u904e\u5c31\u662f\u628a\u5169\u500b\u7bb1\u7684\u72c0\u614b\u76f8\u4e58\u800c\u5df2\u3002 \u5047\u8a2d\u5169\u500b\u7bb1\u7684\u8a2d\u5b9a\u662f\u4e00\u6a23\u7684 Text Only 1 2 |\u7bb1A> = 0.707|\u68a8> + 0.707|\u6a59> |\u7bb1B> = 0.707|\u68a8> + 0.707|\u6a59> \u5169\u500b\u7bb1\u7684\u72c0\u614b\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 |\u7bb1A> * |\u7bb1B> = ( 0.707|\u68a8> ) * ( 0.707|\u68a8> ) \uff08+0.707|\u6a59> ) (+0.707|\u6a59> ) = 0.707*0.707|\u68a8>|\u68a8> + 0.707*0.707|\u68a8>|\u6a59> + 0.707*0.707|\u6a59>|\u68a8> + 0.707*0.707|\u6a59>|\u6a59> = 0.5|\u68a8>|\u68a8> + 0.5|\u68a8>|\u6a59> + 0.5|\u6a59>|\u68a8> + 0.5|\u6a59>|\u6a59> \u8a08\u7b97\u5230\u9019\u88e1\u5c31\u662f\u76e1\u982d\uff0c\u4e0d\u80fd\u518d\u7c21\u5316\u4e86\u3002 \u9019\u6a23\u51fa\u73fe\u4e86\u4e00\u500b\u65b0\u7684\u6771\u897f\uff0c\u751a\u9ebc\u662f |\u68a8>|\u68a8> \uff1f \u4e00\u958b\u59cb\u6211\u5011\u662f|\u7bb1A> * |\u7bb1B>\u7684\u3002\u6700\u5f8c\u51fa\u73fe\u4e86 |\u68a8>|\u68a8> \u3002\u9019\u500b\u610f\u601d\u662f\u5de6\u908a\u7684\u70ba\u7bb1A\u7684\u72c0\u614b\uff0c\u53f3\u908a\u7684\u70ba\u7bb1A\u7684\u72c0\u614b\uff0c\u628a\u5b83\u5011\u5beb\u5728\u4e00\u8d77\u8868\u793a\u4e86\u7d91\u7d81\u5f0f\u5730\u601d\u8003\u5b83\u5011\u7684\u5171\u540c\u5b58\u5728\u3002 \u5c31\u662f\u8aaa Text Only 1 2 \u7bb1A\u70ba\u68a8\u7684\u540c\u6642\u7bb1B\u4ea6\u70ba\u68a8 \u7bb1A=\u68a8 AND \u7bb1B=\u68a8 \u7c21\u5316\u4e00\u4e0b\u7b26\u865f Text Only 1 2 3 4 5 6 7 8 9 |\u7bb1A> * |\u7bb1B> = |\u7bb1A,\u7bb1B> |\u68a8>|\u68a8> = |\u68a8,\u68a8> \u65bc\u662f = 0.5|\u68a8,\u68a8> + 0.5|\u68a8,\u6a59> + 0.5|\u6a59,\u68a8> + 0.5|\u6a59,\u6a59> |\u7bb1A,\u7bb1B> \u662f\u4e00\u500b\u7368\u7acb\u7684\u72c0\u614b \u56e0\u70ba\u73fe\u5728\u6211\u5011\u5df2\u7d93\u7d91\u7d81\u5f0f\u5730\u601d\u8003\u5b83\u5011\u7684\u5171\u540c\u5b58\u5728\uff0c\u56e0\u6b64|\u7bb1A,\u7bb1B>\u5df2\u7d93\u662f\u4e00\u500b\u81ea\u6210\u4e00\u5bb6\u7684\u6982\u5ff5\u3002 \u62ff |\u7bb1A,\u7bb1B> \u8207\u81ea\u5df1\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 |\u7bb1A,\u7bb1B> = 0.5|\u68a8,\u68a8> + 0.5|\u68a8,\u6a59> + 0.5|\u6a59,\u68a8> + 0.5|\u6a59,\u6a59> <\u7bb1A,\u7bb1B||\u7bb1A,\u7bb1B> = ( 0.5<\u68a8,\u68a8| ) * ( 0.5|\u68a8,\u68a8> ) (+0.5<\u68a8,\u6a59| ) (+0.5|\u68a8,\u6a59> ) (+0.5<\u6a59,\u68a8| ) (+0.5|\u6a59,\u68a8> ) (+0.5<\u6a59,\u6a59| ) (+0.5|\u6a59,\u6a59> ) \u5728\u9019\u88e1\u6211\u5011\u53ef\u4ee5\u8df3\u6b65\u9a5f\uff0c\u56e0\u70ba\u6211\u5011\u77e5\u9053\u9664\u975eX=Y\uff0c\u5426\u5247<X||Y>\u5fc5\u5b9a\u70ba0\u3002\u56e0\u6b64\u53ef\u4ee5\u7701\u7565\u6240\u6709X=/=Y\u7684\u5730\u65b9\u3002 = 0.5*0.5<\u68a8,\u68a8||\u68a8,\u68a8> + 0.5*0.5<\u68a8,\u6a59||\u68a8,\u6a59> + 0.5*0.5<\u6a59,\u68a8||\u6a59,\u68a8> + 0.5*0.5<\u6a59,\u6a59||\u6a59,\u6a59> = 0.25<\u68a8,\u68a8||\u68a8,\u68a8> + 0.25<\u68a8,\u6a59||\u68a8,\u6a59> + 0.25<\u6a59,\u68a8||\u6a59,\u68a8> + 0.25<\u6a59,\u6a59||\u6a59,\u6a59> \u7d50\u679c\u5c31\u662f\u6709\u00bc\u7684\u6a5f\u7387\u6253\u958b\u5169\u500b\u7bb1\u898b\u5230\u662f(\u68a8,\u68a8)\u7684\u72c0\u614b\uff0c\u6291\u6216(\u68a8,\u6a59)\u7684\u72c0\u614b\uff0c\u53c8\u6216\u8005(\u6a59,\u68a8)\u7684\u72c0\u614b\u2026\u2026 \u5c07\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u76f8\u52a0\uff0c0.25+0.25+0.25+0.25 = 1\uff0c\u5c31\u662f100%\u3002\u5373\u662f\u8aaa\u7121\u82b1\u7121\u5047\u73fe\u5728\u770b\u7684|\u7bb1A,\u7bb1B>\u662f\u4e00\u500b\u7368\u7acb\u7684\u72c0\u614b\u3002\u5982\u679c\u6211\u5011\u628a\u7bb1A\u548c\u7bb1B\u5206\u6298\u4f86\u601d\u8003\u7684\u8a71\uff0c\u4ed6\u5011\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u76f8\u52a0\u51fa\u4f86\u6703\u662f200%\uff0c\u800c\u4e0d\u662f100%\u3002 \u6211\u624b\u4e0a\u67091\u500b\u68a81\u500b\u6a59\uff0c\u5206\u5225\u653e\u5728\u7bb1C\u548c\u7bb1D\u3002\u7d91\u7d81\u5f0f\u5730\u601d\u8003\uff0c\u5c31\u662f |\u7bb1C,\u7bb1D> \u3002 \u4f46\u73fe\u5728\u53ea\u67091\u500b\u68a81\u500b\u6a59\uff0c\u4e00\u908a\u662f\u68a8\u7684\u540c\u6642\u53e6\u4e00\u908a\u5fc5\u5b9a\u662f\u6a59\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u56e0\u6b64 Text Only 1 |\u7bb1C,\u7bb1D> = 0.707|\u68a8, \u6a59> + 0.707|\u6a59, \u68a8> \u62ff |\u7bb1C,\u7bb1D> \u8207\u81ea\u5df1\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <\u7bb1C,\u7bb1D||\u7bb1C,\u7bb1D> = ( 0.707<\u68a8,\u6a59| ) * ( 0.707|\u68a8,\u6a59> ) (+0.707<\u6a59,\u68a8| ) (+0.707|\u6a59,\u68a8> ) = 0.707*0.707<\u68a8,\u6a59||\u68a8,\u6a59> + 0.707*0.707<\u68a8,\u6a59||\u6a59,\u68a8> + 0.707*0.707<\u6a59,\u68a8||\u68a8,\u6a59> + 0.707*0.707<\u6a59,\u68a8||\u6a59,\u68a8> \u9664\u975eX=Y\uff0c\u5426\u5247<X||Y>\u5fc5\u5b9a\u70ba0 = 0.707*0.707<\u68a8,\u6a59||\u68a8,\u6a59> + 0.707*0.707<\u6a59,\u68a8||\u6a59,\u68a8> = 0.5<\u68a8,\u6a59||\u68a8,\u6a59> + 0.5<\u6a59,\u68a8||\u6a59,\u68a8> \u6240\u4ee5\u5c31\u662f50%\u6a5f\u7387\u6703\u662f(\u68a8, \u6a59)\uff0c50%\u6a5f\u7387\u6703\u662f(\u6a59, \u68a8)\u3002 \u5982\u679c\u6211\u53ea\u6253\u958b\u7bb1C\u6703\u600e\u6a23 \u9019\u500b\u5c31\u662f\u91cf\u5b50\u7cfe\u7e8f\u4e86\u3002\u4f60\u60f3\u4e00\u60f3\u5982\u679c\u53ea\u6253\u958b\u7bb1C\u770b\u5230\u68a8\u7684\u8a71\uff0c\u4e0d\u7528\u554f\u4e5f\u80fd\u77e5\u9053\u7bb1D\u5fc5\u5b9a\u662f\u6a59\u3002 \u9019\u7a2e\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u6211\u5011\u7528 |\u671f\u671b><\u671f\u671b||\u7bb1> \u4f86\u8655\u7406\uff0c\u9019\u662f\u65b0\u7684\u65b9\u5f0f\uff0c\u4e0d\u904e\u9019\u88e1\u7684\u671f\u671b\u53ea\u5305\u542b\u4e86\u7bb1C\u7684\u90e8\u4efd\u3002 \u4f8b\u5982\u8aaa\u6211\u5011\u671f\u671b\u6253\u958b\u7bb1C\u6703\u898b\u5230\u68a8 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 |\u671f\u671b> = 1|\u68a8,.> \u7528.\u4f86\u8868\u793a\u6f0f\u7a7a\uff0c\u8868\u793a\u6c92\u6709\u6771\u897f\u5728\u90a3\u500b\u4f4d\u7f6e\u76f8\u4e58 \u6240\u4ee5|\u671f\u671b><\u671f\u671b||\u7bb1>\u7684\u5de6\u908a <\u671f\u671b||\u7bb1> = 1<\u68a8,.| * ( 0.707|\u68a8,\u6a59> ) (+0.707|\u6a59,\u68a8> ) = 0.707<\u68a8,.||\u68a8,\u6a59> + 0.707<\u68a8,.||\u6a59,\u68a8> \u53ea\u6709\u76f8\u4e58\u4f4d\u7f6e\u540c\u70ba\u68a8\u7684\u624d\u7372\u4fdd\u7559 = 0.707<\u68a8,.||\u68a8,\u6a59> \u540c\u6642\u56e0\u70ba\u68a8\u88ab\u76f8\u4e58\u4e86\uff0c\u5373<\u68a8||\u68a8> = 1\uff0c\u56e0\u6b64\u53ea\u5269\u4e0b|.,\u6a59> = 0.707|.,\u6a59> \u5982\u662f\u8005 |\u671f\u671b><\u671f\u671b||\u7bb1> = 1|\u68a8,.> * 0.707|.,\u6a59> = 1*0.707|\u68a8,.>|.,\u6a59> = 0.707|\u68a8,\u6a59> \u6b63\u898f\u5316 \u4e0a\u9762\u7684\u7d50\u679c 0.707|\u68a8,\u6a59> \u662f\u4e00\u500b\u65b0\u7684\u72c0\u614b\u3002\u4f46\u9019\u500b\u72c0\u614b\u6709\u9ede\u554f\u984c\uff0c\u5c31\u662f\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u7e3d\u5c11\u65bc100%\u3002 \u56e0\u70ba\u5b83\u662f 0.707|\u68a8,\u6a59> ,\u56e0\u6b64\u53ea\u67090.707^2=50%\u6a5f\u7387\u4f60\u80fd\u5920\u7372\u5f97(\u68a8,\u6a59)\uff0c\u6c92\u6709\u5176\u4ed6\u4e86\u3002\u53e6\u5916\u768450%\u6a5f\u7387\u5462\uff1f\uff1f\uff1f\u6d88\u5931\u4e86\u3002\u901950%\u7372\u5f97(\u68a8,\u6a59)\u7684\u6a5f\u7387\u5c31\u662f\u5168\u90e8\u7684\u6a5f\u7387\u4e86\u3002\u56e0\u6b64\u6211\u5011\u8981\u65bd\u884c \u6b63\u898f\u5316 \uff0c\u628a\u5b83\u8b8a\u6210\u70ba\u5408\u5171100%\u3002 \u65b9\u6cd5\u5f88\u7c21\u55ae\uff0c\u5c31\u662f\u9664\u4ee5\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u7e3d\u548c\u7684\u5e73\u65b9\u6839\u3002 Text Only 1 2 3 0.707|\u68a8,\u6a59> / sqrt(0.707^2) = 0.707|\u68a8,\u6a59> / 0.707 = 1|\u68a8,\u6a59> \u7d50\u679c\u5c31\u662f 1|\u68a8,\u6a59> \u3002100%\u7684\u6a5f\u7387\u4f60\u6703\u7372\u5230(\u68a8,\u6a59)\u7684\u72c0\u614b\u3002 \u518d\u8b1b\u4e00\u6b21 Text Only 1 2 3 4 5 6 7 \u672c\u4f86\u662f |\u7bb1C,\u7bb1D> = 0.707|\u68a8, \u6a59> + 0.707|\u6a59, \u68a8> \u53ea\u89c0\u6e2c\u7bb1C\uff0c\u5f97\u77e5\u70ba\u68a8\u4e4b\u5f8c\uff0c|\u7bb1C,\u7bb1D>\u8b8a\u6210\u70ba\u4e0b\u9762\u7684\u72c0\u614b |\u7bb1C,\u7bb1D> = 1|\u68a8,\u6a59> \u7528\u6587\u5b57\u4f86\u8aaa\u5c31\u662f|\u7bb1C,\u7bb1D>\u53ea\u5269\u4e0b\u4e00\u7a2e\u53ef\u80fd\u6027 \u4e5f\u5c31\u662f\u9ad4\u73fe\u4e86 \u300c\u5982\u679c\u53ea\u6253\u958b\u7bb1C\u770b\u5230\u68a8\u7684\u8a71\uff0c\u4e0d\u7528\u554f\u4e5f\u80fd\u77e5\u9053\u7bb1D\u5fc5\u5b9a\u662f\u6a59\u300d \u9019\u53e5\u8a71\u3002 \u9019\u5c31\u662f\u91cf\u5b50\u7cfe\u7e8f\u3002","title":"[\u79d1\u666e] \u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/#_1","text":"\u300c\u91cf\u5b50\u7cfe\u7e8f\u300d\u5f88\u6df1\u5967\u96e3\u660e\uff1f\u90a3\u53ea\u662f\u56e0\u70ba\u4f60\u6c92\u6709\u770b\u904e\u4ed6\u7684\u6578\u5f0f\u800c\u5df2\u3002 \u8981\u6b63\u78ba\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f\uff0c\u4f60\u5fc5\u9808\u8981\u660e\u767d\u5176\u6578\u5b78\u4e0a\u7684\u542b\u610f\uff0c\u800c\u9019\u6578\u5b78\u5176\u5be6\u4e0d\u96e3\uff0c\u96e3\u7684\u662f\u4f60\u7121\u6cd5\u62cb\u958b\u6587\u79d1\u7684\u5305\u4f0f\u3002","title":"[\u79d1\u666e] \u5982\u4f55\u7406\u89e3\u91cf\u5b50\u7cfe\u7e8f"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/#2-1-1","text":"2 = 1 + 1 \u4e0a\u9762\u7684\u6578\u5f0f\u5fc5\u9808\u8981\u9019\u6a23\u5beb\u30022 = 1 + 1\u3002 2\u662f\u75311+1\u7d44\u6210\u7684\u3002\u5c31\u662f\u5b57\u9762\u4e0a\u7684\u610f\u898b\uff0c 2\u9019\u4e00\u500b\u55ae\u5143 \u662f\u7531\u5169\u500b 1\u7684\u7d44\u4ef6 \u6240\u69cb\u6210\u7684\u3002 \u5982\u679c\u4f60\u9023\u9019\u4e00\u500b\u9053\u7406\u90fd\u7121\u8fa6\u6cd5\u7406\u89e3\u7684\u8a71\u53ef\u4ee5\u6309\u4e0a\u4e00\u9801\uff0c\u56e0\u70ba\u4f60\u6c92\u6709\u8db3\u5920\u7684\u601d\u7dad\u80fd\u529b\u7406\u89e3\u6587\u5b57\u548c\u7406\u89e3\u9019\u500b\u4e16\u754c\uff0c\u4f46\u4f60\u8981\u505a\u7684\u4e0d\u662f\u653e\u68c4\u601d\u8003\uff0c\u800c\u662f\u8a8d\u771f\u601d\u8003\u81ea\u5df1\u70ba\u751a\u9ebc\u7f3a\u4e4f\u601d\u7dad\u80fd\u529b\u3002 \u6c92\u6709\u554f\u984c\u7684\u8a71\u6211\u7e7c\u7e8c\u3002 2 = 1 + 1 \u662f\u5728\u540c\u4e00\u500b\u7dad\u5ea6\u5e95\u4e0b\u57f7\u884c\u7684\u52a0\u6cd5 \u4f8b\u5982\u8aaa 2\u500b\u68a8 = 1\u500b\u68a8 + 1\u500b\u68a8\uff0c\u9019\u662f\u5728\u68a8\u7684\u7dad\u5ea6\u5e95\u4e0b\u57f7\u884c\u7684\u52a0\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7dad\u5ea6\u4e4b\u9593\u540c\u6642\u57f7\u884c\u52a0\u6cd5\uff0c\u4f8b\u5982 1\u500b\u68a81\u500b\u6a59 = 1\u500b\u68a8 + 1\u500b\u6a59\u3002\u4e00\u5207\u90fd\u662f\u5b57\u9762\u4e0a\u7684\u610f\u601d\uff0c\u9019\u88e1\u6c92\u6709\u9b54\u6cd5\u3002\u9019\u88e1 1\u500b\u68a81\u500b\u6a59 \u6210\u70ba\u4e86\u4e00\u500b \u55ae\u5143 \u3002\u56e0\u70ba\u5176\u70ba\u5169\u500b\u4e0d\u540c\u7684\u7dad\u5ea6\uff0c\u6211\u5011\u5fc5\u9808\u5982\u6b64\u8868\u9054\uff1a Text Only 1 2 [1\u500b\u68a8] = [1\u500b\u68a8] + [0\u500b\u6a59] [1\u500b\u6a59] [0\u500b\u68a8] [1\u500b\u6a59] \u8a18\u4f4f\u68a8\u7684\u7dad\u5ea6\u5beb\u5728\u4e0a\u9762\uff0c\u6a59\u7684\u7dad\u5ea6\u5beb\u5728\u4e0b\u9762\uff0c\u7136\u5f8c\u6211\u5011\u53ef\u4ee5\u5beb\u5f97\u66f4\u7c21\u6f54\uff1a Text Only 1 2 (\u68a8) : [1] = [1] + [0] (\u6a59) [1] [0] [1] 1\u500b\u7bb1\u88cf\u9762\u88dd\u4e861\u500b\u68a8\u548c1\u500b\u6a59\uff0c\u9019\u500b\u7bb1\u5c31\u662f\uff1a Text Only 1 2 \u7bb1 = [1] [1] 1\u500b\u7bb1\u88cf\u9762\u6709\u53ef\u80fd\u88dd\u4e861\u500b\u68a8\uff0c\u4e5f\u6709\u53ef\u80fd\u88dd\u4e861\u500b\u6a59\u3002\u5047\u5982\u8aaa\u88dd\u4e86\u68a8\u548c\u88dd\u4e86\u6a59\u7684\u6a5f\u7387\u662f\u4e00\u6a23\u7684\u8a71\uff0c\u5373\u662f50%\u6a5f\u7387\u6253\u958b\u7bb1\u6703\u898b\u5230\u68a8\u300150%\u6a5f\u7387\u6253\u958b\u7bb1\u6703\u898b\u5230\u6a59\uff0c\u9019\u500b\u7bb1\u5c31\u662f\uff1a Text Only 1 2 \u7bb1 = 0.707*[1] + 0.707*[0] [0] [1] \u70ba\u751a\u9ebc\u662f\u00bd\u7684\u5e73\u65b9\u68390.707\u5462\uff1f\u6211\u73fe\u5728\u5c31\u8ddf\u4f60\u8b1b\u3002","title":"2 = 1 + 1"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/#_2","text":"\u9996\u5148\u70ba\u4e86\u65b9\u4fbf\uff0c\u6211\u5011\u5c07\u5982\u662f\u5beb\u51fa\u7bb1\uff1a Text Only 1 2 3 4 5 6 \u68a8 = |\u68a8> \u6a59 = |\u6a59> |\u7bb1> = 0.707|\u68a8> + 0.707|\u6a59> \u6216\u8005 <\u7bb1| = 0.707<\u68a8| + 0.707<\u6a59| \u7bad\u5480\u662f\u7528\u4f86\u8868\u9054\u76f8\u4e58\u7684\u3002\u5beb\u6210\u9019\u6a23\u7684\u6587\u5b57\u53ef\u4ee5\u76f8\u4e58\u3002 Text Only 1 <X||Y> \u6587\u5b57\u76f8\u4e58\u7684\u898f\u5247\u5c31\u662f\u7bad\u5480\u5305\u88f9\u7684\u7bc4\u570d\u5167\u5de6\u53f3\u5b8c\u5168\u76f8\u540c\u7684\u6642\u5019\u7b49\u59821\uff0c\u5426\u5247\u4e00\u5f8b\u6b78\u96f6\u3002\u800c\u6578\u5b57\u90a3\u908a\u5c31\u7167\u5e38\u76f8\u4e58\u3002 Text Only 1 2 3 4 <\u68a8||\u68a8> = 1 <\u6a59||\u6a59> = 1 <\u68a8||\u6a59> = 0 <\u6a59||\u68a8> = 0 \u5beb\u6210|X><Y|\u7684\u6587\u5b57\u66ab\u6642\u4e0d\u9700\u8981\u7406\u6703\uff0c\u53cd\u6b63\u8b1b\u4e86\u4f60\u4e5f\u4e0d\u660e\u767d\u3002 \u540c\u4e00\u4ef6\u6771\u897f\u76f8\u4e58\u7684\u6642\u5019\u53ef\u4ee5\u5f97\u51fa\u6bcf\u7a2e\u53ef\u80fd\u6027\u5404\u81ea\u7684\u6a5f\u7387 \u5982\u662f\u8005 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <\u7bb1||\u7bb1> = ( 0.707<\u68a8| ) * ( 0.707|\u68a8> ) (+0.707<\u6a59| ) (+0.707|\u6a59> ) = 0.707*0.707<\u68a8||\u68a8> + 0.707*0.707<\u68a8||\u6a59> + 0.707*0.707<\u6a59||\u68a8> + 0.707*0.707<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u68a8||\u6a59> + 0.5<\u6a59||\u68a8> + 0.5<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u6a59||\u6a59> \u6700\u5f8c\u9019\u4e00\u53e5\u5c31\u662f\u6a19\u793a\u4e8650%\u6a5f\u7387\u5f97\u5230\u68a8\uff0c\u540c\u664250%\u6a5f\u7387\u5f97\u5230\u6a59\u3002\u00bd\u7684\u5e73\u65b9\u68390.707\u7684\u539f\u56e0\u5c31\u662f\u70ba\u4e86\u78ba\u4fdd\u5728\u9019\u500b\u6642\u5019\u80fd\u5920\u53d6\u5f97\u6b63\u78ba\u7684\u6a5f\u7387\u6578\u503c\u3002 \u91cf\u5b50\u529b\u5b78\u7684\u89c0\u6e2c\u9700\u8981\u5148\u6709\u4e00\u500b\u671f\u671b \u5c31\u662f\u8aaa\uff0c\u4f60\u73fe\u5728\u554f\u300c\u6211\u60f3\u77e5\u9053\u9019\u4e00\u500b\u7bb1\u5165\u9762\u88dd\u7684\u662f\u751a\u9ebc\u300d\u7684\u6642\u5019\u4f60\u4e0d\u80fd\u5920\u6191\u7a7a\u554f\u3002\u4f60\u53ea\u53ef\u4ee5\u554f\u300c \u9019\u4e00\u500b\u7bb1 \u8ddf \u6211\u60f3\u50cf\u4e2d\u7684\u7bb1 \u6709\u591a\u63a5\u8fd1\u300d\uff0c\u5982\u662f\u8005\u4f60\u5fc5\u9808\u63d0\u4f9b\u4e00\u500b\u671f\u671b\u4f86\u505a\u5c0d\u7167\uff0c\u671f\u671b\u5c31\u662f \u4f60\u60f3\u50cf\u4e2d\u7684\u7bb1 \u3002 \u554f\u7684\u6642\u5019\uff0c\u4f60\u628a \u4f60\u60f3\u50cf\u4e2d\u7684\u7bb1 (\u4ee5\u4e0b\u7a31\u70ba\u671f\u671b) \u548c \u9019\u4e00\u500b\u7bb1 (\u4ee5\u4e0b\u7a31\u70ba\u7bb1) \u76f8\u4e58\u3002 \u91cf\u5b50\u529b\u5b78\u7684\u89c0\u6e2c(\u5c0d\u7167)\u65b9\u6cd5\u662f <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> \u7bb1\u5728\u4e2d\u9593\uff0c\u7136\u5f8c\u4f60\u62ff\u671f\u671b\u4f86\u5de6\u53f3\u593e\u4f4f\u5b83\u3002\u7bad\u5480\u7684\u65b9\u5411\u5fc5\u9808\u56b4\u683c\u9075\u5b88\u3002 \u554f\uff1a\u7bb1\u88dd\u7684\u662f\u4e0d\u662f\u68a8 \u5982\u662f\u8005 |\u671f\u671b> = 1|\u68a8> \u5148\u6aa2\u67e5\u671f\u671b\u662f\u4e0d\u662f100%\u80fd\u5920\u7372\u5f97\u68a8 Text Only 1 2 3 4 5 <\u671f\u671b||\u671f\u671b> = 1<\u68a8| * 1|\u68a8> = 1*1 <\u68a8||\u68a8> \u6c92\u6709\u554f\u984c\u3002\u6211\u5011\u73fe\u5728\u53ef\u4ee5\u8655\u7406 <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b>\u4e86\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u5de6\u908a\u7684<\u671f\u671b||\u7bb1> = 1<\u68a8| * ( 0.707|\u68a8> ) (+0.707|\u6a59> ) = 0.707<\u68a8||\u68a8> + 0.707<\u68a8||\u6a59> = 0.707<\u68a8||\u68a8> \u53f3\u908a\u7684<\u7bb1||\u671f\u671b> = ( 0.707<\u68a8| ) * 1|\u68a8> (+0.707<\u6a59| ) = 0.707<\u68a8||\u68a8> + 0.707<\u6a59||\u68a8> = 0.707<\u68a8||\u68a8> \u5982\u662f\u8005<\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> = 0.707<\u68a8||\u68a8> * 0.707<\u68a8||\u68a8> = 0.707 * 0.707 * <\u68a8||\u68a8> <\u68a8||\u68a8> = 0.5 * 1 * 1 = 0.5 \u7d50\u679c\u8868\u793a\u6211\u5011\u6709\u7bb1\u7684\u5167\u5bb9\u7269\u670950%\u6a5f\u7387\u543b\u5408\u6211\u5011\u7684\u671f\u671b\u3002\u63db\u53e5\u8a71\u5c31\u662f\u8aaa\u670950%\u6a5f\u7387\u88cf\u9762\u88dd\u7684\u662f\u68a8\u3002 \u554f\uff1a\u7bb1\u88dd\u7684\u662f\u4e0d\u662f50%\u68a8 50%\u6a59 \u73fe\u5728\u62ff\u4e00\u500b\u8ddf\u7bb1\u5b8c\u5168\u4e00\u6a23\u7684\u6771\u897f\u4f86\u4f5c\u70ba\u671f\u671b\uff0c\u8ddf\u5b83\u5c0d\u7167\u5427\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5de6\u908a\u7684<\u671f\u671b||\u7bb1> = ( 0.707<\u68a8| ) * ( 0.707|\u68a8> ) (+0.707<\u6a59| ) (+0.707|\u6a59> ) = 0.707*0.707<\u68a8||\u68a8> + 0.707*0.707<\u68a8||\u6a59> + 0.707*0.707<\u6a59||\u68a8> + 0.707*0.707<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u68a8||\u6a59> + 0.5<\u6a59||\u68a8> + 0.5<\u6a59||\u6a59> = 0.5<\u68a8||\u68a8> + 0.5<\u6a59||\u6a59> \u518d\u4f86\u53f3\u908a\u7684<\u7bb1||\u671f\u671b>\uff0c\u8001\u5be6\u8aaa\u56e0\u70ba\u7bb1\u548c\u671f\u671b\u662f\u540c\u6a23\u7684\u6771\u897f\uff0c\u6240\u4ee5\u7d50\u679c\u8ddf\u4e0a\u9762\u7684\u4e00\u6a21\u4e00\u6a23\uff0c\u56e0\u6b64\u4e5f\u4e0d\u8cbb\u6642\u5beb\u6b65\u9a5f\u51fa\u4f86\u4e86\u3002 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 <\u671f\u671b||\u7bb1> <\u7bb1||\u671f\u671b> = ( 0.5<\u68a8||\u68a8> ) * ( 0.5<\u68a8||\u68a8> ) (+0.5<\u6a59||\u6a59> ) (+0.5<\u6a59||\u6a59> ) = 0.5*0.5<\u68a8||\u68a8><\u68a8||\u68a8> + 0.5*0.5<\u68a8||\u68a8><\u6a59||\u6a59> + 0.5*0.5<\u6a59||\u6a59><\u68a8||\u68a8> + 0.5*0.5<\u6a59||\u6a59><\u6a59||\u6a59> = 0.25 + 0.25 + 0.25 + 0.25 = 1 \u51fa\u4f86\u7684\u7d50\u679c\u5c31\u662f1\uff0c\u5373100%\uff0c\u5373\u5b8c\u5168\u4e00\u6a23\u3002","title":"\u91cf\u5b50\u904b\u7b97\u8d85\u5165\u9580"},{"location":"toward_science/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8F%E5%AD%90%E7%B3%BE%E7%BA%8F/#_3","text":"\u4e0a\u7bc0\u6211\u5011\u8655\u7406\u7684\u662f\u4e00\u500b\u7bb1\u3002\u4f46\u5982\u4f55\u6709\u5169\u500b\u7bb1\u7684\u6642\u5019\u6211\u5011\u61c9\u8a72\u8981\u600e\u6a23\u5728\u6578\u5b78\u4e0a\u8655\u7406\u5462\uff1f\u5176\u5be6\u5f88\u7c21\u55ae\uff0c\u4e5f\u4e0d\u904e\u5c31\u662f\u628a\u5169\u500b\u7bb1\u7684\u72c0\u614b\u76f8\u4e58\u800c\u5df2\u3002 \u5047\u8a2d\u5169\u500b\u7bb1\u7684\u8a2d\u5b9a\u662f\u4e00\u6a23\u7684 Text Only 1 2 |\u7bb1A> = 0.707|\u68a8> + 0.707|\u6a59> |\u7bb1B> = 0.707|\u68a8> + 0.707|\u6a59> \u5169\u500b\u7bb1\u7684\u72c0\u614b\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 |\u7bb1A> * |\u7bb1B> = ( 0.707|\u68a8> ) * ( 0.707|\u68a8> ) \uff08+0.707|\u6a59> ) (+0.707|\u6a59> ) = 0.707*0.707|\u68a8>|\u68a8> + 0.707*0.707|\u68a8>|\u6a59> + 0.707*0.707|\u6a59>|\u68a8> + 0.707*0.707|\u6a59>|\u6a59> = 0.5|\u68a8>|\u68a8> + 0.5|\u68a8>|\u6a59> + 0.5|\u6a59>|\u68a8> + 0.5|\u6a59>|\u6a59> \u8a08\u7b97\u5230\u9019\u88e1\u5c31\u662f\u76e1\u982d\uff0c\u4e0d\u80fd\u518d\u7c21\u5316\u4e86\u3002 \u9019\u6a23\u51fa\u73fe\u4e86\u4e00\u500b\u65b0\u7684\u6771\u897f\uff0c\u751a\u9ebc\u662f |\u68a8>|\u68a8> \uff1f \u4e00\u958b\u59cb\u6211\u5011\u662f|\u7bb1A> * |\u7bb1B>\u7684\u3002\u6700\u5f8c\u51fa\u73fe\u4e86 |\u68a8>|\u68a8> \u3002\u9019\u500b\u610f\u601d\u662f\u5de6\u908a\u7684\u70ba\u7bb1A\u7684\u72c0\u614b\uff0c\u53f3\u908a\u7684\u70ba\u7bb1A\u7684\u72c0\u614b\uff0c\u628a\u5b83\u5011\u5beb\u5728\u4e00\u8d77\u8868\u793a\u4e86\u7d91\u7d81\u5f0f\u5730\u601d\u8003\u5b83\u5011\u7684\u5171\u540c\u5b58\u5728\u3002 \u5c31\u662f\u8aaa Text Only 1 2 \u7bb1A\u70ba\u68a8\u7684\u540c\u6642\u7bb1B\u4ea6\u70ba\u68a8 \u7bb1A=\u68a8 AND \u7bb1B=\u68a8 \u7c21\u5316\u4e00\u4e0b\u7b26\u865f Text Only 1 2 3 4 5 6 7 8 9 |\u7bb1A> * |\u7bb1B> = |\u7bb1A,\u7bb1B> |\u68a8>|\u68a8> = |\u68a8,\u68a8> \u65bc\u662f = 0.5|\u68a8,\u68a8> + 0.5|\u68a8,\u6a59> + 0.5|\u6a59,\u68a8> + 0.5|\u6a59,\u6a59> |\u7bb1A,\u7bb1B> \u662f\u4e00\u500b\u7368\u7acb\u7684\u72c0\u614b \u56e0\u70ba\u73fe\u5728\u6211\u5011\u5df2\u7d93\u7d91\u7d81\u5f0f\u5730\u601d\u8003\u5b83\u5011\u7684\u5171\u540c\u5b58\u5728\uff0c\u56e0\u6b64|\u7bb1A,\u7bb1B>\u5df2\u7d93\u662f\u4e00\u500b\u81ea\u6210\u4e00\u5bb6\u7684\u6982\u5ff5\u3002 \u62ff |\u7bb1A,\u7bb1B> \u8207\u81ea\u5df1\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 |\u7bb1A,\u7bb1B> = 0.5|\u68a8,\u68a8> + 0.5|\u68a8,\u6a59> + 0.5|\u6a59,\u68a8> + 0.5|\u6a59,\u6a59> <\u7bb1A,\u7bb1B||\u7bb1A,\u7bb1B> = ( 0.5<\u68a8,\u68a8| ) * ( 0.5|\u68a8,\u68a8> ) (+0.5<\u68a8,\u6a59| ) (+0.5|\u68a8,\u6a59> ) (+0.5<\u6a59,\u68a8| ) (+0.5|\u6a59,\u68a8> ) (+0.5<\u6a59,\u6a59| ) (+0.5|\u6a59,\u6a59> ) \u5728\u9019\u88e1\u6211\u5011\u53ef\u4ee5\u8df3\u6b65\u9a5f\uff0c\u56e0\u70ba\u6211\u5011\u77e5\u9053\u9664\u975eX=Y\uff0c\u5426\u5247<X||Y>\u5fc5\u5b9a\u70ba0\u3002\u56e0\u6b64\u53ef\u4ee5\u7701\u7565\u6240\u6709X=/=Y\u7684\u5730\u65b9\u3002 = 0.5*0.5<\u68a8,\u68a8||\u68a8,\u68a8> + 0.5*0.5<\u68a8,\u6a59||\u68a8,\u6a59> + 0.5*0.5<\u6a59,\u68a8||\u6a59,\u68a8> + 0.5*0.5<\u6a59,\u6a59||\u6a59,\u6a59> = 0.25<\u68a8,\u68a8||\u68a8,\u68a8> + 0.25<\u68a8,\u6a59||\u68a8,\u6a59> + 0.25<\u6a59,\u68a8||\u6a59,\u68a8> + 0.25<\u6a59,\u6a59||\u6a59,\u6a59> \u7d50\u679c\u5c31\u662f\u6709\u00bc\u7684\u6a5f\u7387\u6253\u958b\u5169\u500b\u7bb1\u898b\u5230\u662f(\u68a8,\u68a8)\u7684\u72c0\u614b\uff0c\u6291\u6216(\u68a8,\u6a59)\u7684\u72c0\u614b\uff0c\u53c8\u6216\u8005(\u6a59,\u68a8)\u7684\u72c0\u614b\u2026\u2026 \u5c07\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u76f8\u52a0\uff0c0.25+0.25+0.25+0.25 = 1\uff0c\u5c31\u662f100%\u3002\u5373\u662f\u8aaa\u7121\u82b1\u7121\u5047\u73fe\u5728\u770b\u7684|\u7bb1A,\u7bb1B>\u662f\u4e00\u500b\u7368\u7acb\u7684\u72c0\u614b\u3002\u5982\u679c\u6211\u5011\u628a\u7bb1A\u548c\u7bb1B\u5206\u6298\u4f86\u601d\u8003\u7684\u8a71\uff0c\u4ed6\u5011\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u76f8\u52a0\u51fa\u4f86\u6703\u662f200%\uff0c\u800c\u4e0d\u662f100%\u3002 \u6211\u624b\u4e0a\u67091\u500b\u68a81\u500b\u6a59\uff0c\u5206\u5225\u653e\u5728\u7bb1C\u548c\u7bb1D\u3002\u7d91\u7d81\u5f0f\u5730\u601d\u8003\uff0c\u5c31\u662f |\u7bb1C,\u7bb1D> \u3002 \u4f46\u73fe\u5728\u53ea\u67091\u500b\u68a81\u500b\u6a59\uff0c\u4e00\u908a\u662f\u68a8\u7684\u540c\u6642\u53e6\u4e00\u908a\u5fc5\u5b9a\u662f\u6a59\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u56e0\u6b64 Text Only 1 |\u7bb1C,\u7bb1D> = 0.707|\u68a8, \u6a59> + 0.707|\u6a59, \u68a8> \u62ff |\u7bb1C,\u7bb1D> \u8207\u81ea\u5df1\u76f8\u4e58 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <\u7bb1C,\u7bb1D||\u7bb1C,\u7bb1D> = ( 0.707<\u68a8,\u6a59| ) * ( 0.707|\u68a8,\u6a59> ) (+0.707<\u6a59,\u68a8| ) (+0.707|\u6a59,\u68a8> ) = 0.707*0.707<\u68a8,\u6a59||\u68a8,\u6a59> + 0.707*0.707<\u68a8,\u6a59||\u6a59,\u68a8> + 0.707*0.707<\u6a59,\u68a8||\u68a8,\u6a59> + 0.707*0.707<\u6a59,\u68a8||\u6a59,\u68a8> \u9664\u975eX=Y\uff0c\u5426\u5247<X||Y>\u5fc5\u5b9a\u70ba0 = 0.707*0.707<\u68a8,\u6a59||\u68a8,\u6a59> + 0.707*0.707<\u6a59,\u68a8||\u6a59,\u68a8> = 0.5<\u68a8,\u6a59||\u68a8,\u6a59> + 0.5<\u6a59,\u68a8||\u6a59,\u68a8> \u6240\u4ee5\u5c31\u662f50%\u6a5f\u7387\u6703\u662f(\u68a8, \u6a59)\uff0c50%\u6a5f\u7387\u6703\u662f(\u6a59, \u68a8)\u3002 \u5982\u679c\u6211\u53ea\u6253\u958b\u7bb1C\u6703\u600e\u6a23 \u9019\u500b\u5c31\u662f\u91cf\u5b50\u7cfe\u7e8f\u4e86\u3002\u4f60\u60f3\u4e00\u60f3\u5982\u679c\u53ea\u6253\u958b\u7bb1C\u770b\u5230\u68a8\u7684\u8a71\uff0c\u4e0d\u7528\u554f\u4e5f\u80fd\u77e5\u9053\u7bb1D\u5fc5\u5b9a\u662f\u6a59\u3002 \u9019\u7a2e\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u6211\u5011\u7528 |\u671f\u671b><\u671f\u671b||\u7bb1> \u4f86\u8655\u7406\uff0c\u9019\u662f\u65b0\u7684\u65b9\u5f0f\uff0c\u4e0d\u904e\u9019\u88e1\u7684\u671f\u671b\u53ea\u5305\u542b\u4e86\u7bb1C\u7684\u90e8\u4efd\u3002 \u4f8b\u5982\u8aaa\u6211\u5011\u671f\u671b\u6253\u958b\u7bb1C\u6703\u898b\u5230\u68a8 Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 |\u671f\u671b> = 1|\u68a8,.> \u7528.\u4f86\u8868\u793a\u6f0f\u7a7a\uff0c\u8868\u793a\u6c92\u6709\u6771\u897f\u5728\u90a3\u500b\u4f4d\u7f6e\u76f8\u4e58 \u6240\u4ee5|\u671f\u671b><\u671f\u671b||\u7bb1>\u7684\u5de6\u908a <\u671f\u671b||\u7bb1> = 1<\u68a8,.| * ( 0.707|\u68a8,\u6a59> ) (+0.707|\u6a59,\u68a8> ) = 0.707<\u68a8,.||\u68a8,\u6a59> + 0.707<\u68a8,.||\u6a59,\u68a8> \u53ea\u6709\u76f8\u4e58\u4f4d\u7f6e\u540c\u70ba\u68a8\u7684\u624d\u7372\u4fdd\u7559 = 0.707<\u68a8,.||\u68a8,\u6a59> \u540c\u6642\u56e0\u70ba\u68a8\u88ab\u76f8\u4e58\u4e86\uff0c\u5373<\u68a8||\u68a8> = 1\uff0c\u56e0\u6b64\u53ea\u5269\u4e0b|.,\u6a59> = 0.707|.,\u6a59> \u5982\u662f\u8005 |\u671f\u671b><\u671f\u671b||\u7bb1> = 1|\u68a8,.> * 0.707|.,\u6a59> = 1*0.707|\u68a8,.>|.,\u6a59> = 0.707|\u68a8,\u6a59> \u6b63\u898f\u5316 \u4e0a\u9762\u7684\u7d50\u679c 0.707|\u68a8,\u6a59> \u662f\u4e00\u500b\u65b0\u7684\u72c0\u614b\u3002\u4f46\u9019\u500b\u72c0\u614b\u6709\u9ede\u554f\u984c\uff0c\u5c31\u662f\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u7e3d\u5c11\u65bc100%\u3002 \u56e0\u70ba\u5b83\u662f 0.707|\u68a8,\u6a59> ,\u56e0\u6b64\u53ea\u67090.707^2=50%\u6a5f\u7387\u4f60\u80fd\u5920\u7372\u5f97(\u68a8,\u6a59)\uff0c\u6c92\u6709\u5176\u4ed6\u4e86\u3002\u53e6\u5916\u768450%\u6a5f\u7387\u5462\uff1f\uff1f\uff1f\u6d88\u5931\u4e86\u3002\u901950%\u7372\u5f97(\u68a8,\u6a59)\u7684\u6a5f\u7387\u5c31\u662f\u5168\u90e8\u7684\u6a5f\u7387\u4e86\u3002\u56e0\u6b64\u6211\u5011\u8981\u65bd\u884c \u6b63\u898f\u5316 \uff0c\u628a\u5b83\u8b8a\u6210\u70ba\u5408\u5171100%\u3002 \u65b9\u6cd5\u5f88\u7c21\u55ae\uff0c\u5c31\u662f\u9664\u4ee5\u6240\u6709\u53ef\u80fd\u6027\u7684\u6a5f\u7387\u7e3d\u548c\u7684\u5e73\u65b9\u6839\u3002 Text Only 1 2 3 0.707|\u68a8,\u6a59> / sqrt(0.707^2) = 0.707|\u68a8,\u6a59> / 0.707 = 1|\u68a8,\u6a59> \u7d50\u679c\u5c31\u662f 1|\u68a8,\u6a59> \u3002100%\u7684\u6a5f\u7387\u4f60\u6703\u7372\u5230(\u68a8,\u6a59)\u7684\u72c0\u614b\u3002 \u518d\u8b1b\u4e00\u6b21 Text Only 1 2 3 4 5 6 7 \u672c\u4f86\u662f |\u7bb1C,\u7bb1D> = 0.707|\u68a8, \u6a59> + 0.707|\u6a59, \u68a8> \u53ea\u89c0\u6e2c\u7bb1C\uff0c\u5f97\u77e5\u70ba\u68a8\u4e4b\u5f8c\uff0c|\u7bb1C,\u7bb1D>\u8b8a\u6210\u70ba\u4e0b\u9762\u7684\u72c0\u614b |\u7bb1C,\u7bb1D> = 1|\u68a8,\u6a59> \u7528\u6587\u5b57\u4f86\u8aaa\u5c31\u662f|\u7bb1C,\u7bb1D>\u53ea\u5269\u4e0b\u4e00\u7a2e\u53ef\u80fd\u6027 \u4e5f\u5c31\u662f\u9ad4\u73fe\u4e86 \u300c\u5982\u679c\u53ea\u6253\u958b\u7bb1C\u770b\u5230\u68a8\u7684\u8a71\uff0c\u4e0d\u7528\u554f\u4e5f\u80fd\u77e5\u9053\u7bb1D\u5fc5\u5b9a\u662f\u6a59\u300d \u9019\u53e5\u8a71\u3002 \u9019\u5c31\u662f\u91cf\u5b50\u7cfe\u7e8f\u3002","title":"\u4f86\u91cf\u5b50\u7cfe\u7e8f\u5427"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/","text":"\u79d1\u5b78\u65b9\u6cd5 \u00b6 \u672c\u6587\u7ae0\u4ee5\u975e\u4e3b\u6d41\u7684\u6578\u5b78\u516c\u7406\u7cfb\u7d71\u5b9a\u7fa9\u4e86\u79d1\u5b78\u65b9\u6cd5\uff0c\u540c\u6642\u63a2\u8a0e\u4e86\u4e00\u4e9b\u79d1\u5b78\u65b9\u6cd5\u7684\u904b\u7528\u60c5\u6cc1\u3002\u5047\u8a2d\u4e00\u500b\u8b8a\u6578\u5728\u6642\u9593\u3001\u7a7a\u9593\u3001\u5176\u4ed6\u689d\u4ef6\u7684\u6539\u8b8a\u4e4b\u4e0b\u4e5f\u96a8\u8457\u6539\u8b8a\uff0c\u79d1\u5b78\u63a2\u8a0e\u7684\u662f\u5176\u4e2d\u7684\u904e\u7a0b\u548c\u539f\u7406\u3002\u4f8b\u5982\u6642\u9593\u3001\u7a7a\u9593\u4f4d\u7f6e\u7684\u6539\u8b8a\u600e\u6a23\u5f71\u97ff\u5230\u8a72\u8b8a\u6578\u3002\u7576\u6709\u5f88\u591a\u74b0\u5883\u689d\u4ef6\u7684\u6642\u5019\uff0c\u6211\u5011\u9700\u8981\u501f\u52a9\u7dda\u6027\u4ee3\u6578\u4f86\u5206\u6790\uff0c\u5426\u5247\u53ea\u662f\u80e1\u9b27\u3002 \u7de3\u8d77 \u00b6 \u6211\u767c\u73feGoogle\u5f88\u96e3\u627e\u5230\u300c\u79d1\u5b78\u65b9\u6cd5(scientific method)\u300d\u7684\u89e3\u8aaa\u3002\u53cd\u6620\u4e86\u4e2d\u6587\u4f7f\u7528\u8005\u666e\u904d\u7684\u79d1\u5b78\u6559\u80b2\u7a0b\u5ea6\u6975\u4f4e\uff0c\u5c31\u7b97\u6709\u4eba\u60f3\u5b78\u3001\u60f3\u8b58\uff0c\u4e5f\u5f88\u96e3\u627e\u5230\u5408\u9069\u53ef\u4fe1\u7684\u8cc7\u6599\uff0c\u56e0\u6b64\u6211\u8a8d\u70ba\u6709\u5fc5\u8981\u5beb\u4e00\u7bc7\u6587\u4f86\u89e3\u91cb\u79d1\u5b78\u65b9\u6cd5\u3002 \u8b8a\u6578 \u00b6 \u5047\u8a2d\u4e00\u500bA\u73fe\u8c61\u662f\u4e00\u500b\u8b8a\u6578\uff0c\u6703\u56e0\u70ba\u67d0\u4e9b\u74b0\u5883\u56e0\u7d20\u800c\u5448\u73fe\u65b0\u7684\u5f62\u8c61\u3002 A\u73fe\u8c61\u6240\u767c\u751f\u5728\u7684\u7a7a\u9593\u6709\u5f88\u591a\u74b0\u5883\u56e0\u7d20\uff0c\u4f8b\u5982\u5176\u81ea\u8eab\u7684\u4f4d\u7f6e\u3001\u5176\u4ed6\u73fe\u8c61\u7684\u4f4d\u7f6e\u3001\u73fe\u8c61\u767c\u751f\u7684\u6642\u9593\uff0c\u6211\u5011\u731c\u6e2c\u9019\u4e9b\u74b0\u5883\u56e0\u7d20\u7684\u6539\u8b8a\u6703\u4ee4A\u73fe\u8c61\u8b8a\u6a23\u3002 Text Only 1 2 3 4 5 6 7 8 - \u70ba\u751a\u9ebc\u8981\u9019\u6a23\u5047\u8a2d\uff1f - \u56e0\u70ba\u8981\u5148\u5b9a\u7fa9\u4e00\u500b\u79d1\u5b78\u7684\u7814\u7a76\u5c0d\u8c61 - \u70ba\u751a\u9ebc\u4e00\u5b9a\u8981\u662f\u8b8a\u6578\uff1f - \u5148\u5047\u8a2d\u662f\u4e00\u500b\u8b8a\u6578\u3002\u5982\u679c\u5f8c\u4f86\u767c\u73fe\u4e86\u7121\u8ad6\u74b0\u5883\u56e0\u7d20\u600e\u6a23\u6539\u8b8a\u3001A\u73fe\u8c61\u4e5f\u662f\u6046\u5b9a\u7684\u8a71\uff0c\u9019\u4e5f\u662f\u4e00\u500b\u65b0\u767c\u73fe\u3002 - \u751a\u9ebc\u662f\u74b0\u5883\u56e0\u7d20\uff1f - \u8a72\u73fe\u8c61\u672c\u9ad4\u4ee5\u5916\u7684\u6240\u6709\u6771\u897f\u3002\u908f\u8f2f\u5730\u8aaa\u5c31\u662fsubset[ not(\u8a72\u73fe\u8c61) ]\u3002 \u76f8\u4e92\u4f5c\u7528 \u00b6 \u6211\u5011\u95dc\u5fc3\u7684\u6709\u4e09\u4ef6\u4e8b\uff1a Text Only 1 2 3 1. \u5982\u679cA\u73fe\u8c61\u5728\u7269\u7406\u7a7a\u9593\u5167\u7684\u4f4d\u7f6e\u6539\u8b8a\u4e86\uff0c\u5b83\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 2. \u5982\u679cA\u73fe\u8c61\u767c\u751f\u7684\u6642\u9593\u6539\u8b8a\u4e86\uff0c\u5b83\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 3. \u5982\u679c\u5468\u570d\u7684\u5176\u4ed6\u73fe\u8c61\u6539\u8b8a\u4e86\uff0cA\u73fe\u8c61\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f \u6211\u5011\u95dc\u5fc3\u7684\u662f\u300c\u76f8\u4e92\u4f5c\u7528\u300d\u3002 Text Only 1 2 3 A\u73fe\u8c61 <==> \u7269\u7406\u7a7a\u9593 A\u73fe\u8c61 <==> \u6642\u9593 A\u73fe\u8c61 <==> \u5176\u4ed6\u73fe\u8c61 \u7576\u6211\u5011\u5c07\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u4e5f\u770b\u5f85\u6210\u70ba\u4e00\u7a2e\u73fe\u8c61\u7684\u8a71\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u9019\u6a23\u554f\uff1a Text Only 1 2 1. \u5982\u679cA\u73fe\u8c61\u6539\u8b8a\u4e86\uff0c\u7269\u7406\u7a7a\u9593\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 2. \u5982\u679cA\u73fe\u8c61\u6539\u8b8a\u4e86\uff0c\u6642\u9593\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f \u56e0\u6b64\uff0c\u76f8\u4e92\u4f5c\u7528\u5c31\u8b8a\u6210\u7c21\u55ae\u4e00\u500b\uff1a Text Only 1 A\u73fe\u8c61 <==> \u5176\u4ed6\u73fe\u8c61 \u96c6\u5408 \u00b6 \u5982\u679cA\u73fe\u8c61\u548cB\u73fe\u8c61\u7684\u6027\u8cea\u4e00\u6a23\u7684\u8a71\uff0c\u6211\u5011\u53ef\u4ee5\u628a\u5b83\u5011\u7d44\u5408\u6210\u4e00\u500b\u985e\u578b\u3002 Text Only 1 2 A\u985e\u578b =: {A\u73fe\u8c61, B\u73fe\u8c61} C\u985e\u578b =: {C\u73fe\u8c61, D\u73fe\u8c61} A\u985e\u578b\u7684\u88cf\u9762\u5305\u542b\u4e86A\u73fe\u8c61\u548cB\u73fe\u8c61\u3002\u5982\u662f\u8005\u6211\u5011\u770b\u7684\u76f8\u4e92\u4f5c\u7528\u6703\u8b8a\u6210\u9019\u6a23\uff1a Text Only 1 A\u985e\u578b <==> \u5176\u4ed6\u985e\u578b A\u73fe\u8c61\u548cC\u73fe\u8c61\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u540c\u6642\u4e5f\u767c\u751f\u5728B\u73fe\u8c61\u548cD\u73fe\u8c61\u4e4b\u9593\u3002\u6211\u5011\u5c0dA\u73fe\u8c61\u548cC\u73fe\u8c61\u4e4b\u9593\u76f8\u4e92\u4f5c\u7528\u7684\u7406\u89e3\uff0c\u4e5f\u53ef\u4ee5\u9069\u7528\u65bc\u76f8\u540c\u985e\u578b\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\u3002 \u5be6\u9a57\u8207\u89c0\u5bdf \u00b6 \u6211\u5011\u60f3\u7372\u77e5\u73fe\u8c61\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\u662f\u5982\u4f55\u767c\u751f\u7684\uff0c\u4ee5\u53ca\u5176\u539f\u7406\u3002\u70ba\u6b64\uff0c\u6211\u5011\u9700\u8981\u4ecb\u5165\u5176\u4e2d\uff0c\u523b\u610f\u53bb\u4ee4\u7814\u7a76\u5c0d\u8c61\u7684\u73fe\u8c61\u4e4b\u9593\u767c\u751f\u76f8\u4e92\u4f5c\u7528\uff0c\u9019\u884c\u70ba\u5c31\u53eb\u505a\u5be6\u9a57\u3002 \u4f8b\u5982\uff0c\u6211\u5011\u60f3\u77e5\u9053A\u73fe\u8c61\u548c\u6642\u9593\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u5011\u53ef\u4ee5\u7dad\u6301\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u90fd\u662f\u6046\u5b9a\u7684\u72c0\u614b\u4e4b\u4e0b\uff0c**\u5728\u4e0d\u540c\u7684\u6642\u9593\u91cd\u8986**\u4ee4A\u73fe\u8c61\u767c\u751f\uff0c\u7136\u5f8c\u89c0\u5bdfA\u73fe\u8c61\u6709\u5426\u6539\u8b8a\u3002 \u53c8\u4f8b\u5982\uff0c\u6211\u5011\u60f3\u77e5\u9053A\u73fe\u8c61\u548c\u7269\u7406\u7a7a\u9593\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u5011\u53ef\u4ee5\u7dad\u6301\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u90fd\u662f\u6046\u5b9a\u7684\u72c0\u614b\u4e4b\u4e0b\uff0c**\u5728\u4e0d\u540c\u7684\u4f4d\u7f6e\u540c\u6642**\u4ee4A\u73fe\u8c61\u767c\u751f\uff0c\u7136\u5f8c\u89c0\u5bdfA\u73fe\u8c61\u6709\u5426\u6539\u8b8a\u3002 \u5982\u679c\u7121\u6cd5\u975c\u6b62\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u7684\u8a71\uff0c\u5be6\u9a57\u4e5f\u53ef\u4ee5\u9032\u884c\uff0c\u53ea\u662f\u5728\u5206\u6790\u7d50\u679c\u7684\u6642\u5019\u6bd4\u8f03\u5403\u529b\u800c\u5df2\u3002\u6211\u5011\u9700\u8981\u4f7f\u7528\u591a\u8b8a\u6578\u7684\u5206\u6790\u5de5\u5177\uff0c\u5c24\u5176\u9700\u8981\u7dda\u6027\u4ee3\u6578\u7684\u77e5\u8b58(\u800c\u4e0d\u662f\u4eba\u6587\u5b78\u79d1\u7684\u77e5\u8b58)\u3002 \u89c0\u5bdf\u4e5f\u662f\u4e00\u500b\u73fe\u8c61 \u00b6 \u89c0\u5bdf\u9019\u500b\u884c\u70ba\u4e5f\u662f\u4e00\u500b\u73fe\u8c61\u3002\u5982\u679c\u89c0\u5bdf\u884c\u70ba\u672c\u8eab\u5c31\u80fd\u5920\u6539\u8b8a\u4e86A\u73fe\u8c61\u7684\u6027\u8cea\uff0c\u6211\u5011\u5c31\u8981\u601d\u8003\u5982\u4f55\u6e1b\u8f15\u89c0\u5bdf\u6240\u5e36\u4f86\u7684\u6548\u679c\u3002 \u800c\u5be6\u9a57\u884c\u70ba\u672c\u8eab\u5e36\u4f86\u7684\u76f8\u4e92\u4f5c\u7528\u5c31\u662f\u6211\u5011\u671f\u671b\u7684\u6771\u897f\uff0c\u4e0d\u904e\u8981\u78ba\u8a8d\u7684\u662f\u5be6\u969b\u65bd\u884c\u7684\u6642\u5019\u662f\u4e0d\u662f\u8ddf\u539f\u5148\u8a08\u5283\u7684\u4e00\u6a23\u3002 \u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u73fe\u8c61 \u00b6 \u5982\u679cZ\u73fe\u8c61\u8207\u5176\u4ed6\u73fe\u8c61\u4e4b\u9593\u5b8c\u5168\u6c92\u6709\u4efb\u4f55\u76f8\u4e92\u4f5c\u7528\u7684\u8a71\uff0cZ\u73fe\u8c61\u53ef\u88ab\u770b\u5f85\u70ba\u4e0d\u5b58\u5728\uff0c\u4e8b\u5be6\u4e0a\u4ea6\u7b49\u540c\u65bc\u4e0d\u5b58\u5728\u3002\u539f\u56e0\u5982\u4e0b\uff1a Text Only 1 2 3 4 5 1. \u5b83\u4e0d\u80fd\u5920\u5f71\u97ff\u4efb\u4f55\u6771\u897f\u3002 - \u6709\u6c92\u6709Z\u73fe\u8c61\u4e5f\u6c92\u6709\u6240\u8b02\u3002\u53cd\u6b63\u90fd\u662f\u4e00\u6a23\u3002 2. \u4f60\u7121\u6cd5\u5f97\u77e5Z\u73fe\u8c61\u5b58\u5728\u3002 - Z\u73fe\u8c61\u7121\u6cd5\u5e72\u64fe\u5176\u4ed6\u73fe\u8c61\uff0c\u56e0\u6b64\u6211\u5011\u6c92\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u5f97\u77e5Z\u73fe\u8c61\u7684\u5b58\u5728\u3002\u55aa\u5931\u4e86\u300c\u5f97\u77e5\u300d\u7684\u9019\u4e00\u500b\u6e20\u9053\u3002 \u904b\u7528\u79d1\u5b78\u65b9\u6cd5 \u00b6 \u8b8a\u6578\u3001\u73fe\u8c61\u3001\u8207\u5176\u76f8\u4e92\u4f5c\u7528 \u00b6 \u5728\u5730\u7403\u8868\u9762\u4e0a\uff0c\u7269\u4ef6\u6703\u5411\u4e0b\u8dcc\u843d\u3002\u6211\u5011\u60f3\u77e5\u9053\u662f\u4e0d\u662f\u6240\u6709\u7684\u5730\u65b9\u90fd\u6703\u540c\u6a23\u5730\u767c\u751f\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u3002\u56e0\u6b64\u6211\u5011\u505a\u5be6\u9a57\uff0c\u5728\u4e0d\u540c\u7684\u5730\u65b9\u62ff\u8d77\u7269\u4ef6\u7136\u5f8c\u653e\u624b\uff0c\u7269\u4ef6\u90fd\u4e00\u6a23\u6703\u8dcc\u843d\u3002\u540c\u6642\u62ff\u8d77\u5169\u500b\u7269\u4ef6\uff0c\u540c\u6642\u653e\u624b\uff0c\u4e00\u9f4a\u8dcc\u843d\u3002\u6211\u5011\u5f97\u77e5\u56e0\u6b64\u300c\u8dcc\u843d\u300d\u7684\u9019\u500b\u73fe\u8c61\u662f\u4e0d\u53d7\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u6539\u8b8a\u7684\u5f71\u97ff\u3002 \u4f46\u662f\u6211\u5011\u8981\u4ed4\u7d30\u8003\u616e\u6240\u6709\u5be6\u9a57\u7d30\u7bc0\u548c\u74b0\u5883\u56e0\u7d20\u548c\u7d50\u679c\u7684\u7d30\u7bc0\u3002\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u767c\u751f\u7684\u300c\u8dcc\u843d\u300d\u73fe\u8c61\u90fd\u662f\u5b8c\u5168\u76f8\u540c\uff1f\u4f8b\u5982\u6211\u5011\u5fc5\u9808\u8981\u554f\uff0c\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u7684\u8dcc\u843d\u7684**\u901f\u5ea6**\u3001**\u52a0\u901f\u7387**\u90fd\u662f\u4e00\u6a23\uff1f \u540c\u6642\u6211\u5011\u53c8\u8981\u554f\uff0c\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u6703\u4e0d\u6703\u5f71\u97ff\u5230\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u672c\u8eab\uff1f\u800c\u7269\u4ef6\u672c\u8eab\u7684\u6027\u8cea\u53c8\u6703\u4e0d\u6703\u5f71\u97ff\u5230\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u7684\u904e\u7a0b\u548c\u7d50\u679c\u3002 \u79d1\u5b78\u80fd\u5920\u4f60\u8aaa\u4e86\u7b97\u55ce\uff1f \u00b6 \u4e4b\u6240\u4ee5\u5404\u570b\u5718\u968a\u6703\u91cd\u8986\u505a\u540c\u4e00\u500b\u5be6\u9a57\uff0c\u662f\u56e0\u70ba\u8981\u78ba\u5b9a\u4e0d\u662f\u5be6\u9a57\u7d50\u679c\u4e0d\u662f\u56e0\u4eba\u800c\u7570\u3001\u56e0\u6642\u800c\u7570\u3001\u56e0\u5730\u800c\u7570\u3002\u5982\u679c\u8aaa\u4e00\u500b\u5e79\u7d30\u80de\u5be6\u9a57\uff0c\u7121\u8ad6\u5982\u4f55\u90fd\u7121\u8fa6\u6cd5\u91cd\u73fe\u7576\u521d\u7684\u7d50\u679c\uff0c\u6392\u9664\u5be6\u9a57\u8a2d\u8a08\u548c\u904e\u7a0b\u7684\u554f\u984c\u4e4b\u5f8c\uff0c\u9918\u4e0b\u4f86\u5c31\u662f\u9020\u5047\u7684\u53ef\u80fd\u6027\u4e86\u3002 \u5982\u679c\u4ed6\u8aaa\u90a3\u500b\u539f\u7406\u662f\u56e0\u5730\u800c\u7570\u7684\u8a71\uff0c\u7136\u800c\u4ed6\u81ea\u5df1\u4e5f\u4e0d\u80fd\u5920\u5728\u540c\u4e00\u500b\u5be6\u9a57\u5ba4\u91cd\u8986\u540c\u4e00\u500b\u5be6\u9a57\u7d50\u679c\uff0c\u554f\u984c\u5c31\u66f4\u5927\u4e86\u3002 \u5982\u679c\u4ed6\u8aaa\u90a3\u500b\u539f\u7406\u662f\u56e0\u6642\u800c\u7570\u7684\u8a71\uff0c\u90a3\u9ebc\u6211\u5011\u4e5f\u6c92\u6709\u8fa6\u6cd5\u5f97\u77e5\u662f\u751a\u9ebc\u6642\u5019\u624d\u80fd\u5920\u4ee4\u7d50\u679c\u518d\u73fe\uff0c\u5f88\u5927\u6a5f\u6703\u6839\u672c\u90a3\u500b\u53ea\u662f\u4e00\u6b21\u6027\u7684\u73fe\u8c61\uff0c\u53ea\u767c\u751f\u5728\u539f\u59cb\u5be6\u9a57\u7576\u6642\u7684\u90a3\u4e00\u523b\u3002\u5982\u679c\u5982\u662f\u7684\u8a71\uff0c\u90a3\u9ebc\u9019\u4e5f\u5c31\u662f\u300c\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u73fe\u8c61\u300d\u3002\u56e0\u70ba\u518d\u4e5f\u4e0d\u53ef\u80fd\u767c\u751f\u7b2c\u4e8c\u6b21\u7684\uff0c\u8207\u300c\u6c92\u6709\u9019\u7a2e\u6771\u897f\u300d\u662f\u4e00\u6a23\u7684\u3002 \u795e\u9b3c\u8ad6\u8b49 \u00b6 \u6587\u79d1\u4ed4\u5e38\u898b\u7684\u300c\u8b49\u660e\u4e86\u4e16\u754c\u4e0a\u6709\u9b3c\u300d\u7684\u8faf\u8b49\u6cd5\u662f\u9019\u6a23\u7684\u3002 \u6211\u6709\u9670\u967d\u773c\uff0c\u7d93\u5e38\u898b\u5230\u9b3c\uff0c\u4f60\u770b\u4e0d\u898b\u4f46\u6211\u770b\u5f97\u898b\u3002\u79d1\u5b78\u5100\u5668\u4e0d\u80fd\u63a2\u6e2c\u5230\u9b3c\u7684\u5b58\u5728\uff0c\u4f46\u6211\u5c31\u662f\u53ef\u4ee5\u3002 \u5982\u679c\u4e00\u500b\u73fe\u8c61\u6709\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u548c\u5be6\u9a57\u7d30\u7bc0\u90fd\u662f\u6046\u5b9a\u7684\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u53ea\u6709\u5728\u6587\u79d1\u4ed4\u7684\u60c5\u6cc1\u6709\u6240\u6539\u8b8a\uff0c\u90a3\u9ebc\u6211\u5011\u8981\u601d\u8003\u7684\u662f\u554f\u984c\u662f\u5426\u5c31\u51fa\u65bc\u6587\u79d1\u4ed4\u7684\u8eab\u4e0a\uff1f \u6587\u79d1\u4ed4\u662f\u4eba\uff0c\u6211\u4e5f\u662f\u4eba\uff0c\u5927\u5bb6\u4e5f\u662f\u4eba\uff1a Text Only 1 \u4eba =: {\u6211\uff0c\u4f60\uff0c\u4ed6} \u5047\u8a2d\u4eba\u9b3c\u4e4b\u9593\u6709\u76f8\u4e92\u4f5c\u7528\uff0c\u5982\u679c\u5927\u5bb6\u90fd\u662f\u4eba\u7684\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u537b\u53ea\u6709\u6587\u79d1\u4ed4\u53ef\u4ee5\u898b\u5230\u9b3c\uff0c\u662f\u4e0d\u662f\u6587\u79d1\u4ed4\u51fa\u4e86\u554f\u984c\uff1f \u6211\u5011\u5f97\u77e5\u79d1\u5b78\u5100\u5668\u7684\u5728\u4e00\u5207\u7269\u7406\u74b0\u5883\u7684\u611f\u77e5\u80fd\u529b\u90fd\u6bd4\u4eba\u985e\u5f37\uff0c\u4f8b\u5982\u52a0\u901f\u5ea6\u3001\u8072\u6ce2\u3001\u5149\u6ce2\u3001\u96fb\u78c1\u6ce2\u3001\u91cd\u529b\u6ce2\uff0c\u5982\u679c\u9b3c\u7684\u5b58\u5728\u9019\u4e00\u5207\u7684\u7269\u7406\u6027\u8cea\u4e0a\u90fd\u4e0d\u80fd\u5920\u5f97\u4ee5\u53cd\u6620\u7684\u8a71\uff0c\u5c31\u662f\u8aaa\u53ef\u80fd\u6027\u53ea\u6709\u4e00\u500b\uff1a\u662f\u6587\u79d1\u4ed4\u51fa\u4e86\u554f\u984c\u3002 \u5982\u679c\u9b3c\u8207\u5176\u4ed6\u4e00\u5207\u4e8b\u60c5\u7686\u7121\u76f8\u4e92\u4f5c\u7528\uff0c\u53ea\u6709\u8ddf\u6587\u79d1\u4ed4\u7684\u8a8d\u77e5\u4e4b\u9593\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u8a71\uff0c\u7b54\u6848\u4e4b\u6709\u5169\u500b\uff1a Text Only 1 2 1. \u9019\u500b\u6587\u79d1\u4ed4\u662f\u88ab\u9078\u4e2d\u7684\uff0c\u503c\u5f97\u89e3\u5256\u7814\u7a76\u6709\u751a\u9ebc\u7279\u5225\u7684\u69cb\u9020 2. \u9019\u500b\u6587\u79d1\u4ed4\u60a3\u4e0a\u4e86\u601d\u89ba\u5931\u8abf \u793e\u6703\u79d1\u5b78\u662f\u79d1\u5b78\u55ce\uff1f \u00b6 \u4e0d\u662f\u3002\u56e0\u70ba\u793e\u6703\u79d1\u5b78\u6c92\u6709\u52aa\u529b\u53bb\u78ba\u4fdd\u5be6\u9a57\u74b0\u5883\u7684\u4e00\u81f4\uff0c\u5373\u4f7f\u4e0d\u4e00\u81f4\uff0c\u4e5f\u4ed6\u5011\u4e5f\u6c92\u6709\u904b\u7528\u591a\u8b8a\u6578\u5206\u6790\u624b\u6cd5\u548c\u5de5\u5177\u4f86\u5206\u96e2\u5404\u74b0\u5883\u56e0\u7d20\u548c\u7d50\u679c\u4e4b\u9593\u7684\u95dc\u4fc2\u3002\u6700\u57fa\u672c\uff0c\u7dda\u6027\u4ee3\u6578\u662f\u5fc5\u4fee\u7684\u3002 \u54f2\u5b78\u5728\u81ea\u7136\u79d1\u5b78\u4e0a\u7684\u5730\u4f4d\u6bd4\u7269\u7406\u3001\u5316\u5b78\u3001\u751f\u7269\u5b78\u7b49\u9ad8\u55ce\uff1f \u00b6 \u6587\u79d1\u4ed4\u7684\u8001\u751f\u5e38\u8ac7\u662f\u54f2\u5b78\u8d85\u7136\u65bc\u79d1\u5b78\u751a\u9ebc\u7684\uff0c\u7269\u7406\u5b78\u53ca\u4e0d\u4e0a\u54f2\u5b78\u751a\u9ebc\u7684\uff0c\u53c8\u6216\u8005\u662f\u54f2\u5b78\u6bd4\u81ea\u7136\u79d1\u5b78\u66f4\u63a5\u8fd1\u79d1\u5b78\u751a\u9ebc\u7684\u3002 \u4f46\u5373\u4f7f(\u5047\u8a2d)\u54f2\u5b78\u7684\u7814\u7a76\u65b9\u6cd5\u7b26\u5408\u4e86\u4ee5\u4e0a\u8ac7\u8ad6\u7684\u79d1\u5b78\u65b9\u6cd5\uff0c\u5176\u7814\u7a76\u5c0d\u8c61\u4e5f\u4e0d\u662f\u81ea\u7136\u73fe\u8c61\uff0c\u54f2\u5b78\u53ea\u662f\u5c0d\u5176\u4ed6\u54f2\u5b78\u5bb6\u7684\u8a71\u8a9e\u5167\u5bb9\u9032\u884c\u7814\u7a76\u800c\u5df2\u3002 \u7269\u7406\u3001\u5316\u5b78\u3001\u751f\u7269\u5b78\u6703\u6839\u64da\u81ea\u7136\u73fe\u8c61\u8a2d\u8a08\u5be6\u9a57\u3001\u9a57\u8b49\u7406\u8ad6\u3001\u7372\u5f97\u77e5\u8b58\u3002\u54f2\u5b78\u7cfb\u5728\u54ea\u88e1\uff1f\u5c0d\u81ea\u7136\u73fe\u8c61\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u54f2\u5b78\uff0c\u5728\u81ea\u7136\u79d1\u5b78\u7684\u7814\u7a76\u9ad4\u7cfb\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u300c\u5730\u4f4d\u300d\u4e4b\u985e\u7684\u6771\u897f\u3002 \u00b6 \u60f3\u5230\u518d\u88dc\u5145 \u00b6","title":"\u79d1\u5b78\u65b9\u6cd5"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_1","text":"\u672c\u6587\u7ae0\u4ee5\u975e\u4e3b\u6d41\u7684\u6578\u5b78\u516c\u7406\u7cfb\u7d71\u5b9a\u7fa9\u4e86\u79d1\u5b78\u65b9\u6cd5\uff0c\u540c\u6642\u63a2\u8a0e\u4e86\u4e00\u4e9b\u79d1\u5b78\u65b9\u6cd5\u7684\u904b\u7528\u60c5\u6cc1\u3002\u5047\u8a2d\u4e00\u500b\u8b8a\u6578\u5728\u6642\u9593\u3001\u7a7a\u9593\u3001\u5176\u4ed6\u689d\u4ef6\u7684\u6539\u8b8a\u4e4b\u4e0b\u4e5f\u96a8\u8457\u6539\u8b8a\uff0c\u79d1\u5b78\u63a2\u8a0e\u7684\u662f\u5176\u4e2d\u7684\u904e\u7a0b\u548c\u539f\u7406\u3002\u4f8b\u5982\u6642\u9593\u3001\u7a7a\u9593\u4f4d\u7f6e\u7684\u6539\u8b8a\u600e\u6a23\u5f71\u97ff\u5230\u8a72\u8b8a\u6578\u3002\u7576\u6709\u5f88\u591a\u74b0\u5883\u689d\u4ef6\u7684\u6642\u5019\uff0c\u6211\u5011\u9700\u8981\u501f\u52a9\u7dda\u6027\u4ee3\u6578\u4f86\u5206\u6790\uff0c\u5426\u5247\u53ea\u662f\u80e1\u9b27\u3002","title":"\u79d1\u5b78\u65b9\u6cd5"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_2","text":"\u6211\u767c\u73feGoogle\u5f88\u96e3\u627e\u5230\u300c\u79d1\u5b78\u65b9\u6cd5(scientific method)\u300d\u7684\u89e3\u8aaa\u3002\u53cd\u6620\u4e86\u4e2d\u6587\u4f7f\u7528\u8005\u666e\u904d\u7684\u79d1\u5b78\u6559\u80b2\u7a0b\u5ea6\u6975\u4f4e\uff0c\u5c31\u7b97\u6709\u4eba\u60f3\u5b78\u3001\u60f3\u8b58\uff0c\u4e5f\u5f88\u96e3\u627e\u5230\u5408\u9069\u53ef\u4fe1\u7684\u8cc7\u6599\uff0c\u56e0\u6b64\u6211\u8a8d\u70ba\u6709\u5fc5\u8981\u5beb\u4e00\u7bc7\u6587\u4f86\u89e3\u91cb\u79d1\u5b78\u65b9\u6cd5\u3002","title":"\u7de3\u8d77"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_3","text":"\u5047\u8a2d\u4e00\u500bA\u73fe\u8c61\u662f\u4e00\u500b\u8b8a\u6578\uff0c\u6703\u56e0\u70ba\u67d0\u4e9b\u74b0\u5883\u56e0\u7d20\u800c\u5448\u73fe\u65b0\u7684\u5f62\u8c61\u3002 A\u73fe\u8c61\u6240\u767c\u751f\u5728\u7684\u7a7a\u9593\u6709\u5f88\u591a\u74b0\u5883\u56e0\u7d20\uff0c\u4f8b\u5982\u5176\u81ea\u8eab\u7684\u4f4d\u7f6e\u3001\u5176\u4ed6\u73fe\u8c61\u7684\u4f4d\u7f6e\u3001\u73fe\u8c61\u767c\u751f\u7684\u6642\u9593\uff0c\u6211\u5011\u731c\u6e2c\u9019\u4e9b\u74b0\u5883\u56e0\u7d20\u7684\u6539\u8b8a\u6703\u4ee4A\u73fe\u8c61\u8b8a\u6a23\u3002 Text Only 1 2 3 4 5 6 7 8 - \u70ba\u751a\u9ebc\u8981\u9019\u6a23\u5047\u8a2d\uff1f - \u56e0\u70ba\u8981\u5148\u5b9a\u7fa9\u4e00\u500b\u79d1\u5b78\u7684\u7814\u7a76\u5c0d\u8c61 - \u70ba\u751a\u9ebc\u4e00\u5b9a\u8981\u662f\u8b8a\u6578\uff1f - \u5148\u5047\u8a2d\u662f\u4e00\u500b\u8b8a\u6578\u3002\u5982\u679c\u5f8c\u4f86\u767c\u73fe\u4e86\u7121\u8ad6\u74b0\u5883\u56e0\u7d20\u600e\u6a23\u6539\u8b8a\u3001A\u73fe\u8c61\u4e5f\u662f\u6046\u5b9a\u7684\u8a71\uff0c\u9019\u4e5f\u662f\u4e00\u500b\u65b0\u767c\u73fe\u3002 - \u751a\u9ebc\u662f\u74b0\u5883\u56e0\u7d20\uff1f - \u8a72\u73fe\u8c61\u672c\u9ad4\u4ee5\u5916\u7684\u6240\u6709\u6771\u897f\u3002\u908f\u8f2f\u5730\u8aaa\u5c31\u662fsubset[ not(\u8a72\u73fe\u8c61) ]\u3002","title":"\u8b8a\u6578"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_4","text":"\u6211\u5011\u95dc\u5fc3\u7684\u6709\u4e09\u4ef6\u4e8b\uff1a Text Only 1 2 3 1. \u5982\u679cA\u73fe\u8c61\u5728\u7269\u7406\u7a7a\u9593\u5167\u7684\u4f4d\u7f6e\u6539\u8b8a\u4e86\uff0c\u5b83\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 2. \u5982\u679cA\u73fe\u8c61\u767c\u751f\u7684\u6642\u9593\u6539\u8b8a\u4e86\uff0c\u5b83\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 3. \u5982\u679c\u5468\u570d\u7684\u5176\u4ed6\u73fe\u8c61\u6539\u8b8a\u4e86\uff0cA\u73fe\u8c61\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f \u6211\u5011\u95dc\u5fc3\u7684\u662f\u300c\u76f8\u4e92\u4f5c\u7528\u300d\u3002 Text Only 1 2 3 A\u73fe\u8c61 <==> \u7269\u7406\u7a7a\u9593 A\u73fe\u8c61 <==> \u6642\u9593 A\u73fe\u8c61 <==> \u5176\u4ed6\u73fe\u8c61 \u7576\u6211\u5011\u5c07\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u4e5f\u770b\u5f85\u6210\u70ba\u4e00\u7a2e\u73fe\u8c61\u7684\u8a71\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u9019\u6a23\u554f\uff1a Text Only 1 2 1. \u5982\u679cA\u73fe\u8c61\u6539\u8b8a\u4e86\uff0c\u7269\u7406\u7a7a\u9593\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f 2. \u5982\u679cA\u73fe\u8c61\u6539\u8b8a\u4e86\uff0c\u6642\u9593\u6703\u4e0d\u6703\u4e5f\u56e0\u6b64\u800c\u6539\u8b8a\uff1f \u56e0\u6b64\uff0c\u76f8\u4e92\u4f5c\u7528\u5c31\u8b8a\u6210\u7c21\u55ae\u4e00\u500b\uff1a Text Only 1 A\u73fe\u8c61 <==> \u5176\u4ed6\u73fe\u8c61","title":"\u76f8\u4e92\u4f5c\u7528"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_5","text":"\u5982\u679cA\u73fe\u8c61\u548cB\u73fe\u8c61\u7684\u6027\u8cea\u4e00\u6a23\u7684\u8a71\uff0c\u6211\u5011\u53ef\u4ee5\u628a\u5b83\u5011\u7d44\u5408\u6210\u4e00\u500b\u985e\u578b\u3002 Text Only 1 2 A\u985e\u578b =: {A\u73fe\u8c61, B\u73fe\u8c61} C\u985e\u578b =: {C\u73fe\u8c61, D\u73fe\u8c61} A\u985e\u578b\u7684\u88cf\u9762\u5305\u542b\u4e86A\u73fe\u8c61\u548cB\u73fe\u8c61\u3002\u5982\u662f\u8005\u6211\u5011\u770b\u7684\u76f8\u4e92\u4f5c\u7528\u6703\u8b8a\u6210\u9019\u6a23\uff1a Text Only 1 A\u985e\u578b <==> \u5176\u4ed6\u985e\u578b A\u73fe\u8c61\u548cC\u73fe\u8c61\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u540c\u6642\u4e5f\u767c\u751f\u5728B\u73fe\u8c61\u548cD\u73fe\u8c61\u4e4b\u9593\u3002\u6211\u5011\u5c0dA\u73fe\u8c61\u548cC\u73fe\u8c61\u4e4b\u9593\u76f8\u4e92\u4f5c\u7528\u7684\u7406\u89e3\uff0c\u4e5f\u53ef\u4ee5\u9069\u7528\u65bc\u76f8\u540c\u985e\u578b\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\u3002","title":"\u96c6\u5408"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_6","text":"\u6211\u5011\u60f3\u7372\u77e5\u73fe\u8c61\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\u662f\u5982\u4f55\u767c\u751f\u7684\uff0c\u4ee5\u53ca\u5176\u539f\u7406\u3002\u70ba\u6b64\uff0c\u6211\u5011\u9700\u8981\u4ecb\u5165\u5176\u4e2d\uff0c\u523b\u610f\u53bb\u4ee4\u7814\u7a76\u5c0d\u8c61\u7684\u73fe\u8c61\u4e4b\u9593\u767c\u751f\u76f8\u4e92\u4f5c\u7528\uff0c\u9019\u884c\u70ba\u5c31\u53eb\u505a\u5be6\u9a57\u3002 \u4f8b\u5982\uff0c\u6211\u5011\u60f3\u77e5\u9053A\u73fe\u8c61\u548c\u6642\u9593\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u5011\u53ef\u4ee5\u7dad\u6301\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u90fd\u662f\u6046\u5b9a\u7684\u72c0\u614b\u4e4b\u4e0b\uff0c**\u5728\u4e0d\u540c\u7684\u6642\u9593\u91cd\u8986**\u4ee4A\u73fe\u8c61\u767c\u751f\uff0c\u7136\u5f8c\u89c0\u5bdfA\u73fe\u8c61\u6709\u5426\u6539\u8b8a\u3002 \u53c8\u4f8b\u5982\uff0c\u6211\u5011\u60f3\u77e5\u9053A\u73fe\u8c61\u548c\u7269\u7406\u7a7a\u9593\u4e4b\u9593\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u5011\u53ef\u4ee5\u7dad\u6301\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u90fd\u662f\u6046\u5b9a\u7684\u72c0\u614b\u4e4b\u4e0b\uff0c**\u5728\u4e0d\u540c\u7684\u4f4d\u7f6e\u540c\u6642**\u4ee4A\u73fe\u8c61\u767c\u751f\uff0c\u7136\u5f8c\u89c0\u5bdfA\u73fe\u8c61\u6709\u5426\u6539\u8b8a\u3002 \u5982\u679c\u7121\u6cd5\u975c\u6b62\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u7684\u8a71\uff0c\u5be6\u9a57\u4e5f\u53ef\u4ee5\u9032\u884c\uff0c\u53ea\u662f\u5728\u5206\u6790\u7d50\u679c\u7684\u6642\u5019\u6bd4\u8f03\u5403\u529b\u800c\u5df2\u3002\u6211\u5011\u9700\u8981\u4f7f\u7528\u591a\u8b8a\u6578\u7684\u5206\u6790\u5de5\u5177\uff0c\u5c24\u5176\u9700\u8981\u7dda\u6027\u4ee3\u6578\u7684\u77e5\u8b58(\u800c\u4e0d\u662f\u4eba\u6587\u5b78\u79d1\u7684\u77e5\u8b58)\u3002","title":"\u5be6\u9a57\u8207\u89c0\u5bdf"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_7","text":"\u89c0\u5bdf\u9019\u500b\u884c\u70ba\u4e5f\u662f\u4e00\u500b\u73fe\u8c61\u3002\u5982\u679c\u89c0\u5bdf\u884c\u70ba\u672c\u8eab\u5c31\u80fd\u5920\u6539\u8b8a\u4e86A\u73fe\u8c61\u7684\u6027\u8cea\uff0c\u6211\u5011\u5c31\u8981\u601d\u8003\u5982\u4f55\u6e1b\u8f15\u89c0\u5bdf\u6240\u5e36\u4f86\u7684\u6548\u679c\u3002 \u800c\u5be6\u9a57\u884c\u70ba\u672c\u8eab\u5e36\u4f86\u7684\u76f8\u4e92\u4f5c\u7528\u5c31\u662f\u6211\u5011\u671f\u671b\u7684\u6771\u897f\uff0c\u4e0d\u904e\u8981\u78ba\u8a8d\u7684\u662f\u5be6\u969b\u65bd\u884c\u7684\u6642\u5019\u662f\u4e0d\u662f\u8ddf\u539f\u5148\u8a08\u5283\u7684\u4e00\u6a23\u3002","title":"\u89c0\u5bdf\u4e5f\u662f\u4e00\u500b\u73fe\u8c61"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_8","text":"\u5982\u679cZ\u73fe\u8c61\u8207\u5176\u4ed6\u73fe\u8c61\u4e4b\u9593\u5b8c\u5168\u6c92\u6709\u4efb\u4f55\u76f8\u4e92\u4f5c\u7528\u7684\u8a71\uff0cZ\u73fe\u8c61\u53ef\u88ab\u770b\u5f85\u70ba\u4e0d\u5b58\u5728\uff0c\u4e8b\u5be6\u4e0a\u4ea6\u7b49\u540c\u65bc\u4e0d\u5b58\u5728\u3002\u539f\u56e0\u5982\u4e0b\uff1a Text Only 1 2 3 4 5 1. \u5b83\u4e0d\u80fd\u5920\u5f71\u97ff\u4efb\u4f55\u6771\u897f\u3002 - \u6709\u6c92\u6709Z\u73fe\u8c61\u4e5f\u6c92\u6709\u6240\u8b02\u3002\u53cd\u6b63\u90fd\u662f\u4e00\u6a23\u3002 2. \u4f60\u7121\u6cd5\u5f97\u77e5Z\u73fe\u8c61\u5b58\u5728\u3002 - Z\u73fe\u8c61\u7121\u6cd5\u5e72\u64fe\u5176\u4ed6\u73fe\u8c61\uff0c\u56e0\u6b64\u6211\u5011\u6c92\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u5f97\u77e5Z\u73fe\u8c61\u7684\u5b58\u5728\u3002\u55aa\u5931\u4e86\u300c\u5f97\u77e5\u300d\u7684\u9019\u4e00\u500b\u6e20\u9053\u3002","title":"\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u73fe\u8c61"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_9","text":"","title":"\u904b\u7528\u79d1\u5b78\u65b9\u6cd5"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_10","text":"\u5728\u5730\u7403\u8868\u9762\u4e0a\uff0c\u7269\u4ef6\u6703\u5411\u4e0b\u8dcc\u843d\u3002\u6211\u5011\u60f3\u77e5\u9053\u662f\u4e0d\u662f\u6240\u6709\u7684\u5730\u65b9\u90fd\u6703\u540c\u6a23\u5730\u767c\u751f\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u3002\u56e0\u6b64\u6211\u5011\u505a\u5be6\u9a57\uff0c\u5728\u4e0d\u540c\u7684\u5730\u65b9\u62ff\u8d77\u7269\u4ef6\u7136\u5f8c\u653e\u624b\uff0c\u7269\u4ef6\u90fd\u4e00\u6a23\u6703\u8dcc\u843d\u3002\u540c\u6642\u62ff\u8d77\u5169\u500b\u7269\u4ef6\uff0c\u540c\u6642\u653e\u624b\uff0c\u4e00\u9f4a\u8dcc\u843d\u3002\u6211\u5011\u5f97\u77e5\u56e0\u6b64\u300c\u8dcc\u843d\u300d\u7684\u9019\u500b\u73fe\u8c61\u662f\u4e0d\u53d7\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u6539\u8b8a\u7684\u5f71\u97ff\u3002 \u4f46\u662f\u6211\u5011\u8981\u4ed4\u7d30\u8003\u616e\u6240\u6709\u5be6\u9a57\u7d30\u7bc0\u548c\u74b0\u5883\u56e0\u7d20\u548c\u7d50\u679c\u7684\u7d30\u7bc0\u3002\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u767c\u751f\u7684\u300c\u8dcc\u843d\u300d\u73fe\u8c61\u90fd\u662f\u5b8c\u5168\u76f8\u540c\uff1f\u4f8b\u5982\u6211\u5011\u5fc5\u9808\u8981\u554f\uff0c\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u7684\u8dcc\u843d\u7684**\u901f\u5ea6**\u3001**\u52a0\u901f\u7387**\u90fd\u662f\u4e00\u6a23\uff1f \u540c\u6642\u6211\u5011\u53c8\u8981\u554f\uff0c\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u6703\u4e0d\u6703\u5f71\u97ff\u5230\u7269\u7406\u7a7a\u9593\u548c\u6642\u9593\u672c\u8eab\uff1f\u800c\u7269\u4ef6\u672c\u8eab\u7684\u6027\u8cea\u53c8\u6703\u4e0d\u6703\u5f71\u97ff\u5230\u300c\u8dcc\u843d\u300d\u9019\u500b\u73fe\u8c61\u7684\u904e\u7a0b\u548c\u7d50\u679c\u3002","title":"\u8b8a\u6578\u3001\u73fe\u8c61\u3001\u8207\u5176\u76f8\u4e92\u4f5c\u7528"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_11","text":"\u4e4b\u6240\u4ee5\u5404\u570b\u5718\u968a\u6703\u91cd\u8986\u505a\u540c\u4e00\u500b\u5be6\u9a57\uff0c\u662f\u56e0\u70ba\u8981\u78ba\u5b9a\u4e0d\u662f\u5be6\u9a57\u7d50\u679c\u4e0d\u662f\u56e0\u4eba\u800c\u7570\u3001\u56e0\u6642\u800c\u7570\u3001\u56e0\u5730\u800c\u7570\u3002\u5982\u679c\u8aaa\u4e00\u500b\u5e79\u7d30\u80de\u5be6\u9a57\uff0c\u7121\u8ad6\u5982\u4f55\u90fd\u7121\u8fa6\u6cd5\u91cd\u73fe\u7576\u521d\u7684\u7d50\u679c\uff0c\u6392\u9664\u5be6\u9a57\u8a2d\u8a08\u548c\u904e\u7a0b\u7684\u554f\u984c\u4e4b\u5f8c\uff0c\u9918\u4e0b\u4f86\u5c31\u662f\u9020\u5047\u7684\u53ef\u80fd\u6027\u4e86\u3002 \u5982\u679c\u4ed6\u8aaa\u90a3\u500b\u539f\u7406\u662f\u56e0\u5730\u800c\u7570\u7684\u8a71\uff0c\u7136\u800c\u4ed6\u81ea\u5df1\u4e5f\u4e0d\u80fd\u5920\u5728\u540c\u4e00\u500b\u5be6\u9a57\u5ba4\u91cd\u8986\u540c\u4e00\u500b\u5be6\u9a57\u7d50\u679c\uff0c\u554f\u984c\u5c31\u66f4\u5927\u4e86\u3002 \u5982\u679c\u4ed6\u8aaa\u90a3\u500b\u539f\u7406\u662f\u56e0\u6642\u800c\u7570\u7684\u8a71\uff0c\u90a3\u9ebc\u6211\u5011\u4e5f\u6c92\u6709\u8fa6\u6cd5\u5f97\u77e5\u662f\u751a\u9ebc\u6642\u5019\u624d\u80fd\u5920\u4ee4\u7d50\u679c\u518d\u73fe\uff0c\u5f88\u5927\u6a5f\u6703\u6839\u672c\u90a3\u500b\u53ea\u662f\u4e00\u6b21\u6027\u7684\u73fe\u8c61\uff0c\u53ea\u767c\u751f\u5728\u539f\u59cb\u5be6\u9a57\u7576\u6642\u7684\u90a3\u4e00\u523b\u3002\u5982\u679c\u5982\u662f\u7684\u8a71\uff0c\u90a3\u9ebc\u9019\u4e5f\u5c31\u662f\u300c\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u73fe\u8c61\u300d\u3002\u56e0\u70ba\u518d\u4e5f\u4e0d\u53ef\u80fd\u767c\u751f\u7b2c\u4e8c\u6b21\u7684\uff0c\u8207\u300c\u6c92\u6709\u9019\u7a2e\u6771\u897f\u300d\u662f\u4e00\u6a23\u7684\u3002","title":"\u79d1\u5b78\u80fd\u5920\u4f60\u8aaa\u4e86\u7b97\u55ce\uff1f"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_12","text":"\u6587\u79d1\u4ed4\u5e38\u898b\u7684\u300c\u8b49\u660e\u4e86\u4e16\u754c\u4e0a\u6709\u9b3c\u300d\u7684\u8faf\u8b49\u6cd5\u662f\u9019\u6a23\u7684\u3002 \u6211\u6709\u9670\u967d\u773c\uff0c\u7d93\u5e38\u898b\u5230\u9b3c\uff0c\u4f60\u770b\u4e0d\u898b\u4f46\u6211\u770b\u5f97\u898b\u3002\u79d1\u5b78\u5100\u5668\u4e0d\u80fd\u63a2\u6e2c\u5230\u9b3c\u7684\u5b58\u5728\uff0c\u4f46\u6211\u5c31\u662f\u53ef\u4ee5\u3002 \u5982\u679c\u4e00\u500b\u73fe\u8c61\u6709\u5176\u4ed6\u6240\u6709\u74b0\u5883\u56e0\u7d20\u548c\u5be6\u9a57\u7d30\u7bc0\u90fd\u662f\u6046\u5b9a\u7684\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u53ea\u6709\u5728\u6587\u79d1\u4ed4\u7684\u60c5\u6cc1\u6709\u6240\u6539\u8b8a\uff0c\u90a3\u9ebc\u6211\u5011\u8981\u601d\u8003\u7684\u662f\u554f\u984c\u662f\u5426\u5c31\u51fa\u65bc\u6587\u79d1\u4ed4\u7684\u8eab\u4e0a\uff1f \u6587\u79d1\u4ed4\u662f\u4eba\uff0c\u6211\u4e5f\u662f\u4eba\uff0c\u5927\u5bb6\u4e5f\u662f\u4eba\uff1a Text Only 1 \u4eba =: {\u6211\uff0c\u4f60\uff0c\u4ed6} \u5047\u8a2d\u4eba\u9b3c\u4e4b\u9593\u6709\u76f8\u4e92\u4f5c\u7528\uff0c\u5982\u679c\u5927\u5bb6\u90fd\u662f\u4eba\u7684\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u537b\u53ea\u6709\u6587\u79d1\u4ed4\u53ef\u4ee5\u898b\u5230\u9b3c\uff0c\u662f\u4e0d\u662f\u6587\u79d1\u4ed4\u51fa\u4e86\u554f\u984c\uff1f \u6211\u5011\u5f97\u77e5\u79d1\u5b78\u5100\u5668\u7684\u5728\u4e00\u5207\u7269\u7406\u74b0\u5883\u7684\u611f\u77e5\u80fd\u529b\u90fd\u6bd4\u4eba\u985e\u5f37\uff0c\u4f8b\u5982\u52a0\u901f\u5ea6\u3001\u8072\u6ce2\u3001\u5149\u6ce2\u3001\u96fb\u78c1\u6ce2\u3001\u91cd\u529b\u6ce2\uff0c\u5982\u679c\u9b3c\u7684\u5b58\u5728\u9019\u4e00\u5207\u7684\u7269\u7406\u6027\u8cea\u4e0a\u90fd\u4e0d\u80fd\u5920\u5f97\u4ee5\u53cd\u6620\u7684\u8a71\uff0c\u5c31\u662f\u8aaa\u53ef\u80fd\u6027\u53ea\u6709\u4e00\u500b\uff1a\u662f\u6587\u79d1\u4ed4\u51fa\u4e86\u554f\u984c\u3002 \u5982\u679c\u9b3c\u8207\u5176\u4ed6\u4e00\u5207\u4e8b\u60c5\u7686\u7121\u76f8\u4e92\u4f5c\u7528\uff0c\u53ea\u6709\u8ddf\u6587\u79d1\u4ed4\u7684\u8a8d\u77e5\u4e4b\u9593\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u8a71\uff0c\u7b54\u6848\u4e4b\u6709\u5169\u500b\uff1a Text Only 1 2 1. \u9019\u500b\u6587\u79d1\u4ed4\u662f\u88ab\u9078\u4e2d\u7684\uff0c\u503c\u5f97\u89e3\u5256\u7814\u7a76\u6709\u751a\u9ebc\u7279\u5225\u7684\u69cb\u9020 2. \u9019\u500b\u6587\u79d1\u4ed4\u60a3\u4e0a\u4e86\u601d\u89ba\u5931\u8abf","title":"\u795e\u9b3c\u8ad6\u8b49"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_13","text":"\u4e0d\u662f\u3002\u56e0\u70ba\u793e\u6703\u79d1\u5b78\u6c92\u6709\u52aa\u529b\u53bb\u78ba\u4fdd\u5be6\u9a57\u74b0\u5883\u7684\u4e00\u81f4\uff0c\u5373\u4f7f\u4e0d\u4e00\u81f4\uff0c\u4e5f\u4ed6\u5011\u4e5f\u6c92\u6709\u904b\u7528\u591a\u8b8a\u6578\u5206\u6790\u624b\u6cd5\u548c\u5de5\u5177\u4f86\u5206\u96e2\u5404\u74b0\u5883\u56e0\u7d20\u548c\u7d50\u679c\u4e4b\u9593\u7684\u95dc\u4fc2\u3002\u6700\u57fa\u672c\uff0c\u7dda\u6027\u4ee3\u6578\u662f\u5fc5\u4fee\u7684\u3002","title":"\u793e\u6703\u79d1\u5b78\u662f\u79d1\u5b78\u55ce\uff1f"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_14","text":"\u6587\u79d1\u4ed4\u7684\u8001\u751f\u5e38\u8ac7\u662f\u54f2\u5b78\u8d85\u7136\u65bc\u79d1\u5b78\u751a\u9ebc\u7684\uff0c\u7269\u7406\u5b78\u53ca\u4e0d\u4e0a\u54f2\u5b78\u751a\u9ebc\u7684\uff0c\u53c8\u6216\u8005\u662f\u54f2\u5b78\u6bd4\u81ea\u7136\u79d1\u5b78\u66f4\u63a5\u8fd1\u79d1\u5b78\u751a\u9ebc\u7684\u3002 \u4f46\u5373\u4f7f(\u5047\u8a2d)\u54f2\u5b78\u7684\u7814\u7a76\u65b9\u6cd5\u7b26\u5408\u4e86\u4ee5\u4e0a\u8ac7\u8ad6\u7684\u79d1\u5b78\u65b9\u6cd5\uff0c\u5176\u7814\u7a76\u5c0d\u8c61\u4e5f\u4e0d\u662f\u81ea\u7136\u73fe\u8c61\uff0c\u54f2\u5b78\u53ea\u662f\u5c0d\u5176\u4ed6\u54f2\u5b78\u5bb6\u7684\u8a71\u8a9e\u5167\u5bb9\u9032\u884c\u7814\u7a76\u800c\u5df2\u3002 \u7269\u7406\u3001\u5316\u5b78\u3001\u751f\u7269\u5b78\u6703\u6839\u64da\u81ea\u7136\u73fe\u8c61\u8a2d\u8a08\u5be6\u9a57\u3001\u9a57\u8b49\u7406\u8ad6\u3001\u7372\u5f97\u77e5\u8b58\u3002\u54f2\u5b78\u7cfb\u5728\u54ea\u88e1\uff1f\u5c0d\u81ea\u7136\u73fe\u8c61\u6c92\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u54f2\u5b78\uff0c\u5728\u81ea\u7136\u79d1\u5b78\u7684\u7814\u7a76\u9ad4\u7cfb\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u300c\u5730\u4f4d\u300d\u4e4b\u985e\u7684\u6771\u897f\u3002","title":"\u54f2\u5b78\u5728\u81ea\u7136\u79d1\u5b78\u4e0a\u7684\u5730\u4f4d\u6bd4\u7269\u7406\u3001\u5316\u5b78\u3001\u751f\u7269\u5b78\u7b49\u9ad8\u55ce\uff1f"},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_15","text":"","title":""},{"location":"toward_science/%E7%A7%91%E5%AD%B8%E6%96%B9%E6%B3%95/#_16","text":"","title":"\u60f3\u5230\u518d\u88dc\u5145"}]}